
CONTROL_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015718  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  080159b8  080159b8  000169b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080164a0  080164a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080164a8  080164a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080164ac  080164ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  24000000  080164b0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001460  240001f0  080166a0  000181f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001650  080166a0  00018650  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000181f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024fec  00000000  00000000  0001821e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004da3  00000000  00000000  0003d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a88  00000000  00000000  00041fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001479  00000000  00000000  00043a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ebc8  00000000  00000000  00044eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000293cb  00000000  00000000  00083a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001815e7  00000000  00000000  000ace44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022e42b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008374  00000000  00000000  0022e470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  002367e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080159a0 	.word	0x080159a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	080159a0 	.word	0x080159a0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	615a      	str	r2, [r3, #20]
 8000ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac8:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000aca:	4a32      	ldr	r2, [pc, #200]	@ (8000b94 <MX_ADC1_Init+0xf0>)
 8000acc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ace:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000ad0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ad4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae8:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aee:	4b28      	ldr	r3, [pc, #160]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000af4:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afa:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b00:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b06:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b0c:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b2c:	4818      	ldr	r0, [pc, #96]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b2e:	f004 fddb 	bl	80056e8 <HAL_ADC_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b38:	f001 f915 	bl	8001d66 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4812      	ldr	r0, [pc, #72]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b48:	f005 ff38 	bl	80069bc <HAL_ADCEx_MultiModeConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b52:	f001 f908 	bl	8001d66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <MX_ADC1_Init+0xf4>)
 8000b58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5a:	2306      	movs	r3, #6
 8000b5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b62:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b66:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_ADC1_Init+0xec>)
 8000b7a:	f005 f957 	bl	8005e2c <HAL_ADC_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b84:	f001 f8ef 	bl	8001d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	@ 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2400020c 	.word	0x2400020c
 8000b94:	40022000 	.word	0x40022000
 8000b98:	10c00010 	.word	0x10c00010

08000b9c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c68 <MX_ADC2_Init+0xcc>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000bba:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bbc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000bc0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000bc2:	4b28      	ldr	r3, [pc, #160]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc8:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bce:	4b25      	ldr	r3, [pc, #148]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bda:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8000c12:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c18:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000c1a:	f004 fd65 	bl	80056e8 <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f001 f89f 	bl	8001d66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c28:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <MX_ADC2_Init+0xd0>)
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c34:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c38:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	@ (8000c64 <MX_ADC2_Init+0xc8>)
 8000c4c:	f005 f8ee 	bl	8005e2c <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8000c56:	f001 f886 	bl	8001d66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	24000270 	.word	0x24000270
 8000c68:	40022100 	.word	0x40022100
 8000c6c:	14f00020 	.word	0x14f00020

08000c70 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	@ 0x30
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a46      	ldr	r2, [pc, #280]	@ (8000da8 <HAL_ADC_MspInit+0x138>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d14e      	bne.n	8000d30 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c92:	4b46      	ldr	r3, [pc, #280]	@ (8000dac <HAL_ADC_MspInit+0x13c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	4a44      	ldr	r2, [pc, #272]	@ (8000dac <HAL_ADC_MspInit+0x13c>)
 8000c9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c9c:	4b43      	ldr	r3, [pc, #268]	@ (8000dac <HAL_ADC_MspInit+0x13c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d10e      	bne.n	8000cc2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ca4:	4b42      	ldr	r3, [pc, #264]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000ca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000caa:	4a41      	ldr	r2, [pc, #260]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cba:	f003 0320 	and.w	r3, r3, #32
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a39      	ldr	r2, [pc, #228]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b37      	ldr	r3, [pc, #220]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	4a32      	ldr	r2, [pc, #200]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4828      	ldr	r0, [pc, #160]	@ (8000db4 <HAL_ADC_MspInit+0x144>)
 8000d12:	f008 fef5 	bl	8009b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4823      	ldr	r0, [pc, #140]	@ (8000db8 <HAL_ADC_MspInit+0x148>)
 8000d2a:	f008 fee9 	bl	8009b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d2e:	e037      	b.n	8000da0 <HAL_ADC_MspInit+0x130>
  else if(adcHandle->Instance==ADC2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a21      	ldr	r2, [pc, #132]	@ (8000dbc <HAL_ADC_MspInit+0x14c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d132      	bne.n	8000da0 <HAL_ADC_MspInit+0x130>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <HAL_ADC_MspInit+0x13c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	4a1a      	ldr	r2, [pc, #104]	@ (8000dac <HAL_ADC_MspInit+0x13c>)
 8000d42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <HAL_ADC_MspInit+0x13c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d10e      	bne.n	8000d6a <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d4c:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d52:	4a17      	ldr	r2, [pc, #92]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d62:	f003 0320 	and.w	r3, r3, #32
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	4a0f      	ldr	r2, [pc, #60]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <HAL_ADC_MspInit+0x140>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4807      	ldr	r0, [pc, #28]	@ (8000db8 <HAL_ADC_MspInit+0x148>)
 8000d9c:	f008 feb0 	bl	8009b00 <HAL_GPIO_Init>
}
 8000da0:	bf00      	nop
 8000da2:	3730      	adds	r7, #48	@ 0x30
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40022000 	.word	0x40022000
 8000dac:	240002d4 	.word	0x240002d4
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58020800 	.word	0x58020800
 8000db8:	58020400 	.word	0x58020400
 8000dbc:	40022100 	.word	0x40022100

08000dc0 <ADS8688_Write_Command>:



// 写命令函数
void ADS8688_Write_Command(uint16_t com)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
    uint8_t wr_data[2] = {0x00, 0x00};
 8000dca:	2300      	movs	r3, #0
 8000dcc:	81bb      	strh	r3, [r7, #12]

    wr_data[0] = (uint8_t)(com >> 8);
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	733b      	strb	r3, [r7, #12]
    wr_data[1] = (uint8_t)(com & 0x00FF);
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	737b      	strb	r3, [r7, #13]

    ADS8688_CS_LOW();
 8000dde:	2200      	movs	r2, #0
 8000de0:	2110      	movs	r1, #16
 8000de2:	480a      	ldr	r0, [pc, #40]	@ (8000e0c <ADS8688_Write_Command+0x4c>)
 8000de4:	f009 f83c 	bl	8009e60 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi4, wr_data, 2, HAL_MAX_DELAY);
 8000de8:	f107 010c 	add.w	r1, r7, #12
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2202      	movs	r2, #2
 8000df2:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <ADS8688_Write_Command+0x50>)
 8000df4:	f00c fe90 	bl	800db18 <HAL_SPI_Transmit>
    ADS8688_CS_HIGH();
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <ADS8688_Write_Command+0x4c>)
 8000dfe:	f009 f82f 	bl	8009e60 <HAL_GPIO_WritePin>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	58021000 	.word	0x58021000
 8000e10:	24000a8c 	.word	0x24000a8c

08000e14 <ADS8688_Write_Program>:

// 写寄存器函数
void ADS8688_Write_Program(uint8_t addr, uint8_t data)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	4613      	mov	r3, r2
 8000e22:	71bb      	strb	r3, [r7, #6]
    uint8_t wr_data[2] = {0x00, 0x00};
 8000e24:	2300      	movs	r3, #0
 8000e26:	81bb      	strh	r3, [r7, #12]

    wr_data[0] = (addr << 1) | 0x01;
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	733b      	strb	r3, [r7, #12]
    wr_data[1] = data;
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	737b      	strb	r3, [r7, #13]

    ADS8688_CS_LOW();
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2110      	movs	r1, #16
 8000e42:	480a      	ldr	r0, [pc, #40]	@ (8000e6c <ADS8688_Write_Program+0x58>)
 8000e44:	f009 f80c 	bl	8009e60 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi4, wr_data, 2, HAL_MAX_DELAY);
 8000e48:	f107 010c 	add.w	r1, r7, #12
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e50:	2202      	movs	r2, #2
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <ADS8688_Write_Program+0x5c>)
 8000e54:	f00c fe60 	bl	800db18 <HAL_SPI_Transmit>
    ADS8688_CS_HIGH();
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <ADS8688_Write_Program+0x58>)
 8000e5e:	f008 ffff 	bl	8009e60 <HAL_GPIO_WritePin>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	58021000 	.word	0x58021000
 8000e70:	24000a8c 	.word	0x24000a8c

08000e74 <ADS8688_Init>:

// 初始化函数
void ADS8688_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    // GPIO配置已经在CubeMX中完成，这里只操作引脚

    ADS8688_DAISY_LOW();
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	4826      	ldr	r0, [pc, #152]	@ (8000f18 <ADS8688_Init+0xa4>)
 8000e7e:	f008 ffef 	bl	8009e60 <HAL_GPIO_WritePin>

    // 硬件复位
    ADS8688_RST_LOW();
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e88:	4824      	ldr	r0, [pc, #144]	@ (8000f1c <ADS8688_Init+0xa8>)
 8000e8a:	f008 ffe9 	bl	8009e60 <HAL_GPIO_WritePin>
    HAL_Delay(2);  // 2ms延时
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f004 f994 	bl	80051bc <HAL_Delay>
    ADS8688_RST_HIGH();
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e9a:	4820      	ldr	r0, [pc, #128]	@ (8000f1c <ADS8688_Init+0xa8>)
 8000e9c:	f008 ffe0 	bl	8009e60 <HAL_GPIO_WritePin>
    HAL_Delay(2);  // 2ms延时
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f004 f98b 	bl	80051bc <HAL_Delay>

    // 软件复位
    ADS8688_Write_Command(RST);
 8000ea6:	f44f 4005 	mov.w	r0, #34048	@ 0x8500
 8000eaa:	f7ff ff89 	bl	8000dc0 <ADS8688_Write_Command>
    HAL_Delay(2);  // 2ms延时
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f004 f984 	bl	80051bc <HAL_Delay>

    // 设置所有通道输入范围 ±5.12V
    ADS8688_Write_Program(CH0_INPUT_RANGE, VREF_B_125);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f7ff ffac 	bl	8000e14 <ADS8688_Write_Program>
    ADS8688_Write_Program(CH1_INPUT_RANGE, VREF_B_125);
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	2006      	movs	r0, #6
 8000ec0:	f7ff ffa8 	bl	8000e14 <ADS8688_Write_Program>
    ADS8688_Write_Program(CH2_INPUT_RANGE, VREF_B_125);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	2007      	movs	r0, #7
 8000ec8:	f7ff ffa4 	bl	8000e14 <ADS8688_Write_Program>
    ADS8688_Write_Program(CH3_INPUT_RANGE, VREF_B_125);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	2008      	movs	r0, #8
 8000ed0:	f7ff ffa0 	bl	8000e14 <ADS8688_Write_Program>
    ADS8688_Write_Program(CH4_INPUT_RANGE, VREF_B_125);
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2009      	movs	r0, #9
 8000ed8:	f7ff ff9c 	bl	8000e14 <ADS8688_Write_Program>
    ADS8688_Write_Program(CH5_INPUT_RANGE, VREF_B_125);
 8000edc:	2101      	movs	r1, #1
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f7ff ff98 	bl	8000e14 <ADS8688_Write_Program>
    ADS8688_Write_Program(CH6_INPUT_RANGE, VREF_B_125);
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	200b      	movs	r0, #11
 8000ee8:	f7ff ff94 	bl	8000e14 <ADS8688_Write_Program>
    ADS8688_Write_Program(CH7_INPUT_RANGE, VREF_B_125);
 8000eec:	2101      	movs	r1, #1
 8000eee:	200c      	movs	r0, #12
 8000ef0:	f7ff ff90 	bl	8000e14 <ADS8688_Write_Program>

    // 通道配置
    ADS8688_Write_Program(CH_PWR_DN, 0x00);      // 所有通道退出低功耗
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f7ff ff8c 	bl	8000e14 <ADS8688_Write_Program>
    ADS8688_Write_Program(AUTO_SEQ_EN, 0xFF);    // 使能自动扫描
 8000efc:	21ff      	movs	r1, #255	@ 0xff
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff ff88 	bl	8000e14 <ADS8688_Write_Program>

    // 选择通道0开始
    ADS8688_Write_Command(MAN_CH_0);
 8000f04:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000f08:	f7ff ff5a 	bl	8000dc0 <ADS8688_Write_Command>

    printf("ADS8688 Initialized with ±5.12V range\r\n");
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <ADS8688_Init+0xac>)
 8000f0e:	f011 f8bd 	bl	801208c <puts>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	58021000 	.word	0x58021000
 8000f1c:	58020800 	.word	0x58020800
 8000f20:	080159b8 	.word	0x080159b8

08000f24 <Get_MAN_CH_Data>:

// 读取通道数据
void Get_MAN_CH_Data(uint16_t ch, uint16_t *data)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	80fb      	strh	r3, [r7, #6]
    uint8_t Rxdata[4];
    uint8_t wr_data[4] = {0x00, 0x00, 0x00, 0x00};
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]

    ADS8688_Write_Command(ch);
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff42 	bl	8000dc0 <ADS8688_Write_Command>

    // 添加小延时
    for(volatile int i=0; i<10; i++);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e002      	b.n	8000f48 <Get_MAN_CH_Data+0x24>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3301      	adds	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b09      	cmp	r3, #9
 8000f4c:	ddf9      	ble.n	8000f42 <Get_MAN_CH_Data+0x1e>

    ADS8688_CS_LOW();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <Get_MAN_CH_Data+0x74>)
 8000f54:	f008 ff84 	bl	8009e60 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi4, (uint8_t *)wr_data, (uint8_t *)Rxdata, 4, HAL_MAX_DELAY);
 8000f58:	f107 0214 	add.w	r2, r7, #20
 8000f5c:	f107 0110 	add.w	r1, r7, #16
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2304      	movs	r3, #4
 8000f68:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <Get_MAN_CH_Data+0x78>)
 8000f6a:	f00c ffc3 	bl	800def4 <HAL_SPI_TransmitReceive>
    ADS8688_CS_HIGH();
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2110      	movs	r1, #16
 8000f72:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <Get_MAN_CH_Data+0x74>)
 8000f74:	f008 ff74 	bl	8009e60 <HAL_GPIO_WritePin>

    // 使用第3和第4字节作为ADC数据
    *data = ((uint16_t)Rxdata[2] << 8) | Rxdata[3];
 8000f78:	7dbb      	ldrb	r3, [r7, #22]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	801a      	strh	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	58021000 	.word	0x58021000
 8000f9c:	24000a8c 	.word	0x24000a8c

08000fa0 <ADS8688_ScanAllChannels>:

// 扫描并打印所有8个通道
void ADS8688_ScanAllChannels(void)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b094      	sub	sp, #80	@ 0x50
 8000fa4:	af02      	add	r7, sp, #8
    uint16_t channels[] = {
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <ADS8688_ScanAllChannels+0xb0>)
 8000fa8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        MAN_CH_0, MAN_CH_1, MAN_CH_2, MAN_CH_3,
        MAN_CH_4, MAN_CH_5, MAN_CH_6, MAN_CH_7
    };

    const char* channel_names[] = {
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <ADS8688_ScanAllChannels+0xb4>)
 8000fb4:	f107 0408 	add.w	r4, r7, #8
 8000fb8:	461d      	mov	r5, r3
 8000fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        "CH0", "CH1", "CH2", "CH3",
        "CH4", "CH5", "CH6", "CH7"
    };

    for (int i = 0; i < 8; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8000fca:	e02d      	b.n	8001028 <ADS8688_ScanAllChannels+0x88>
        uint16_t adc_data;
        double voltage_mV;

        Get_MAN_CH_Data(channels[i], &adc_data);
 8000fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	3348      	adds	r3, #72	@ 0x48
 8000fd2:	443b      	add	r3, r7
 8000fd4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8000fd8:	1dba      	adds	r2, r7, #6
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ffa1 	bl	8000f24 <Get_MAN_CH_Data>

        // 使用与Keil版本相同的电压计算公式
        voltage_mV = ((double)adc_data - 32768) * 10240.0 / 65536;
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fec:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001038 <ADS8688_ScanAllChannels+0x98>
 8000ff0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ff4:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001040 <ADS8688_ScanAllChannels+0xa0>
 8000ff8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ffc:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001048 <ADS8688_ScanAllChannels+0xa8>
 8001000:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001004:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

        // 与Keil版本相同的输出格式
        printf("%s: %10.4lfmV  D: %04X\r\n", channel_names[i], voltage_mV, adc_data);
 8001008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	3348      	adds	r3, #72	@ 0x48
 800100e:	443b      	add	r3, r7
 8001010:	f853 1c40 	ldr.w	r1, [r3, #-64]
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800101c:	480e      	ldr	r0, [pc, #56]	@ (8001058 <ADS8688_ScanAllChannels+0xb8>)
 800101e:	f010 ffc5 	bl	8011fac <iprintf>
    for (int i = 0; i < 8; i++) {
 8001022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001024:	3301      	adds	r3, #1
 8001026:	647b      	str	r3, [r7, #68]	@ 0x44
 8001028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800102a:	2b07      	cmp	r3, #7
 800102c:	ddce      	ble.n	8000fcc <ADS8688_ScanAllChannels+0x2c>
    }
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3748      	adds	r7, #72	@ 0x48
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}
 8001038:	00000000 	.word	0x00000000
 800103c:	40e00000 	.word	0x40e00000
 8001040:	00000000 	.word	0x00000000
 8001044:	40c40000 	.word	0x40c40000
 8001048:	00000000 	.word	0x00000000
 800104c:	40f00000 	.word	0x40f00000
 8001050:	080159fc 	.word	0x080159fc
 8001054:	08015a2c 	.word	0x08015a2c
 8001058:	080159e0 	.word	0x080159e0

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	4b39      	ldr	r3, [pc, #228]	@ (8001148 <MX_DMA_Init+0xec>)
 8001064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001068:	4a37      	ldr	r2, [pc, #220]	@ (8001148 <MX_DMA_Init+0xec>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001072:	4b35      	ldr	r3, [pc, #212]	@ (8001148 <MX_DMA_Init+0xec>)
 8001074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001080:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <MX_DMA_Init+0xec>)
 8001082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001086:	4a30      	ldr	r2, [pc, #192]	@ (8001148 <MX_DMA_Init+0xec>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001090:	4b2d      	ldr	r3, [pc, #180]	@ (8001148 <MX_DMA_Init+0xec>)
 8001092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	200b      	movs	r0, #11
 80010a4:	f005 fe43 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010a8:	200b      	movs	r0, #11
 80010aa:	f005 fe5a 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	200c      	movs	r0, #12
 80010b4:	f005 fe3b 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010b8:	200c      	movs	r0, #12
 80010ba:	f005 fe52 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200d      	movs	r0, #13
 80010c4:	f005 fe33 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010c8:	200d      	movs	r0, #13
 80010ca:	f005 fe4a 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200e      	movs	r0, #14
 80010d4:	f005 fe2b 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010d8:	200e      	movs	r0, #14
 80010da:	f005 fe42 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	200f      	movs	r0, #15
 80010e4:	f005 fe23 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f005 fe3a 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2010      	movs	r0, #16
 80010f4:	f005 fe1b 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010f8:	2010      	movs	r0, #16
 80010fa:	f005 fe32 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2011      	movs	r0, #17
 8001104:	f005 fe13 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001108:	2011      	movs	r0, #17
 800110a:	f005 fe2a 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	202f      	movs	r0, #47	@ 0x2f
 8001114:	f005 fe0b 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001118:	202f      	movs	r0, #47	@ 0x2f
 800111a:	f005 fe22 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2038      	movs	r0, #56	@ 0x38
 8001124:	f005 fe03 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001128:	2038      	movs	r0, #56	@ 0x38
 800112a:	f005 fe1a 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2039      	movs	r0, #57	@ 0x39
 8001134:	f005 fdfb 	bl	8006d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001138:	2039      	movs	r0, #57	@ 0x39
 800113a:	f005 fe12 	bl	8006d62 <HAL_NVIC_EnableIRQ>

}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	58024400 	.word	0x58024400

0800114c <Get_Endgas>:
#include "endgas.h"

void Get_Endgas(void){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    static const uint8_t cmd_Endgas[8] = {0x06, 0x03, 0x00, 0x01, 0x00, 0x08, 0x14, 0x7B};
    memset(rx_data4, 0, sizeof(rx_data4));
 8001150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001154:	2100      	movs	r1, #0
 8001156:	480c      	ldr	r0, [pc, #48]	@ (8001188 <Get_Endgas+0x3c>)
 8001158:	f011 f8d0 	bl	80122fc <memset>

    tx_ox_flag = 0;
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <Get_Endgas+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart4, (uint8_t*)cmd_Endgas, sizeof(cmd_Endgas));
 8001162:	2208      	movs	r2, #8
 8001164:	490a      	ldr	r1, [pc, #40]	@ (8001190 <Get_Endgas+0x44>)
 8001166:	480b      	ldr	r0, [pc, #44]	@ (8001194 <Get_Endgas+0x48>)
 8001168:	f00e f838 	bl	800f1dc <HAL_UART_Transmit_DMA>
    while (tx_ox_flag == 0);  // 等待发送完成再启动接收
 800116c:	bf00      	nop
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <Get_Endgas+0x40>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0fb      	beq.n	800116e <Get_Endgas+0x22>

    HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rx_data4, sizeof(rx_data4));
 8001176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800117a:	4903      	ldr	r1, [pc, #12]	@ (8001188 <Get_Endgas+0x3c>)
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <Get_Endgas+0x48>)
 800117e:	f00f ff77 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	24000460 	.word	0x24000460
 800118c:	24000660 	.word	0x24000660
 8001190:	08015f08 	.word	0x08015f08
 8001194:	24000d6c 	.word	0x24000d6c

08001198 <Read_Endgas>:
 void Read_Endgas(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0


     uint16_t len = RX_BUFFER_SIZE;
 800119e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a2:	81fb      	strh	r3, [r7, #14]
     uint8_t found = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	75fb      	strb	r3, [r7, #23]
     // 调试打印：查看当前接收缓冲区的实际数据
         printf("endgas dump: ");
 80011a8:	4865      	ldr	r0, [pc, #404]	@ (8001340 <Read_Endgas+0x1a8>)
 80011aa:	f010 feff 	bl	8011fac <iprintf>
         for (uint16_t k = 0; k < 40; k++) {  // 打印前40字节够用了
 80011ae:	2300      	movs	r3, #0
 80011b0:	82bb      	strh	r3, [r7, #20]
 80011b2:	e009      	b.n	80011c8 <Read_Endgas+0x30>
             printf("%02X ", rx_data4[k]);
 80011b4:	8abb      	ldrh	r3, [r7, #20]
 80011b6:	4a63      	ldr	r2, [pc, #396]	@ (8001344 <Read_Endgas+0x1ac>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4862      	ldr	r0, [pc, #392]	@ (8001348 <Read_Endgas+0x1b0>)
 80011be:	f010 fef5 	bl	8011fac <iprintf>
         for (uint16_t k = 0; k < 40; k++) {  // 打印前40字节够用了
 80011c2:	8abb      	ldrh	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	82bb      	strh	r3, [r7, #20]
 80011c8:	8abb      	ldrh	r3, [r7, #20]
 80011ca:	2b27      	cmp	r3, #39	@ 0x27
 80011cc:	d9f2      	bls.n	80011b4 <Read_Endgas+0x1c>
         }
         printf("\n");
 80011ce:	200a      	movs	r0, #10
 80011d0:	f010 fefe 	bl	8011fd0 <putchar>
     // 遍历缓冲区查找报文头 06 03 10 00 06
     for (uint16_t i = 0; i < len - 12; i++) { // 后续至少要有12字节数据
 80011d4:	2300      	movs	r3, #0
 80011d6:	827b      	strh	r3, [r7, #18]
 80011d8:	e0a1      	b.n	800131e <Read_Endgas+0x186>
         if (rx_data4[i] == 0x06 &&
 80011da:	8a7b      	ldrh	r3, [r7, #18]
 80011dc:	4a59      	ldr	r2, [pc, #356]	@ (8001344 <Read_Endgas+0x1ac>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	2b06      	cmp	r3, #6
 80011e2:	f040 8099 	bne.w	8001318 <Read_Endgas+0x180>
             rx_data4[i+1] == 0x03 &&
 80011e6:	8a7b      	ldrh	r3, [r7, #18]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a56      	ldr	r2, [pc, #344]	@ (8001344 <Read_Endgas+0x1ac>)
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
         if (rx_data4[i] == 0x06 &&
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	f040 8092 	bne.w	8001318 <Read_Endgas+0x180>
             rx_data4[i+2] == 0x10 &&
 80011f4:	8a7b      	ldrh	r3, [r7, #18]
 80011f6:	3302      	adds	r3, #2
 80011f8:	4a52      	ldr	r2, [pc, #328]	@ (8001344 <Read_Endgas+0x1ac>)
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
             rx_data4[i+1] == 0x03 &&
 80011fc:	2b10      	cmp	r3, #16
 80011fe:	f040 808b 	bne.w	8001318 <Read_Endgas+0x180>
             rx_data4[i+3] == 0x00 &&
 8001202:	8a7b      	ldrh	r3, [r7, #18]
 8001204:	3303      	adds	r3, #3
 8001206:	4a4f      	ldr	r2, [pc, #316]	@ (8001344 <Read_Endgas+0x1ac>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
             rx_data4[i+2] == 0x10 &&
 800120a:	2b00      	cmp	r3, #0
 800120c:	f040 8084 	bne.w	8001318 <Read_Endgas+0x180>
             rx_data4[i+4] == 0x06)
 8001210:	8a7b      	ldrh	r3, [r7, #18]
 8001212:	3304      	adds	r3, #4
 8001214:	4a4b      	ldr	r2, [pc, #300]	@ (8001344 <Read_Endgas+0x1ac>)
 8001216:	5cd3      	ldrb	r3, [r2, r3]
             rx_data4[i+3] == 0x00 &&
 8001218:	2b06      	cmp	r3, #6
 800121a:	d17d      	bne.n	8001318 <Read_Endgas+0x180>
         {
             found = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	75fb      	strb	r3, [r7, #23]
             printf("找到尾气报文头，位置: %d\n", i);
 8001220:	8a7b      	ldrh	r3, [r7, #18]
 8001222:	4619      	mov	r1, r3
 8001224:	4849      	ldr	r0, [pc, #292]	@ (800134c <Read_Endgas+0x1b4>)
 8001226:	f010 fec1 	bl	8011fac <iprintf>

             // 打印报文头后的完整报文（12字节数据 + CRC）
             printf("尾气原始报文: ");
 800122a:	4849      	ldr	r0, [pc, #292]	@ (8001350 <Read_Endgas+0x1b8>)
 800122c:	f010 febe 	bl	8011fac <iprintf>
             for (uint16_t j = i; j < i + 13; j++) {
 8001230:	8a7b      	ldrh	r3, [r7, #18]
 8001232:	823b      	strh	r3, [r7, #16]
 8001234:	e009      	b.n	800124a <Read_Endgas+0xb2>
                 printf("%02X ", rx_data4[j]);
 8001236:	8a3b      	ldrh	r3, [r7, #16]
 8001238:	4a42      	ldr	r2, [pc, #264]	@ (8001344 <Read_Endgas+0x1ac>)
 800123a:	5cd3      	ldrb	r3, [r2, r3]
 800123c:	4619      	mov	r1, r3
 800123e:	4842      	ldr	r0, [pc, #264]	@ (8001348 <Read_Endgas+0x1b0>)
 8001240:	f010 feb4 	bl	8011fac <iprintf>
             for (uint16_t j = i; j < i + 13; j++) {
 8001244:	8a3b      	ldrh	r3, [r7, #16]
 8001246:	3301      	adds	r3, #1
 8001248:	823b      	strh	r3, [r7, #16]
 800124a:	8a7b      	ldrh	r3, [r7, #18]
 800124c:	f103 020c 	add.w	r2, r3, #12
 8001250:	8a3b      	ldrh	r3, [r7, #16]
 8001252:	429a      	cmp	r2, r3
 8001254:	daef      	bge.n	8001236 <Read_Endgas+0x9e>
             }
             printf("\n");
 8001256:	200a      	movs	r0, #10
 8001258:	f010 feba 	bl	8011fd0 <putchar>

             // 只解析原本的三个数据
             uint16_t temp_raw = ((uint16_t)rx_data4[i+5] << 8) | rx_data4[i+6];
 800125c:	8a7b      	ldrh	r3, [r7, #18]
 800125e:	3305      	adds	r3, #5
 8001260:	4a38      	ldr	r2, [pc, #224]	@ (8001344 <Read_Endgas+0x1ac>)
 8001262:	5cd3      	ldrb	r3, [r2, r3]
 8001264:	b21b      	sxth	r3, r3
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	8a7b      	ldrh	r3, [r7, #18]
 800126c:	3306      	adds	r3, #6
 800126e:	4935      	ldr	r1, [pc, #212]	@ (8001344 <Read_Endgas+0x1ac>)
 8001270:	5ccb      	ldrb	r3, [r1, r3]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21b      	sxth	r3, r3
 8001278:	81bb      	strh	r3, [r7, #12]
             uint16_t co2_raw  = ((uint16_t)rx_data4[i+9] << 8) | rx_data4[i+10];
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	3309      	adds	r3, #9
 800127e:	4a31      	ldr	r2, [pc, #196]	@ (8001344 <Read_Endgas+0x1ac>)
 8001280:	5cd3      	ldrb	r3, [r2, r3]
 8001282:	b21b      	sxth	r3, r3
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	8a7b      	ldrh	r3, [r7, #18]
 800128a:	330a      	adds	r3, #10
 800128c:	492d      	ldr	r1, [pc, #180]	@ (8001344 <Read_Endgas+0x1ac>)
 800128e:	5ccb      	ldrb	r3, [r1, r3]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	817b      	strh	r3, [r7, #10]
             uint16_t o2_raw   = ((uint16_t)rx_data4[i+11] << 8) | rx_data4[i+12];
 8001298:	8a7b      	ldrh	r3, [r7, #18]
 800129a:	330b      	adds	r3, #11
 800129c:	4a29      	ldr	r2, [pc, #164]	@ (8001344 <Read_Endgas+0x1ac>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	8a7b      	ldrh	r3, [r7, #18]
 80012a8:	330c      	adds	r3, #12
 80012aa:	4926      	ldr	r1, [pc, #152]	@ (8001344 <Read_Endgas+0x1ac>)
 80012ac:	5ccb      	ldrb	r3, [r1, r3]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	813b      	strh	r3, [r7, #8]

             float temp_celsius = (float)temp_raw / 10.0f;
 80012b6:	89bb      	ldrh	r3, [r7, #12]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012c0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c8:	edc7 7a01 	vstr	s15, [r7, #4]
             float o2_percent   = (float)o2_raw / 100.0f;
 80012cc:	893b      	ldrh	r3, [r7, #8]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001354 <Read_Endgas+0x1bc>
 80012da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012de:	edc7 7a00 	vstr	s15, [r7]

             printf("解析后的尾气数据:\n");
 80012e2:	481d      	ldr	r0, [pc, #116]	@ (8001358 <Read_Endgas+0x1c0>)
 80012e4:	f010 fed2 	bl	801208c <puts>
             printf("gas_temp: %.1f °C\n", temp_celsius);
 80012e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f0:	ec53 2b17 	vmov	r2, r3, d7
 80012f4:	4819      	ldr	r0, [pc, #100]	@ (800135c <Read_Endgas+0x1c4>)
 80012f6:	f010 fe59 	bl	8011fac <iprintf>
             printf("gas_CO₂: %d ppm\n", co2_raw);
 80012fa:	897b      	ldrh	r3, [r7, #10]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4818      	ldr	r0, [pc, #96]	@ (8001360 <Read_Endgas+0x1c8>)
 8001300:	f010 fe54 	bl	8011fac <iprintf>
             printf("gas_O₂ : %.2f %%\n", o2_percent);
 8001304:	edd7 7a00 	vldr	s15, [r7]
 8001308:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800130c:	ec53 2b17 	vmov	r2, r3, d7
 8001310:	4814      	ldr	r0, [pc, #80]	@ (8001364 <Read_Endgas+0x1cc>)
 8001312:	f010 fe4b 	bl	8011fac <iprintf>

             break; // 找到第一个报文后退出
 8001316:	e008      	b.n	800132a <Read_Endgas+0x192>
     for (uint16_t i = 0; i < len - 12; i++) { // 后续至少要有12字节数据
 8001318:	8a7b      	ldrh	r3, [r7, #18]
 800131a:	3301      	adds	r3, #1
 800131c:	827b      	strh	r3, [r7, #18]
 800131e:	8a7a      	ldrh	r2, [r7, #18]
 8001320:	89fb      	ldrh	r3, [r7, #14]
 8001322:	3b0c      	subs	r3, #12
 8001324:	429a      	cmp	r2, r3
 8001326:	f6ff af58 	blt.w	80011da <Read_Endgas+0x42>
         }
     }

     if (!found) {
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <Read_Endgas+0x19e>
         printf("未找到有效尾气报文头\n");
 8001330:	480d      	ldr	r0, [pc, #52]	@ (8001368 <Read_Endgas+0x1d0>)
 8001332:	f010 feab 	bl	801208c <puts>
     }
 }
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08015a4c 	.word	0x08015a4c
 8001344:	24000460 	.word	0x24000460
 8001348:	08015a5c 	.word	0x08015a5c
 800134c:	08015a64 	.word	0x08015a64
 8001350:	08015a88 	.word	0x08015a88
 8001354:	42c80000 	.word	0x42c80000
 8001358:	08015aa0 	.word	0x08015aa0
 800135c:	08015abc 	.word	0x08015abc
 8001360:	08015ad0 	.word	0x08015ad0
 8001364:	08015ae4 	.word	0x08015ae4
 8001368:	08015af8 	.word	0x08015af8

0800136c <Endgas_Task>:

 void Endgas_Task(void){
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
     Get_Endgas();
 8001372:	f7ff feeb 	bl	800114c <Get_Endgas>

     // 等待数据到达（最多200ms）
     uint32_t start = HAL_GetTick();
 8001376:	f003 ff15 	bl	80051a4 <HAL_GetTick>
 800137a:	6078      	str	r0, [r7, #4]
     while (!rx_ox_flag && (HAL_GetTick() - start < 200)) {}
 800137c:	bf00      	nop
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <Endgas_Task+0x4c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <Endgas_Task+0x28>
 8001386:	f003 ff0d 	bl	80051a4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2bc7      	cmp	r3, #199	@ 0xc7
 8001392:	d9f4      	bls.n	800137e <Endgas_Task+0x12>

     if (rx_ox_flag) {
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <Endgas_Task+0x4c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <Endgas_Task+0x3c>
         Read_Endgas();
 800139c:	f7ff fefc 	bl	8001198 <Read_Endgas>
         rx_ox_flag = 0;
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <Endgas_Task+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
     } else {
         printf("尾气接收超时\n");
     }
 }
 80013a6:	e002      	b.n	80013ae <Endgas_Task+0x42>
         printf("尾气接收超时\n");
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <Endgas_Task+0x50>)
 80013aa:	f010 fe6f 	bl	801208c <puts>
 }
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24000661 	.word	0x24000661
 80013bc:	08015b18 	.word	0x08015b18

080013c0 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001508 <MX_GPIO_Init+0x148>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001508 <MX_GPIO_Init+0x148>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e6:	4b48      	ldr	r3, [pc, #288]	@ (8001508 <MX_GPIO_Init+0x148>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	4b44      	ldr	r3, [pc, #272]	@ (8001508 <MX_GPIO_Init+0x148>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	4a43      	ldr	r2, [pc, #268]	@ (8001508 <MX_GPIO_Init+0x148>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001404:	4b40      	ldr	r3, [pc, #256]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	4b3d      	ldr	r3, [pc, #244]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	4a3b      	ldr	r2, [pc, #236]	@ (8001508 <MX_GPIO_Init+0x148>)
 800141a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001422:	4b39      	ldr	r3, [pc, #228]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	4b35      	ldr	r3, [pc, #212]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	4a34      	ldr	r2, [pc, #208]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001440:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144e:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	4a2c      	ldr	r2, [pc, #176]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <MX_GPIO_Init+0x148>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	4a25      	ldr	r2, [pc, #148]	@ (8001508 <MX_GPIO_Init+0x148>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <MX_GPIO_Init+0x148>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2118      	movs	r1, #24
 800148e:	481f      	ldr	r0, [pc, #124]	@ (800150c <MX_GPIO_Init+0x14c>)
 8001490:	f008 fce6 	bl	8009e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800149a:	481d      	ldr	r0, [pc, #116]	@ (8001510 <MX_GPIO_Init+0x150>)
 800149c:	f008 fce0 	bl	8009e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2101      	movs	r1, #1
 80014a4:	481b      	ldr	r0, [pc, #108]	@ (8001514 <MX_GPIO_Init+0x154>)
 80014a6:	f008 fcdb 	bl	8009e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80014aa:	2318      	movs	r3, #24
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4812      	ldr	r0, [pc, #72]	@ (800150c <MX_GPIO_Init+0x14c>)
 80014c2:	f008 fb1d 	bl	8009b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	480c      	ldr	r0, [pc, #48]	@ (8001510 <MX_GPIO_Init+0x150>)
 80014e0:	f008 fb0e 	bl	8009b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	@ (8001514 <MX_GPIO_Init+0x154>)
 80014fc:	f008 fb00 	bl	8009b00 <HAL_GPIO_Init>

}
 8001500:	bf00      	nop
 8001502:	3730      	adds	r7, #48	@ 0x30
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	58024400 	.word	0x58024400
 800150c:	58021000 	.word	0x58021000
 8001510:	58020800 	.word	0x58020800
 8001514:	58020400 	.word	0x58020400

08001518 <_write>:
//_write 非阻塞 DMA 重定向
#define UART_TX_BUFFER_SIZE 256
uint8_t uart_tx_buffer[UART_TX_BUFFER_SIZE];
volatile uint8_t tx_busy = 0;

int _write(int file, char *ptr, int len) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
    if(len > UART_TX_BUFFER_SIZE) len = UART_TX_BUFFER_SIZE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800152a:	dd02      	ble.n	8001532 <_write+0x1a>
 800152c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001530:	607b      	str	r3, [r7, #4]

    // 等待前一次发送完成（带超时）
    uint32_t start = HAL_GetTick();
 8001532:	f003 fe37 	bl	80051a4 <HAL_GetTick>
 8001536:	6178      	str	r0, [r7, #20]
    while(tx_busy && (HAL_GetTick() - start < 100)) {
 8001538:	bf00      	nop
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <_write+0x74>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <_write+0x3a>
 8001544:	f003 fe2e 	bl	80051a4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b63      	cmp	r3, #99	@ 0x63
 8001550:	d9f3      	bls.n	800153a <_write+0x22>
        // 等待或执行其他任务
    }

    if(tx_busy) {
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <_write+0x74>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <_write+0x48>
        return 0; // 超时仍未完成，放弃发送
 800155c:	2300      	movs	r3, #0
 800155e:	e010      	b.n	8001582 <_write+0x6a>
    }

    memcpy(uart_tx_buffer, ptr, len);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	461a      	mov	r2, r3
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	480a      	ldr	r0, [pc, #40]	@ (8001590 <_write+0x78>)
 8001568:	f010 ff47 	bl	80123fa <memcpy>
    tx_busy = 1;
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <_write+0x74>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart1, uart_tx_buffer, len);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	b29b      	uxth	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	4905      	ldr	r1, [pc, #20]	@ (8001590 <_write+0x78>)
 800157a:	4806      	ldr	r0, [pc, #24]	@ (8001594 <_write+0x7c>)
 800157c:	f00d fe2e 	bl	800f1dc <HAL_UART_Transmit_DMA>

    return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	240003d8 	.word	0x240003d8
 8001590:	240002d8 	.word	0x240002d8
 8001594:	24000e94 	.word	0x24000e94

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800159c:	f000 fbb7 	bl	8001d0e <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a0:	f003 fd7a 	bl	8005098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a4:	f000 fb10 	bl	8001bc8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015a8:	f000 fb82 	bl	8001cb0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f7ff ff08 	bl	80013c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015b0:	f7ff fd54 	bl	800105c <MX_DMA_Init>
  MX_USART6_UART_Init();
 80015b4:	f003 f8b4 	bl	8004720 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 80015b8:	f002 fe80 	bl	80042bc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80015bc:	f003 f818 	bl	80045f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80015c0:	f003 f862 	bl	8004688 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80015c4:	f002 ff7c 	bl	80044c0 <MX_UART4_Init>
  MX_ADC2_Init();
 80015c8:	f7ff fae8 	bl	8000b9c <MX_ADC2_Init>
  MX_UART7_Init();
 80015cc:	f002 ffc4 	bl	8004558 <MX_UART7_Init>
  MX_ADC1_Init();
 80015d0:	f7ff fa68 	bl	8000aa4 <MX_ADC1_Init>
  MX_SPI4_Init();
 80015d4:	f002 f830 	bl	8003638 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  ADS8688_Init();
 80015d8:	f7ff fc4c 	bl	8000e74 <ADS8688_Init>
  printf("ADS8688 Initialized Successfully!\r\n");
 80015dc:	488e      	ldr	r0, [pc, #568]	@ (8001818 <main+0x280>)
 80015de:	f010 fd55 	bl	801208c <puts>
  HAL_Delay(50);
 80015e2:	2032      	movs	r0, #50	@ 0x32
 80015e4:	f003 fdea 	bl	80051bc <HAL_Delay>
  Relay_Init();
 80015e8:	f001 ffd0 	bl	800358c <Relay_Init>
  HAL_Delay(50);
 80015ec:	2032      	movs	r0, #50	@ 0x32
 80015ee:	f003 fde5 	bl	80051bc <HAL_Delay>
  static uint32_t last_Endgas_time = 0;//尾气任务计时
  static uint32_t last_ph_time = 0;//ph任务计时
  static uint32_t last_temp_time = 0;  // 温控任务计时器
  static uint32_t last_ox_time = 0;// 溶氧任务计时器
  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rx_data7, sizeof(rx_data7));
 80015f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f6:	4989      	ldr	r1, [pc, #548]	@ (800181c <main+0x284>)
 80015f8:	4889      	ldr	r0, [pc, #548]	@ (8001820 <main+0x288>)
 80015fa:	f00f fd39 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart7.hdmarx, DMA_IT_HT);
 80015fe:	4b88      	ldr	r3, [pc, #544]	@ (8001820 <main+0x288>)
 8001600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a87      	ldr	r2, [pc, #540]	@ (8001824 <main+0x28c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d068      	beq.n	80016de <main+0x146>
 800160c:	4b84      	ldr	r3, [pc, #528]	@ (8001820 <main+0x288>)
 800160e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a84      	ldr	r2, [pc, #528]	@ (8001828 <main+0x290>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d061      	beq.n	80016de <main+0x146>
 800161a:	4b81      	ldr	r3, [pc, #516]	@ (8001820 <main+0x288>)
 800161c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a82      	ldr	r2, [pc, #520]	@ (800182c <main+0x294>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d05a      	beq.n	80016de <main+0x146>
 8001628:	4b7d      	ldr	r3, [pc, #500]	@ (8001820 <main+0x288>)
 800162a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a7f      	ldr	r2, [pc, #508]	@ (8001830 <main+0x298>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d053      	beq.n	80016de <main+0x146>
 8001636:	4b7a      	ldr	r3, [pc, #488]	@ (8001820 <main+0x288>)
 8001638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7d      	ldr	r2, [pc, #500]	@ (8001834 <main+0x29c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d04c      	beq.n	80016de <main+0x146>
 8001644:	4b76      	ldr	r3, [pc, #472]	@ (8001820 <main+0x288>)
 8001646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a7a      	ldr	r2, [pc, #488]	@ (8001838 <main+0x2a0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d045      	beq.n	80016de <main+0x146>
 8001652:	4b73      	ldr	r3, [pc, #460]	@ (8001820 <main+0x288>)
 8001654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a78      	ldr	r2, [pc, #480]	@ (800183c <main+0x2a4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d03e      	beq.n	80016de <main+0x146>
 8001660:	4b6f      	ldr	r3, [pc, #444]	@ (8001820 <main+0x288>)
 8001662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a75      	ldr	r2, [pc, #468]	@ (8001840 <main+0x2a8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d037      	beq.n	80016de <main+0x146>
 800166e:	4b6c      	ldr	r3, [pc, #432]	@ (8001820 <main+0x288>)
 8001670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a73      	ldr	r2, [pc, #460]	@ (8001844 <main+0x2ac>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d030      	beq.n	80016de <main+0x146>
 800167c:	4b68      	ldr	r3, [pc, #416]	@ (8001820 <main+0x288>)
 800167e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a70      	ldr	r2, [pc, #448]	@ (8001848 <main+0x2b0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d029      	beq.n	80016de <main+0x146>
 800168a:	4b65      	ldr	r3, [pc, #404]	@ (8001820 <main+0x288>)
 800168c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6e      	ldr	r2, [pc, #440]	@ (800184c <main+0x2b4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <main+0x146>
 8001698:	4b61      	ldr	r3, [pc, #388]	@ (8001820 <main+0x288>)
 800169a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6b      	ldr	r2, [pc, #428]	@ (8001850 <main+0x2b8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01b      	beq.n	80016de <main+0x146>
 80016a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001820 <main+0x288>)
 80016a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a69      	ldr	r2, [pc, #420]	@ (8001854 <main+0x2bc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d014      	beq.n	80016de <main+0x146>
 80016b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001820 <main+0x288>)
 80016b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a66      	ldr	r2, [pc, #408]	@ (8001858 <main+0x2c0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <main+0x146>
 80016c2:	4b57      	ldr	r3, [pc, #348]	@ (8001820 <main+0x288>)
 80016c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a64      	ldr	r2, [pc, #400]	@ (800185c <main+0x2c4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d006      	beq.n	80016de <main+0x146>
 80016d0:	4b53      	ldr	r3, [pc, #332]	@ (8001820 <main+0x288>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a61      	ldr	r2, [pc, #388]	@ (8001860 <main+0x2c8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d10c      	bne.n	80016f8 <main+0x160>
 80016de:	4b50      	ldr	r3, [pc, #320]	@ (8001820 <main+0x288>)
 80016e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001820 <main+0x288>)
 80016ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0208 	bic.w	r2, r2, #8
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e00b      	b.n	8001710 <main+0x178>
 80016f8:	4b49      	ldr	r3, [pc, #292]	@ (8001820 <main+0x288>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b47      	ldr	r3, [pc, #284]	@ (8001820 <main+0x288>)
 8001704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0204 	bic.w	r2, r2, #4
 800170e:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rx_data3, sizeof(rx_data3));
 8001710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001714:	4953      	ldr	r1, [pc, #332]	@ (8001864 <main+0x2cc>)
 8001716:	4854      	ldr	r0, [pc, #336]	@ (8001868 <main+0x2d0>)
 8001718:	f00f fcaa 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 800171c:	4b52      	ldr	r3, [pc, #328]	@ (8001868 <main+0x2d0>)
 800171e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a3f      	ldr	r2, [pc, #252]	@ (8001824 <main+0x28c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d068      	beq.n	80017fc <main+0x264>
 800172a:	4b4f      	ldr	r3, [pc, #316]	@ (8001868 <main+0x2d0>)
 800172c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a3d      	ldr	r2, [pc, #244]	@ (8001828 <main+0x290>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d061      	beq.n	80017fc <main+0x264>
 8001738:	4b4b      	ldr	r3, [pc, #300]	@ (8001868 <main+0x2d0>)
 800173a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a3a      	ldr	r2, [pc, #232]	@ (800182c <main+0x294>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d05a      	beq.n	80017fc <main+0x264>
 8001746:	4b48      	ldr	r3, [pc, #288]	@ (8001868 <main+0x2d0>)
 8001748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a38      	ldr	r2, [pc, #224]	@ (8001830 <main+0x298>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d053      	beq.n	80017fc <main+0x264>
 8001754:	4b44      	ldr	r3, [pc, #272]	@ (8001868 <main+0x2d0>)
 8001756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a35      	ldr	r2, [pc, #212]	@ (8001834 <main+0x29c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d04c      	beq.n	80017fc <main+0x264>
 8001762:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <main+0x2d0>)
 8001764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a33      	ldr	r2, [pc, #204]	@ (8001838 <main+0x2a0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d045      	beq.n	80017fc <main+0x264>
 8001770:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <main+0x2d0>)
 8001772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a30      	ldr	r2, [pc, #192]	@ (800183c <main+0x2a4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d03e      	beq.n	80017fc <main+0x264>
 800177e:	4b3a      	ldr	r3, [pc, #232]	@ (8001868 <main+0x2d0>)
 8001780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2e      	ldr	r2, [pc, #184]	@ (8001840 <main+0x2a8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d037      	beq.n	80017fc <main+0x264>
 800178c:	4b36      	ldr	r3, [pc, #216]	@ (8001868 <main+0x2d0>)
 800178e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2b      	ldr	r2, [pc, #172]	@ (8001844 <main+0x2ac>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d030      	beq.n	80017fc <main+0x264>
 800179a:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <main+0x2d0>)
 800179c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <main+0x2b0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d029      	beq.n	80017fc <main+0x264>
 80017a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <main+0x2d0>)
 80017aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a26      	ldr	r2, [pc, #152]	@ (800184c <main+0x2b4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d022      	beq.n	80017fc <main+0x264>
 80017b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <main+0x2d0>)
 80017b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a24      	ldr	r2, [pc, #144]	@ (8001850 <main+0x2b8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d01b      	beq.n	80017fc <main+0x264>
 80017c4:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <main+0x2d0>)
 80017c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a21      	ldr	r2, [pc, #132]	@ (8001854 <main+0x2bc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d014      	beq.n	80017fc <main+0x264>
 80017d2:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <main+0x2d0>)
 80017d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1f      	ldr	r2, [pc, #124]	@ (8001858 <main+0x2c0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00d      	beq.n	80017fc <main+0x264>
 80017e0:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <main+0x2d0>)
 80017e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <main+0x2c4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d006      	beq.n	80017fc <main+0x264>
 80017ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <main+0x2d0>)
 80017f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001860 <main+0x2c8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d137      	bne.n	800186c <main+0x2d4>
 80017fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <main+0x2d0>)
 80017fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <main+0x2d0>)
 8001808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0208 	bic.w	r2, r2, #8
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e036      	b.n	8001884 <main+0x2ec>
 8001816:	bf00      	nop
 8001818:	08015b2c 	.word	0x08015b2c
 800181c:	24000b14 	.word	0x24000b14
 8001820:	24000e00 	.word	0x24000e00
 8001824:	40020010 	.word	0x40020010
 8001828:	40020028 	.word	0x40020028
 800182c:	40020040 	.word	0x40020040
 8001830:	40020058 	.word	0x40020058
 8001834:	40020070 	.word	0x40020070
 8001838:	40020088 	.word	0x40020088
 800183c:	400200a0 	.word	0x400200a0
 8001840:	400200b8 	.word	0x400200b8
 8001844:	40020410 	.word	0x40020410
 8001848:	40020428 	.word	0x40020428
 800184c:	40020440 	.word	0x40020440
 8001850:	40020458 	.word	0x40020458
 8001854:	40020470 	.word	0x40020470
 8001858:	40020488 	.word	0x40020488
 800185c:	400204a0 	.word	0x400204a0
 8001860:	400204b8 	.word	0x400204b8
 8001864:	24000674 	.word	0x24000674
 8001868:	24000f28 	.word	0x24000f28
 800186c:	4b8e      	ldr	r3, [pc, #568]	@ (8001aa8 <main+0x510>)
 800186e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa8 <main+0x510>)
 8001878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0204 	bic.w	r2, r2, #4
 8001882:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_data6, sizeof(rx_data6));
 8001884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001888:	4988      	ldr	r1, [pc, #544]	@ (8001aac <main+0x514>)
 800188a:	4889      	ldr	r0, [pc, #548]	@ (8001ab0 <main+0x518>)
 800188c:	f00f fbf0 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8001890:	4b87      	ldr	r3, [pc, #540]	@ (8001ab0 <main+0x518>)
 8001892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a86      	ldr	r2, [pc, #536]	@ (8001ab4 <main+0x51c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d068      	beq.n	8001970 <main+0x3d8>
 800189e:	4b84      	ldr	r3, [pc, #528]	@ (8001ab0 <main+0x518>)
 80018a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a84      	ldr	r2, [pc, #528]	@ (8001ab8 <main+0x520>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d061      	beq.n	8001970 <main+0x3d8>
 80018ac:	4b80      	ldr	r3, [pc, #512]	@ (8001ab0 <main+0x518>)
 80018ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a81      	ldr	r2, [pc, #516]	@ (8001abc <main+0x524>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d05a      	beq.n	8001970 <main+0x3d8>
 80018ba:	4b7d      	ldr	r3, [pc, #500]	@ (8001ab0 <main+0x518>)
 80018bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7f      	ldr	r2, [pc, #508]	@ (8001ac0 <main+0x528>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d053      	beq.n	8001970 <main+0x3d8>
 80018c8:	4b79      	ldr	r3, [pc, #484]	@ (8001ab0 <main+0x518>)
 80018ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ac4 <main+0x52c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d04c      	beq.n	8001970 <main+0x3d8>
 80018d6:	4b76      	ldr	r3, [pc, #472]	@ (8001ab0 <main+0x518>)
 80018d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7a      	ldr	r2, [pc, #488]	@ (8001ac8 <main+0x530>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d045      	beq.n	8001970 <main+0x3d8>
 80018e4:	4b72      	ldr	r3, [pc, #456]	@ (8001ab0 <main+0x518>)
 80018e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a77      	ldr	r2, [pc, #476]	@ (8001acc <main+0x534>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d03e      	beq.n	8001970 <main+0x3d8>
 80018f2:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab0 <main+0x518>)
 80018f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a75      	ldr	r2, [pc, #468]	@ (8001ad0 <main+0x538>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d037      	beq.n	8001970 <main+0x3d8>
 8001900:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab0 <main+0x518>)
 8001902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a72      	ldr	r2, [pc, #456]	@ (8001ad4 <main+0x53c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d030      	beq.n	8001970 <main+0x3d8>
 800190e:	4b68      	ldr	r3, [pc, #416]	@ (8001ab0 <main+0x518>)
 8001910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a70      	ldr	r2, [pc, #448]	@ (8001ad8 <main+0x540>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d029      	beq.n	8001970 <main+0x3d8>
 800191c:	4b64      	ldr	r3, [pc, #400]	@ (8001ab0 <main+0x518>)
 800191e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6d      	ldr	r2, [pc, #436]	@ (8001adc <main+0x544>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d022      	beq.n	8001970 <main+0x3d8>
 800192a:	4b61      	ldr	r3, [pc, #388]	@ (8001ab0 <main+0x518>)
 800192c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6b      	ldr	r2, [pc, #428]	@ (8001ae0 <main+0x548>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d01b      	beq.n	8001970 <main+0x3d8>
 8001938:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab0 <main+0x518>)
 800193a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a68      	ldr	r2, [pc, #416]	@ (8001ae4 <main+0x54c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d014      	beq.n	8001970 <main+0x3d8>
 8001946:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab0 <main+0x518>)
 8001948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a66      	ldr	r2, [pc, #408]	@ (8001ae8 <main+0x550>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00d      	beq.n	8001970 <main+0x3d8>
 8001954:	4b56      	ldr	r3, [pc, #344]	@ (8001ab0 <main+0x518>)
 8001956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a63      	ldr	r2, [pc, #396]	@ (8001aec <main+0x554>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d006      	beq.n	8001970 <main+0x3d8>
 8001962:	4b53      	ldr	r3, [pc, #332]	@ (8001ab0 <main+0x518>)
 8001964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a61      	ldr	r2, [pc, #388]	@ (8001af0 <main+0x558>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d10c      	bne.n	800198a <main+0x3f2>
 8001970:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab0 <main+0x518>)
 8001972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab0 <main+0x518>)
 800197c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0208 	bic.w	r2, r2, #8
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e00b      	b.n	80019a2 <main+0x40a>
 800198a:	4b49      	ldr	r3, [pc, #292]	@ (8001ab0 <main+0x518>)
 800198c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b46      	ldr	r3, [pc, #280]	@ (8001ab0 <main+0x518>)
 8001996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0204 	bic.w	r2, r2, #4
 80019a0:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rx_data4, sizeof(rx_data4));
 80019a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a6:	4953      	ldr	r1, [pc, #332]	@ (8001af4 <main+0x55c>)
 80019a8:	4853      	ldr	r0, [pc, #332]	@ (8001af8 <main+0x560>)
 80019aa:	f00f fb61 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(huart4.hdmarx, DMA_IT_HT);
 80019ae:	4b52      	ldr	r3, [pc, #328]	@ (8001af8 <main+0x560>)
 80019b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ab4 <main+0x51c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d068      	beq.n	8001a8e <main+0x4f6>
 80019bc:	4b4e      	ldr	r3, [pc, #312]	@ (8001af8 <main+0x560>)
 80019be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ab8 <main+0x520>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d061      	beq.n	8001a8e <main+0x4f6>
 80019ca:	4b4b      	ldr	r3, [pc, #300]	@ (8001af8 <main+0x560>)
 80019cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a3a      	ldr	r2, [pc, #232]	@ (8001abc <main+0x524>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d05a      	beq.n	8001a8e <main+0x4f6>
 80019d8:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <main+0x560>)
 80019da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a37      	ldr	r2, [pc, #220]	@ (8001ac0 <main+0x528>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d053      	beq.n	8001a8e <main+0x4f6>
 80019e6:	4b44      	ldr	r3, [pc, #272]	@ (8001af8 <main+0x560>)
 80019e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a35      	ldr	r2, [pc, #212]	@ (8001ac4 <main+0x52c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04c      	beq.n	8001a8e <main+0x4f6>
 80019f4:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <main+0x560>)
 80019f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a32      	ldr	r2, [pc, #200]	@ (8001ac8 <main+0x530>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d045      	beq.n	8001a8e <main+0x4f6>
 8001a02:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <main+0x560>)
 8001a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a30      	ldr	r2, [pc, #192]	@ (8001acc <main+0x534>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d03e      	beq.n	8001a8e <main+0x4f6>
 8001a10:	4b39      	ldr	r3, [pc, #228]	@ (8001af8 <main+0x560>)
 8001a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad0 <main+0x538>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d037      	beq.n	8001a8e <main+0x4f6>
 8001a1e:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <main+0x560>)
 8001a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad4 <main+0x53c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d030      	beq.n	8001a8e <main+0x4f6>
 8001a2c:	4b32      	ldr	r3, [pc, #200]	@ (8001af8 <main+0x560>)
 8001a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a28      	ldr	r2, [pc, #160]	@ (8001ad8 <main+0x540>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d029      	beq.n	8001a8e <main+0x4f6>
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <main+0x560>)
 8001a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a26      	ldr	r2, [pc, #152]	@ (8001adc <main+0x544>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d022      	beq.n	8001a8e <main+0x4f6>
 8001a48:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <main+0x560>)
 8001a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <main+0x548>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01b      	beq.n	8001a8e <main+0x4f6>
 8001a56:	4b28      	ldr	r3, [pc, #160]	@ (8001af8 <main+0x560>)
 8001a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ae4 <main+0x54c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d014      	beq.n	8001a8e <main+0x4f6>
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <main+0x560>)
 8001a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae8 <main+0x550>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <main+0x4f6>
 8001a72:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <main+0x560>)
 8001a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <main+0x554>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d006      	beq.n	8001a8e <main+0x4f6>
 8001a80:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <main+0x560>)
 8001a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a19      	ldr	r2, [pc, #100]	@ (8001af0 <main+0x558>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d136      	bne.n	8001afc <main+0x564>
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <main+0x560>)
 8001a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <main+0x560>)
 8001a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0208 	bic.w	r2, r2, #8
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e035      	b.n	8001b14 <main+0x57c>
 8001aa8:	24000f28 	.word	0x24000f28
 8001aac:	24000888 	.word	0x24000888
 8001ab0:	24000fbc 	.word	0x24000fbc
 8001ab4:	40020010 	.word	0x40020010
 8001ab8:	40020028 	.word	0x40020028
 8001abc:	40020040 	.word	0x40020040
 8001ac0:	40020058 	.word	0x40020058
 8001ac4:	40020070 	.word	0x40020070
 8001ac8:	40020088 	.word	0x40020088
 8001acc:	400200a0 	.word	0x400200a0
 8001ad0:	400200b8 	.word	0x400200b8
 8001ad4:	40020410 	.word	0x40020410
 8001ad8:	40020428 	.word	0x40020428
 8001adc:	40020440 	.word	0x40020440
 8001ae0:	40020458 	.word	0x40020458
 8001ae4:	40020470 	.word	0x40020470
 8001ae8:	40020488 	.word	0x40020488
 8001aec:	400204a0 	.word	0x400204a0
 8001af0:	400204b8 	.word	0x400204b8
 8001af4:	24000460 	.word	0x24000460
 8001af8:	24000d6c 	.word	0x24000d6c
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <main+0x61c>)
 8001afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <main+0x61c>)
 8001b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0204 	bic.w	r2, r2, #4
 8001b12:	601a      	str	r2, [r3, #0]
  Get_Sign();
 8001b14:	f001 fe50 	bl	80037b8 <Get_Sign>
  HAL_Delay(50);
 8001b18:	2032      	movs	r0, #50	@ 0x32
 8001b1a:	f003 fb4f 	bl	80051bc <HAL_Delay>
  SpeedMode();
 8001b1e:	f001 ff1f 	bl	8003960 <SpeedMode>
  HAL_Delay(50);
 8001b22:	2032      	movs	r0, #50	@ 0x32
 8001b24:	f003 fb4a 	bl	80051bc <HAL_Delay>
  Start_Stir();
 8001b28:	f001 ffee 	bl	8003b08 <Start_Stir>
  NTC_Control_Init();  // 初始化温控（执行自整定）
 8001b2c:	f000 f9a0 	bl	8001e70 <NTC_Control_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // 每 1000ms 执行一次 pH 任务
	      if (HAL_GetTick() - last_ph_time >= 3000) {
 8001b30:	f003 fb38 	bl	80051a4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <main+0x620>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d906      	bls.n	8001b52 <main+0x5ba>
	          Task_PH();
 8001b44:	f000 fd50 	bl	80025e8 <Task_PH>
	          last_ph_time = HAL_GetTick();
 8001b48:	f003 fb2c 	bl	80051a4 <HAL_GetTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb8 <main+0x620>)
 8001b50:	6013      	str	r3, [r2, #0]
	      }
	      // 每 1000ms 执行一次 尾气 任务
	      	      if (HAL_GetTick() - last_Endgas_time >= 1000) {
 8001b52:	f003 fb27 	bl	80051a4 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <main+0x624>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b62:	d306      	bcc.n	8001b72 <main+0x5da>
	      	    	Send_Task();
 8001b64:	f000 fbf4 	bl	8002350 <Send_Task>
	      	    	last_Endgas_time = HAL_GetTick();
 8001b68:	f003 fb1c 	bl	80051a4 <HAL_GetTick>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a13      	ldr	r2, [pc, #76]	@ (8001bbc <main+0x624>)
 8001b70:	6013      	str	r3, [r2, #0]
	      	      }

	      // 每1000ms执行一次温控任务
	      if (HAL_GetTick() - last_temp_time >= 1000) {
 8001b72:	f003 fb17 	bl	80051a4 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <main+0x628>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b82:	d306      	bcc.n	8001b92 <main+0x5fa>
	        NTC_Control_Update();  // 更新温度控制
 8001b84:	f000 f9c2 	bl	8001f0c <NTC_Control_Update>
	        last_temp_time = HAL_GetTick();
 8001b88:	f003 fb0c 	bl	80051a4 <HAL_GetTick>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <main+0x628>)
 8001b90:	6013      	str	r3, [r2, #0]
	      }

	      if (HAL_GetTick() - last_ox_time >= 2000) {
 8001b92:	f003 fb07 	bl	80051a4 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <main+0x62c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001ba2:	d3c5      	bcc.n	8001b30 <main+0x598>
	    	  ADS8688_ScanAllChannels();  // 更新温度控制
 8001ba4:	f7ff f9fc 	bl	8000fa0 <ADS8688_ScanAllChannels>
	      	      last_ox_time = HAL_GetTick();
 8001ba8:	f003 fafc 	bl	80051a4 <HAL_GetTick>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a05      	ldr	r2, [pc, #20]	@ (8001bc4 <main+0x62c>)
 8001bb0:	6013      	str	r3, [r2, #0]
	      if (HAL_GetTick() - last_ph_time >= 3000) {
 8001bb2:	e7bd      	b.n	8001b30 <main+0x598>
 8001bb4:	24000d6c 	.word	0x24000d6c
 8001bb8:	240003dc 	.word	0x240003dc
 8001bbc:	240003e0 	.word	0x240003e0
 8001bc0:	240003e4 	.word	0x240003e4
 8001bc4:	240003e8 	.word	0x240003e8

08001bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b09c      	sub	sp, #112	@ 0x70
 8001bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd2:	224c      	movs	r2, #76	@ 0x4c
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f010 fb90 	bl	80122fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2220      	movs	r2, #32
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f010 fb8a 	bl	80122fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001be8:	2002      	movs	r0, #2
 8001bea:	f008 f953 	bl	8009e94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <SystemClock_Config+0xdc>)
 8001bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca4 <SystemClock_Config+0xdc>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001bfe:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <SystemClock_Config+0xdc>)
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c10:	4a25      	ldr	r2, [pc, #148]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c24:	bf00      	nop
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c32:	d1f8      	bne.n	8001c26 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <SystemClock_Config+0xe4>)
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	4a1c      	ldr	r2, [pc, #112]	@ (8001cac <SystemClock_Config+0xe4>)
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c40:	2302      	movs	r3, #2
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c48:	2340      	movs	r3, #64	@ 0x40
 8001c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c54:	4618      	mov	r0, r3
 8001c56:	f008 f957 	bl	8009f08 <HAL_RCC_OscConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c60:	f000 f881 	bl	8001d66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c64:	233f      	movs	r3, #63	@ 0x3f
 8001c66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c78:	2340      	movs	r3, #64	@ 0x40
 8001c7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f008 fd96 	bl	800a7bc <HAL_RCC_ClockConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c96:	f000 f866 	bl	8001d66 <Error_Handler>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3770      	adds	r7, #112	@ 0x70
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	58000400 	.word	0x58000400
 8001ca8:	58024800 	.word	0x58024800
 8001cac:	58024400 	.word	0x58024400

08001cb0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0b0      	sub	sp, #192	@ 0xc0
 8001cb4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	22c0      	movs	r2, #192	@ 0xc0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f010 fb1d 	bl	80122fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cc2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001ce2:	23c0      	movs	r3, #192	@ 0xc0
 8001ce4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f009 f8ec 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001d02:	f000 f830 	bl	8001d66 <Error_Handler>
  }
}
 8001d06:	bf00      	nop
 8001d08:	37c0      	adds	r7, #192	@ 0xc0
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d14:	463b      	mov	r3, r7
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d20:	f005 f83a 	bl	8006d98 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d30:	231f      	movs	r3, #31
 8001d32:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001d34:	2387      	movs	r3, #135	@ 0x87
 8001d36:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d50:	463b      	mov	r3, r7
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 f858 	bl	8006e08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d58:	2004      	movs	r0, #4
 8001d5a:	f005 f835 	bl	8006dc8 <HAL_MPU_Enable>

}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6a:	b672      	cpsid	i
}
 8001d6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6e:	bf00      	nop
 8001d70:	e7fd      	b.n	8001d6e <Error_Handler+0x8>
	...

08001d74 <PreAdjustTemperature>:
static AutoTuneHandle tune_handle;
static uint8_t tune_complete = 0;
static uint32_t last_heating_time = 0;

// =================== 阶段1：预调节 ===================
static void PreAdjustTemperature(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af02      	add	r7, sp, #8
    float temp = Read_Temperature();
 8001d7a:	f002 f9e5 	bl	8004148 <Read_Temperature>
 8001d7e:	ed87 0a01 	vstr	s0, [r7, #4]
    printf("Initial temp: %.2f℃, Target: %.2f℃\r\n", temp, SETPOINT);
 8001d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b32      	ldr	r3, [pc, #200]	@ (8001e58 <PreAdjustTemperature+0xe4>)
 8001d90:	e9cd 2300 	strd	r2, r3, [sp]
 8001d94:	ec53 2b17 	vmov	r2, r3, d7
 8001d98:	4830      	ldr	r0, [pc, #192]	@ (8001e5c <PreAdjustTemperature+0xe8>)
 8001d9a:	f010 f907 	bl	8011fac <iprintf>

    if (fabsf(temp - SETPOINT) > PRE_ADJUST_TOLERANCE) {
 8001d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001e60 <PreAdjustTemperature+0xec>
 8001da6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001daa:	eef0 7ae7 	vabs.f32	s15, s15
 8001dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	dc00      	bgt.n	8001dbe <PreAdjustTemperature+0x4a>
            HAL_Delay(1000);
        }
        Relay_Switch(0);
        HAL_Delay(2000);
    }
}
 8001dbc:	e048      	b.n	8001e50 <PreAdjustTemperature+0xdc>
        printf("Pre-adjusting temperature...\r\n");
 8001dbe:	4829      	ldr	r0, [pc, #164]	@ (8001e64 <PreAdjustTemperature+0xf0>)
 8001dc0:	f010 f964 	bl	801208c <puts>
        while (fabsf(Read_Temperature() - SETPOINT) > PRE_ADJUST_TOLERANCE) {
 8001dc4:	e02c      	b.n	8001e20 <PreAdjustTemperature+0xac>
            temp = Read_Temperature();
 8001dc6:	f002 f9bf 	bl	8004148 <Read_Temperature>
 8001dca:	ed87 0a01 	vstr	s0, [r7, #4]
            if (temp >= 50.0f) {
 8001dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001e68 <PreAdjustTemperature+0xf4>
 8001dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	db0c      	blt.n	8001dfa <PreAdjustTemperature+0x86>
                Relay_Switch(0);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f001 fc0b 	bl	80035fc <Relay_Switch>
                printf("[NTC] Overtemperature during pre-adjust! %.2f℃\r\n", temp);
 8001de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dee:	ec53 2b17 	vmov	r2, r3, d7
 8001df2:	481e      	ldr	r0, [pc, #120]	@ (8001e6c <PreAdjustTemperature+0xf8>)
 8001df4:	f010 f8da 	bl	8011fac <iprintf>
                break;
 8001df8:	e023      	b.n	8001e42 <PreAdjustTemperature+0xce>
            Relay_Switch(temp < SETPOINT ? 1 : 0);
 8001dfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dfe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001e60 <PreAdjustTemperature+0xec>
 8001e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	bf4c      	ite	mi
 8001e0c:	2301      	movmi	r3, #1
 8001e0e:	2300      	movpl	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 fbf2 	bl	80035fc <Relay_Switch>
            HAL_Delay(1000);
 8001e18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e1c:	f003 f9ce 	bl	80051bc <HAL_Delay>
        while (fabsf(Read_Temperature() - SETPOINT) > PRE_ADJUST_TOLERANCE) {
 8001e20:	f002 f992 	bl	8004148 <Read_Temperature>
 8001e24:	eef0 7a40 	vmov.f32	s15, s0
 8001e28:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001e60 <PreAdjustTemperature+0xec>
 8001e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e30:	eef0 7ae7 	vabs.f32	s15, s15
 8001e34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	dcc1      	bgt.n	8001dc6 <PreAdjustTemperature+0x52>
        Relay_Switch(0);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f001 fbda 	bl	80035fc <Relay_Switch>
        HAL_Delay(2000);
 8001e48:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e4c:	f003 f9b6 	bl	80051bc <HAL_Delay>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40428000 	.word	0x40428000
 8001e5c:	08015b50 	.word	0x08015b50
 8001e60:	42140000 	.word	0x42140000
 8001e64:	08015b7c 	.word	0x08015b7c
 8001e68:	42480000 	.word	0x42480000
 8001e6c:	08015b9c 	.word	0x08015b9c

08001e70 <NTC_Control_Init>:

// =================== 初始化 ===================
void NTC_Control_Init(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af02      	add	r7, sp, #8
    PreAdjustTemperature();
 8001e76:	f7ff ff7d 	bl	8001d74 <PreAdjustTemperature>
    PID_Init(&pid, pid_params.Kp, pid_params.Ki, pid_params.Kd, -100.0f, 100.0f);
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <NTC_Control_Init+0x70>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <NTC_Control_Init+0x70>)
 8001e82:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <NTC_Control_Init+0x70>)
 8001e88:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e8c:	ed9f 2a15 	vldr	s4, [pc, #84]	@ 8001ee4 <NTC_Control_Init+0x74>
 8001e90:	eddf 1a15 	vldr	s3, [pc, #84]	@ 8001ee8 <NTC_Control_Init+0x78>
 8001e94:	eeb0 1a66 	vmov.f32	s2, s13
 8001e98:	eef0 0a47 	vmov.f32	s1, s14
 8001e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea0:	4812      	ldr	r0, [pc, #72]	@ (8001eec <NTC_Control_Init+0x7c>)
 8001ea2:	f000 fc81 	bl	80027a8 <PID_Init>
    pid.integral = 0;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <NTC_Control_Init+0x7c>)
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
    pid.last_error = 0;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <NTC_Control_Init+0x7c>)
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]

    PID_AutoTune_Init(&tune_handle, &pid_params, Read_Temperature, Relay_Switch,
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <NTC_Control_Init+0x80>)
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001ef4 <NTC_Control_Init+0x84>
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <NTC_Control_Init+0x88>)
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <NTC_Control_Init+0x8c>)
 8001ec2:	4907      	ldr	r1, [pc, #28]	@ (8001ee0 <NTC_Control_Init+0x70>)
 8001ec4:	480e      	ldr	r0, [pc, #56]	@ (8001f00 <NTC_Control_Init+0x90>)
 8001ec6:	f000 fe21 	bl	8002b0c <PID_AutoTune_Init>
                      SETPOINT, AUTO_TUNE_DURATION);
    tune_complete = 0;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <NTC_Control_Init+0x94>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
    last_heating_time = HAL_GetTick();
 8001ed0:	f003 f968 	bl	80051a4 <HAL_GetTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <NTC_Control_Init+0x98>)
 8001ed8:	6013      	str	r3, [r2, #0]
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	24000000 	.word	0x24000000
 8001ee4:	42c80000 	.word	0x42c80000
 8001ee8:	c2c80000 	.word	0xc2c80000
 8001eec:	240003ec 	.word	0x240003ec
 8001ef0:	000493e0 	.word	0x000493e0
 8001ef4:	42140000 	.word	0x42140000
 8001ef8:	080035fd 	.word	0x080035fd
 8001efc:	08004149 	.word	0x08004149
 8001f00:	24000414 	.word	0x24000414
 8001f04:	24000450 	.word	0x24000450
 8001f08:	24000454 	.word	0x24000454

08001f0c <NTC_Control_Update>:

// =================== 主控制任务 ===================
void NTC_Control_Update(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0b0      	sub	sp, #192	@ 0xc0
 8001f10:	af0a      	add	r7, sp, #40	@ 0x28
    float temp = Read_Temperature();
 8001f12:	f002 f919 	bl	8004148 <Read_Temperature>
 8001f16:	ed87 0a24 	vstr	s0, [r7, #144]	@ 0x90
    if (temp <= -50.0f) return;
 8001f1a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001f1e:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002198 <NTC_Control_Update+0x28c>
 8001f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2a:	f240 812f 	bls.w	800218c <NTC_Control_Update+0x280>

    // --- 高温保护 ---
    if (temp >= 50.0f) {
 8001f2e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001f32:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800219c <NTC_Control_Update+0x290>
 8001f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	db0c      	blt.n	8001f5a <NTC_Control_Update+0x4e>
        Relay_Switch(0);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f001 fb5b 	bl	80035fc <Relay_Switch>
        printf("[NTC] Overtemperature! %.2f℃\r\n", temp);
 8001f46:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001f4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f4e:	ec53 2b17 	vmov	r2, r3, d7
 8001f52:	4893      	ldr	r0, [pc, #588]	@ (80021a0 <NTC_Control_Update+0x294>)
 8001f54:	f010 f82a 	bl	8011fac <iprintf>
        return;
 8001f58:	e11b      	b.n	8002192 <NTC_Control_Update+0x286>
    }

    // --- 自整定 ---
    if (tune_handle.state != TUNE_IDLE) {
 8001f5a:	4b92      	ldr	r3, [pc, #584]	@ (80021a4 <NTC_Control_Update+0x298>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d050      	beq.n	8002004 <NTC_Control_Update+0xf8>
        PID_AutoTune_Task(&tune_handle);
 8001f62:	4890      	ldr	r0, [pc, #576]	@ (80021a4 <NTC_Control_Update+0x298>)
 8001f64:	f000 fe20 	bl	8002ba8 <PID_AutoTune_Task>
        if (tune_handle.state == TUNE_IDLE) {
 8001f68:	4b8e      	ldr	r3, [pc, #568]	@ (80021a4 <NTC_Control_Update+0x298>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 810f 	bne.w	8002190 <NTC_Control_Update+0x284>
            if (pid_params.Kp <= 0 || pid_params.Ki <= 0) {
 8001f72:	4b8d      	ldr	r3, [pc, #564]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	d907      	bls.n	8001f92 <NTC_Control_Update+0x86>
 8001f82:	4b89      	ldr	r3, [pc, #548]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001f84:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f90:	d80a      	bhi.n	8001fa8 <NTC_Control_Update+0x9c>
                pid_params.Kp = 4.0f;
 8001f92:	4b85      	ldr	r3, [pc, #532]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001f94:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001f98:	601a      	str	r2, [r3, #0]
                pid_params.Ki = 0.05f;
 8001f9a:	4b83      	ldr	r3, [pc, #524]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001f9c:	4a83      	ldr	r2, [pc, #524]	@ (80021ac <NTC_Control_Update+0x2a0>)
 8001f9e:	605a      	str	r2, [r3, #4]
                pid_params.Kd = 2.0f;
 8001fa0:	4b81      	ldr	r3, [pc, #516]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001fa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fa6:	609a      	str	r2, [r3, #8]
            }
            PID_UpdateParams(&pid, pid_params.Kp, pid_params.Ki, pid_params.Kd);
 8001fa8:	4b7f      	ldr	r3, [pc, #508]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	4b7e      	ldr	r3, [pc, #504]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001fb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fb4:	4b7c      	ldr	r3, [pc, #496]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001fb6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fba:	eeb0 1a66 	vmov.f32	s2, s13
 8001fbe:	eef0 0a47 	vmov.f32	s1, s14
 8001fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc6:	487a      	ldr	r0, [pc, #488]	@ (80021b0 <NTC_Control_Update+0x2a4>)
 8001fc8:	f000 fd14 	bl	80029f4 <PID_UpdateParams>
            tune_complete = 1;
 8001fcc:	4b79      	ldr	r3, [pc, #484]	@ (80021b4 <NTC_Control_Update+0x2a8>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
            printf("PID tuned: Kp=%.3f, Ki=%.3f, Kd=%.3f\r\n",
                   pid_params.Kp, pid_params.Ki, pid_params.Kd);
 8001fd2:	4b75      	ldr	r3, [pc, #468]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
            printf("PID tuned: Kp=%.3f, Ki=%.3f, Kd=%.3f\r\n",
 8001fd8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
                   pid_params.Kp, pid_params.Ki, pid_params.Kd);
 8001fdc:	4b72      	ldr	r3, [pc, #456]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001fde:	edd3 7a01 	vldr	s15, [r3, #4]
            printf("PID tuned: Kp=%.3f, Ki=%.3f, Kd=%.3f\r\n",
 8001fe2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   pid_params.Kp, pid_params.Ki, pid_params.Kd);
 8001fe6:	4b70      	ldr	r3, [pc, #448]	@ (80021a8 <NTC_Control_Update+0x29c>)
 8001fe8:	edd3 6a02 	vldr	s13, [r3, #8]
            printf("PID tuned: Kp=%.3f, Ki=%.3f, Kd=%.3f\r\n",
 8001fec:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001ff0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001ff4:	ed8d 7b00 	vstr	d7, [sp]
 8001ff8:	ec53 2b15 	vmov	r2, r3, d5
 8001ffc:	486e      	ldr	r0, [pc, #440]	@ (80021b8 <NTC_Control_Update+0x2ac>)
 8001ffe:	f00f ffd5 	bl	8011fac <iprintf>
        }
        return;
 8002002:	e0c5      	b.n	8002190 <NTC_Control_Update+0x284>
    }

    // --- 计算真实dt ---
    static uint32_t last_time = 0;
    uint32_t now = HAL_GetTick();
 8002004:	f003 f8ce 	bl	80051a4 <HAL_GetTick>
 8002008:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    float dt = (now - last_time) / 1000.0f;
 800200c:	4b6b      	ldr	r3, [pc, #428]	@ (80021bc <NTC_Control_Update+0x2b0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201e:	eddf 6a68 	vldr	s13, [pc, #416]	@ 80021c0 <NTC_Control_Update+0x2b4>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    if (dt <= 0.0f || dt > 2.0f) dt = 1.0f;
 800202a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800202e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	d908      	bls.n	800204a <NTC_Control_Update+0x13e>
 8002038:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800203c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	dd03      	ble.n	8002052 <NTC_Control_Update+0x146>
 800204a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800204e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    last_time = now;
 8002052:	4a5a      	ldr	r2, [pc, #360]	@ (80021bc <NTC_Control_Update+0x2b0>)
 8002054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002058:	6013      	str	r3, [r2, #0]

    // --- PID计算 ---
    float output = PID_Calculate(&pid, SETPOINT, temp, dt);
 800205a:	ed97 1a25 	vldr	s2, [r7, #148]	@ 0x94
 800205e:	edd7 0a24 	vldr	s1, [r7, #144]	@ 0x90
 8002062:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80021c4 <NTC_Control_Update+0x2b8>
 8002066:	4852      	ldr	r0, [pc, #328]	@ (80021b0 <NTC_Control_Update+0x2a4>)
 8002068:	f000 fbd2 	bl	8002810 <PID_Calculate>
 800206c:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88

    // --- 滞环继电器控制 ---
    static uint8_t relay_state = 0;
    if (temp < SETPOINT - RELAY_HYSTERESIS) relay_state = 1;
 8002070:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002074:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80021c8 <NTC_Control_Update+0x2bc>
 8002078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002080:	d503      	bpl.n	800208a <NTC_Control_Update+0x17e>
 8002082:	4b52      	ldr	r3, [pc, #328]	@ (80021cc <NTC_Control_Update+0x2c0>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e00b      	b.n	80020a2 <NTC_Control_Update+0x196>
    else if (temp > SETPOINT + RELAY_HYSTERESIS) relay_state = 0;
 800208a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800208e:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80021d0 <NTC_Control_Update+0x2c4>
 8002092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209a:	dd02      	ble.n	80020a2 <NTC_Control_Update+0x196>
 800209c:	4b4b      	ldr	r3, [pc, #300]	@ (80021cc <NTC_Control_Update+0x2c0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
    Relay_Switch(relay_state);
 80020a2:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <NTC_Control_Update+0x2c0>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 faa8 	bl	80035fc <Relay_Switch>

    // --- 强制加热逻辑 ---
    if (temp < FORCE_HEATING_THRESHOLD && (now - last_heating_time) > 30000) {
 80020ac:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80020b0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80021d4 <NTC_Control_Update+0x2c8>
 80020b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	d519      	bpl.n	80020f2 <NTC_Control_Update+0x1e6>
 80020be:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <NTC_Control_Update+0x2cc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f247 5230 	movw	r2, #30000	@ 0x7530
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d910      	bls.n	80020f2 <NTC_Control_Update+0x1e6>
        Relay_Switch(1);
 80020d0:	2001      	movs	r0, #1
 80020d2:	f001 fa93 	bl	80035fc <Relay_Switch>
        last_heating_time = now;
 80020d6:	4a40      	ldr	r2, [pc, #256]	@ (80021d8 <NTC_Control_Update+0x2cc>)
 80020d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020dc:	6013      	str	r3, [r2, #0]
        printf("[FORCE] Force heating: %.2f℃\r\n", temp);
 80020de:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80020e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020e6:	ec53 2b17 	vmov	r2, r3, d7
 80020ea:	483c      	ldr	r0, [pc, #240]	@ (80021dc <NTC_Control_Update+0x2d0>)
 80020ec:	f00f ff5e 	bl	8011fac <iprintf>
        return;
 80020f0:	e04f      	b.n	8002192 <NTC_Control_Update+0x286>
    }

    // --- 自适应参数微调 ---
    float dTemp = temp - pid.last_pv;
 80020f2:	4b2f      	ldr	r3, [pc, #188]	@ (80021b0 <NTC_Control_Update+0x2a4>)
 80020f4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80020f8:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80020fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002100:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    PID_SelfAdjust(&pid, SETPOINT - temp, dTemp);
 8002104:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80021c4 <NTC_Control_Update+0x2b8>
 8002108:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800210c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002110:	edd7 0a21 	vldr	s1, [r7, #132]	@ 0x84
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	4825      	ldr	r0, [pc, #148]	@ (80021b0 <NTC_Control_Update+0x2a4>)
 800211a:	f000 fc8d 	bl	8002a38 <PID_SelfAdjust>
    pid.last_pv = temp;
 800211e:	4a24      	ldr	r2, [pc, #144]	@ (80021b0 <NTC_Control_Update+0x2a4>)
 8002120:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002124:	6253      	str	r3, [r2, #36]	@ 0x24

    // --- UART输出 ---
    char buf[128];
    snprintf(buf, sizeof(buf), "Temp: %.2fC | Relay: %s | Out: %.1f | Kp:%.2f Ki:%.3f\r\n",
 8002126:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800212a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
             temp, relay_state ? "ON" : "OFF", output,
 800212e:	4b27      	ldr	r3, [pc, #156]	@ (80021cc <NTC_Control_Update+0x2c0>)
 8002130:	781b      	ldrb	r3, [r3, #0]
    snprintf(buf, sizeof(buf), "Temp: %.2fC | Relay: %s | Out: %.1f | Kp:%.2f Ki:%.3f\r\n",
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <NTC_Control_Update+0x22e>
 8002136:	4b2a      	ldr	r3, [pc, #168]	@ (80021e0 <NTC_Control_Update+0x2d4>)
 8002138:	e000      	b.n	800213c <NTC_Control_Update+0x230>
 800213a:	4b2a      	ldr	r3, [pc, #168]	@ (80021e4 <NTC_Control_Update+0x2d8>)
 800213c:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8002140:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
             pid.params.Kp, pid.params.Ki);
 8002144:	4a1a      	ldr	r2, [pc, #104]	@ (80021b0 <NTC_Control_Update+0x2a4>)
 8002146:	edd2 5a00 	vldr	s11, [r2]
    snprintf(buf, sizeof(buf), "Temp: %.2fC | Relay: %s | Out: %.1f | Kp:%.2f Ki:%.3f\r\n",
 800214a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
             pid.params.Kp, pid.params.Ki);
 800214e:	4a18      	ldr	r2, [pc, #96]	@ (80021b0 <NTC_Control_Update+0x2a4>)
 8002150:	edd2 4a01 	vldr	s9, [r2, #4]
    snprintf(buf, sizeof(buf), "Temp: %.2fC | Relay: %s | Out: %.1f | Kp:%.2f Ki:%.3f\r\n",
 8002154:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8002158:	1d38      	adds	r0, r7, #4
 800215a:	ed8d 4b08 	vstr	d4, [sp, #32]
 800215e:	ed8d 5b06 	vstr	d5, [sp, #24]
 8002162:	ed8d 6b04 	vstr	d6, [sp, #16]
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	ed8d 7b00 	vstr	d7, [sp]
 800216c:	4a1e      	ldr	r2, [pc, #120]	@ (80021e8 <NTC_Control_Update+0x2dc>)
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	f00f ff94 	bl	801209c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f902 	bl	8000380 <strlen>
 800217c:	4603      	mov	r3, r0
 800217e:	b29a      	uxth	r2, r3
 8002180:	1d39      	adds	r1, r7, #4
 8002182:	2364      	movs	r3, #100	@ 0x64
 8002184:	4819      	ldr	r0, [pc, #100]	@ (80021ec <NTC_Control_Update+0x2e0>)
 8002186:	f00c ff9b 	bl	800f0c0 <HAL_UART_Transmit>
 800218a:	e002      	b.n	8002192 <NTC_Control_Update+0x286>
    if (temp <= -50.0f) return;
 800218c:	bf00      	nop
 800218e:	e000      	b.n	8002192 <NTC_Control_Update+0x286>
        return;
 8002190:	bf00      	nop
}
 8002192:	3798      	adds	r7, #152	@ 0x98
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	c2480000 	.word	0xc2480000
 800219c:	42480000 	.word	0x42480000
 80021a0:	08015bd0 	.word	0x08015bd0
 80021a4:	24000414 	.word	0x24000414
 80021a8:	24000000 	.word	0x24000000
 80021ac:	3d4ccccd 	.word	0x3d4ccccd
 80021b0:	240003ec 	.word	0x240003ec
 80021b4:	24000450 	.word	0x24000450
 80021b8:	08015bf4 	.word	0x08015bf4
 80021bc:	24000458 	.word	0x24000458
 80021c0:	447a0000 	.word	0x447a0000
 80021c4:	42140000 	.word	0x42140000
 80021c8:	42133333 	.word	0x42133333
 80021cc:	2400045c 	.word	0x2400045c
 80021d0:	4214cccd 	.word	0x4214cccd
 80021d4:	42120000 	.word	0x42120000
 80021d8:	24000454 	.word	0x24000454
 80021dc:	08015c1c 	.word	0x08015c1c
 80021e0:	08015c40 	.word	0x08015c40
 80021e4:	08015c44 	.word	0x08015c44
 80021e8:	08015c48 	.word	0x08015c48
 80021ec:	24000e94 	.word	0x24000e94

080021f0 <ModbusBytesToFloat>:
 uint8_t rx_ox_flag = 0;
 uint8_t current_device = 0;  // 0设置为溶氧设备，1设置为尾气设备

 // 把Modbus返回的4字节转float (ABCD顺序大端)
 static float ModbusBytesToFloat(uint8_t *data)
 {
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
     uint32_t temp = ((uint32_t)data[0] << 24) |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	061a      	lsls	r2, r3, #24
                     ((uint32_t)data[1] << 16) |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	041b      	lsls	r3, r3, #16
     uint32_t temp = ((uint32_t)data[0] << 24) |
 8002206:	431a      	orrs	r2, r3
                     ((uint32_t)data[2] << 8)  |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3302      	adds	r3, #2
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	021b      	lsls	r3, r3, #8
                     ((uint32_t)data[1] << 16) |
 8002210:	4313      	orrs	r3, r2
                     ((uint32_t)data[3]);
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	3203      	adds	r2, #3
 8002216:	7812      	ldrb	r2, [r2, #0]
                     ((uint32_t)data[2] << 8)  |
 8002218:	4313      	orrs	r3, r2
     uint32_t temp = ((uint32_t)data[0] << 24) |
 800221a:	60fb      	str	r3, [r7, #12]
     float value;
     memcpy(&value, &temp, 4);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	60bb      	str	r3, [r7, #8]
     return value;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	ee07 3a90 	vmov	s15, r3
 }
 8002226:	eeb0 0a67 	vmov.f32	s0, s15
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <Oxygen_Get>:
	           // 开启接收
	       HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rx_data4, sizeof(rx_data4));
	       __HAL_DMA_DISABLE_IT(huart4.hdmarx, DMA_IT_HT);
}
//读2个寄存器，回复4位16进制浮点数转换
   void Oxygen_Get() {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	   // 清空接收缓存
	   memset(rx_data4, 0, sizeof(rx_data4));
 800223a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800223e:	2100      	movs	r1, #0
 8002240:	480d      	ldr	r0, [pc, #52]	@ (8002278 <Oxygen_Get+0x44>)
 8002242:	f010 f85b 	bl	80122fc <memset>
       uint8_t sendBuffer[] = {0x0A, 0x03, 0x00, 0x00, 0x00, 0x02, 0xC5, 0x70};
 8002246:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <Oxygen_Get+0x48>)
 8002248:	463b      	mov	r3, r7
 800224a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800224e:	e883 0003 	stmia.w	r3, {r0, r1}
       tx_ox_flag = 0;
 8002252:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <Oxygen_Get+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
       HAL_UART_Transmit_DMA(&huart4, sendBuffer, sizeof(sendBuffer));
 8002258:	463b      	mov	r3, r7
 800225a:	2208      	movs	r2, #8
 800225c:	4619      	mov	r1, r3
 800225e:	4809      	ldr	r0, [pc, #36]	@ (8002284 <Oxygen_Get+0x50>)
 8002260:	f00c ffbc 	bl	800f1dc <HAL_UART_Transmit_DMA>
       // 启动接收
       HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rx_data4, sizeof(rx_data4));
 8002264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002268:	4903      	ldr	r1, [pc, #12]	@ (8002278 <Oxygen_Get+0x44>)
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <Oxygen_Get+0x50>)
 800226c:	f00e ff00 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
   }
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	24000460 	.word	0x24000460
 800227c:	08015c88 	.word	0x08015c88
 8002280:	24000660 	.word	0x24000660
 8002284:	24000d6c 	.word	0x24000d6c

08002288 <Oxygen_Read>:

   void Oxygen_Read(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
	   // 调试打印：查看当前接收缓冲区的实际数据
	       printf("ox dump: ");
 800228e:	4814      	ldr	r0, [pc, #80]	@ (80022e0 <Oxygen_Read+0x58>)
 8002290:	f00f fe8c 	bl	8011fac <iprintf>
	       for (uint16_t k = 0; k < 40; k++) {  // 打印前40字节够用了
 8002294:	2300      	movs	r3, #0
 8002296:	80fb      	strh	r3, [r7, #6]
 8002298:	e009      	b.n	80022ae <Oxygen_Read+0x26>
	           printf("%02X ", rx_data4[k]);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4a11      	ldr	r2, [pc, #68]	@ (80022e4 <Oxygen_Read+0x5c>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4811      	ldr	r0, [pc, #68]	@ (80022e8 <Oxygen_Read+0x60>)
 80022a4:	f00f fe82 	bl	8011fac <iprintf>
	       for (uint16_t k = 0; k < 40; k++) {  // 打印前40字节够用了
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	3301      	adds	r3, #1
 80022ac:	80fb      	strh	r3, [r7, #6]
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	2b27      	cmp	r3, #39	@ 0x27
 80022b2:	d9f2      	bls.n	800229a <Oxygen_Read+0x12>
	       }
	       printf("\n");
 80022b4:	200a      	movs	r0, #10
 80022b6:	f00f fe8b 	bl	8011fd0 <putchar>
	   float oxygen = ModbusBytesToFloat(&rx_data4[3]);
 80022ba:	480c      	ldr	r0, [pc, #48]	@ (80022ec <Oxygen_Read+0x64>)
 80022bc:	f7ff ff98 	bl	80021f0 <ModbusBytesToFloat>
 80022c0:	ed87 0a00 	vstr	s0, [r7]
	    printf("Oxygen=%.2f\r\n", oxygen);
 80022c4:	edd7 7a00 	vldr	s15, [r7]
 80022c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022cc:	ec53 2b17 	vmov	r2, r3, d7
 80022d0:	4807      	ldr	r0, [pc, #28]	@ (80022f0 <Oxygen_Read+0x68>)
 80022d2:	f00f fe6b 	bl	8011fac <iprintf>
   }
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	08015c90 	.word	0x08015c90
 80022e4:	24000460 	.word	0x24000460
 80022e8:	08015c9c 	.word	0x08015c9c
 80022ec:	24000463 	.word	0x24000463
 80022f0:	08015ca4 	.word	0x08015ca4

080022f4 <Oxygen_Task>:

   void Oxygen_Task(void) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
//           initialized = 1;
//           return;  // 首次初始化后直接返回
//       }

       // 正常读取流程
       Oxygen_Get();
 80022fa:	f7ff ff9b 	bl	8002234 <Oxygen_Get>

       // 添加接收等待逻辑（非阻塞方式）
       uint32_t start = HAL_GetTick();
 80022fe:	f002 ff51 	bl	80051a4 <HAL_GetTick>
 8002302:	6078      	str	r0, [r7, #4]
       while (!rx_ox_flag && (HAL_GetTick() - start < 100)) {
 8002304:	bf00      	nop
 8002306:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <Oxygen_Task+0x50>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <Oxygen_Task+0x28>
 800230e:	f002 ff49 	bl	80051a4 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b63      	cmp	r3, #99	@ 0x63
 800231a:	d9f4      	bls.n	8002306 <Oxygen_Task+0x12>
           // 等待100ms或直到接收完成
       }

       if (rx_ox_flag) {
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <Oxygen_Task+0x50>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <Oxygen_Task+0x46>
           Oxygen_Read();
 8002324:	f7ff ffb0 	bl	8002288 <Oxygen_Read>
           rx_ox_flag = 0;  // 清除接收标志
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <Oxygen_Task+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]

           // 重新启动下一次接收
           HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rx_data4, sizeof(rx_data4));
 800232e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002332:	4905      	ldr	r1, [pc, #20]	@ (8002348 <Oxygen_Task+0x54>)
 8002334:	4805      	ldr	r0, [pc, #20]	@ (800234c <Oxygen_Task+0x58>)
 8002336:	f00e fe9b 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
       }
   }
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	24000661 	.word	0x24000661
 8002348:	24000460 	.word	0x24000460
 800234c:	24000d6c 	.word	0x24000d6c

08002350 <Send_Task>:

void Send_Task(void){
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	if(current_device==0){
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <Send_Task+0x28>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d105      	bne.n	8002368 <Send_Task+0x18>
		Oxygen_Task();
 800235c:	f7ff ffca 	bl	80022f4 <Oxygen_Task>
		current_device=1;
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <Send_Task+0x28>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
	}
	else{
		Endgas_Task();
		current_device=0;
	}
}
 8002366:	e004      	b.n	8002372 <Send_Task+0x22>
		Endgas_Task();
 8002368:	f7ff f800 	bl	800136c <Endgas_Task>
		current_device=0;
 800236c:	4b02      	ldr	r3, [pc, #8]	@ (8002378 <Send_Task+0x28>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	24000662 	.word	0x24000662

0800237c <requestPH>:
uint8_t rx_ph_flag = 0;            // USART3 接收完成标志（DMA 完成后置1）
uint8_t tx_ph_flag = 0;            // USART3 发送完成标志（DMA 完成后置1）


// ========== 发送 pH 请求 ==========
void requestPH(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
    uint8_t requestPH[] = {0x01,0x03,0x00,0x64,0x00,0x02,0x85,0xD4};
 8002382:	4a15      	ldr	r2, [pc, #84]	@ (80023d8 <requestPH+0x5c>)
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800238a:	e883 0003 	stmia.w	r3, {r0, r1}
    tx_ph_flag = 0;
 800238e:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <requestPH+0x60>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart3, requestPH, sizeof(requestPH));
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2208      	movs	r2, #8
 8002398:	4619      	mov	r1, r3
 800239a:	4811      	ldr	r0, [pc, #68]	@ (80023e0 <requestPH+0x64>)
 800239c:	f00c ff1e 	bl	800f1dc <HAL_UART_Transmit_DMA>

    uint32_t timeout = HAL_GetTick();
 80023a0:	f002 ff00 	bl	80051a4 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]
    while(tx_ph_flag == 0 && (HAL_GetTick() - timeout) < 1000) {}
 80023a6:	bf00      	nop
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <requestPH+0x60>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <requestPH+0x44>
 80023b0:	f002 fef8 	bl	80051a4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023be:	d3f3      	bcc.n	80023a8 <requestPH+0x2c>
    if(tx_ph_flag == 0) printf("pH发送超时\r\n");
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <requestPH+0x60>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <requestPH+0x52>
 80023c8:	4806      	ldr	r0, [pc, #24]	@ (80023e4 <requestPH+0x68>)
 80023ca:	f00f fe5f 	bl	801208c <puts>
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	08015cc4 	.word	0x08015cc4
 80023dc:	24000875 	.word	0x24000875
 80023e0:	24000f28 	.word	0x24000f28
 80023e4:	08015cb4 	.word	0x08015cb4

080023e8 <readPH>:

// ========== 解析 pH 报文 ==========
void readPH(void) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af02      	add	r7, sp, #8
    if(rx_data3[0] == 0x01 && rx_data3[1] == 0x03 && rx_data3[2] == 0x04) {
 80023ee:	4b2e      	ldr	r3, [pc, #184]	@ (80024a8 <readPH+0xc0>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d149      	bne.n	800248a <readPH+0xa2>
 80023f6:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <readPH+0xc0>)
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d145      	bne.n	800248a <readPH+0xa2>
 80023fe:	4b2a      	ldr	r3, [pc, #168]	@ (80024a8 <readPH+0xc0>)
 8002400:	789b      	ldrb	r3, [r3, #2]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d141      	bne.n	800248a <readPH+0xa2>
        union { uint8_t bytes[4]; float value; } phData;
        phData.bytes[0] = rx_data3[6];
 8002406:	4b28      	ldr	r3, [pc, #160]	@ (80024a8 <readPH+0xc0>)
 8002408:	799b      	ldrb	r3, [r3, #6]
 800240a:	713b      	strb	r3, [r7, #4]
        phData.bytes[1] = rx_data3[5];
 800240c:	4b26      	ldr	r3, [pc, #152]	@ (80024a8 <readPH+0xc0>)
 800240e:	795b      	ldrb	r3, [r3, #5]
 8002410:	717b      	strb	r3, [r7, #5]
        phData.bytes[2] = rx_data3[4];
 8002412:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <readPH+0xc0>)
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	71bb      	strb	r3, [r7, #6]
        phData.bytes[3] = rx_data3[3];
 8002418:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <readPH+0xc0>)
 800241a:	78db      	ldrb	r3, [r3, #3]
 800241c:	71fb      	strb	r3, [r7, #7]
        ph_read = phData.value;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a22      	ldr	r2, [pc, #136]	@ (80024ac <readPH+0xc4>)
 8002422:	6013      	str	r3, [r2, #0]

        if(ph_read >= 0.0f && ph_read <= 14.0f) {
 8002424:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <readPH+0xc4>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	db1f      	blt.n	8002474 <readPH+0x8c>
 8002434:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <readPH+0xc4>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800243e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002446:	d815      	bhi.n	8002474 <readPH+0x8c>
            ph_current = ph_read;
 8002448:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <readPH+0xc4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <readPH+0xc8>)
 800244e:	6013      	str	r3, [r2, #0]
        } else {
            printf("pH 解析值异常(%.2f)，跳过更新\r\n", ph_read);
            return;
        }
        printf("Get_pH: %.2f (SetPoint: %.2f)\r\n", ph_current, ph_set);
 8002450:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <readPH+0xc8>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800245a:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <readPH+0xcc>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002464:	ed8d 7b00 	vstr	d7, [sp]
 8002468:	ec53 2b16 	vmov	r2, r3, d6
 800246c:	4812      	ldr	r0, [pc, #72]	@ (80024b8 <readPH+0xd0>)
 800246e:	f00f fd9d 	bl	8011fac <iprintf>
    if(rx_data3[0] == 0x01 && rx_data3[1] == 0x03 && rx_data3[2] == 0x04) {
 8002472:	e015      	b.n	80024a0 <readPH+0xb8>
            printf("pH 解析值异常(%.2f)，跳过更新\r\n", ph_read);
 8002474:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <readPH+0xc4>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800247e:	ec53 2b17 	vmov	r2, r3, d7
 8002482:	480e      	ldr	r0, [pc, #56]	@ (80024bc <readPH+0xd4>)
 8002484:	f00f fd92 	bl	8011fac <iprintf>
 8002488:	e00a      	b.n	80024a0 <readPH+0xb8>
    } else {
        printf("pH 报文无效！头:0x%02X 0x%02X 0x%02X\r\n", rx_data3[0], rx_data3[1], rx_data3[2]);
 800248a:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <readPH+0xc0>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <readPH+0xc0>)
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	461a      	mov	r2, r3
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <readPH+0xc0>)
 8002498:	789b      	ldrb	r3, [r3, #2]
 800249a:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <readPH+0xd8>)
 800249c:	f00f fd86 	bl	8011fac <iprintf>
    }
}
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	24000674 	.word	0x24000674
 80024ac:	24000010 	.word	0x24000010
 80024b0:	24000664 	.word	0x24000664
 80024b4:	2400000c 	.word	0x2400000c
 80024b8:	08015ccc 	.word	0x08015ccc
 80024bc:	08015cec 	.word	0x08015cec
 80024c0:	08015d18 	.word	0x08015d18

080024c4 <adjustPH>:

// ========== 调整 pH 并控制泵 ==========
void adjustPH(void) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 80024ca:	f002 fe6b 	bl	80051a4 <HAL_GetTick>
 80024ce:	6078      	str	r0, [r7, #4]

    // 如果泵正在运行，检查是否到达运行时间
    if (pump_running) {
 80024d0:	4b39      	ldr	r3, [pc, #228]	@ (80025b8 <adjustPH+0xf4>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d024      	beq.n	8002522 <adjustPH+0x5e>
        if (now - pump_start_time >= PUMP_RUNTIME) {
 80024d8:	4b38      	ldr	r3, [pc, #224]	@ (80025bc <adjustPH+0xf8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f240 52db 	movw	r2, #1499	@ 0x5db
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d961      	bls.n	80025ac <adjustPH+0xe8>
            if (current_pump_type == 1) {
 80024e8:	4b35      	ldr	r3, [pc, #212]	@ (80025c0 <adjustPH+0xfc>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d105      	bne.n	80024fc <adjustPH+0x38>
                Stop_AcidPump();
 80024f0:	f000 fea8 	bl	8003244 <Stop_AcidPump>
                printf("Acid_PUMP_STOP\n");
 80024f4:	4833      	ldr	r0, [pc, #204]	@ (80025c4 <adjustPH+0x100>)
 80024f6:	f00f fdc9 	bl	801208c <puts>
 80024fa:	e008      	b.n	800250e <adjustPH+0x4a>
            } else if (current_pump_type == 2) {
 80024fc:	4b30      	ldr	r3, [pc, #192]	@ (80025c0 <adjustPH+0xfc>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d104      	bne.n	800250e <adjustPH+0x4a>
                Stop_AlkaliPump();
 8002504:	f000 ff70 	bl	80033e8 <Stop_AlkaliPump>
                printf("Alkali_PUMP_STOP\n");
 8002508:	482f      	ldr	r0, [pc, #188]	@ (80025c8 <adjustPH+0x104>)
 800250a:	f00f fdbf 	bl	801208c <puts>
            }

            pump_running = 0;          // 更新状态
 800250e:	4b2a      	ldr	r3, [pc, #168]	@ (80025b8 <adjustPH+0xf4>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
            current_pump_type = 0;     // 清空泵类型
 8002514:	4b2a      	ldr	r3, [pc, #168]	@ (80025c0 <adjustPH+0xfc>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
            pump_stop_time = now;      // 记录停止时间
 800251a:	4a2c      	ldr	r2, [pc, #176]	@ (80025cc <adjustPH+0x108>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6013      	str	r3, [r2, #0]
        }
        return; // 正在运行时，不再判断 pH
 8002520:	e044      	b.n	80025ac <adjustPH+0xe8>
    }

    // 冷却时间内，不允许再次启动
    if (now - pump_stop_time < PUMP_COOLDOWN) {
 8002522:	4b2a      	ldr	r3, [pc, #168]	@ (80025cc <adjustPH+0x108>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	4a29      	ldr	r2, [pc, #164]	@ (80025d0 <adjustPH+0x10c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d93f      	bls.n	80025b0 <adjustPH+0xec>
        return;
    }

    // 检查 pH 偏差，决定是否启动泵
    if (ph_current < (ph_set - deadband)) {
 8002530:	4b28      	ldr	r3, [pc, #160]	@ (80025d4 <adjustPH+0x110>)
 8002532:	ed93 7a00 	vldr	s14, [r3]
 8002536:	4b28      	ldr	r3, [pc, #160]	@ (80025d8 <adjustPH+0x114>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002540:	4b26      	ldr	r3, [pc, #152]	@ (80025dc <adjustPH+0x118>)
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	dd0e      	ble.n	800256e <adjustPH+0xaa>
        Start_AlkaliPump();
 8002550:	f000 fda4 	bl	800309c <Start_AlkaliPump>
        pump_running = 1;
 8002554:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <adjustPH+0xf4>)
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
        current_pump_type = 2;  // 标记为碱泵
 800255a:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <adjustPH+0xfc>)
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
        pump_start_time = now;
 8002560:	4a16      	ldr	r2, [pc, #88]	@ (80025bc <adjustPH+0xf8>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
        printf("Alkali_PUMP_START\n");
 8002566:	481e      	ldr	r0, [pc, #120]	@ (80025e0 <adjustPH+0x11c>)
 8002568:	f00f fd90 	bl	801208c <puts>
 800256c:	e021      	b.n	80025b2 <adjustPH+0xee>
    }
    else if (ph_current > (ph_set + deadband)) {
 800256e:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <adjustPH+0x110>)
 8002570:	ed93 7a00 	vldr	s14, [r3]
 8002574:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <adjustPH+0x114>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800257e:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <adjustPH+0x118>)
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258c:	d511      	bpl.n	80025b2 <adjustPH+0xee>
        Start_AcidPump();
 800258e:	f000 fcb1 	bl	8002ef4 <Start_AcidPump>
        pump_running = 1;
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <adjustPH+0xf4>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
        current_pump_type = 1;  // 标记为酸泵
 8002598:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <adjustPH+0xfc>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
        pump_start_time = now;
 800259e:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <adjustPH+0xf8>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]
        printf("Acid_PUMP_START\n");
 80025a4:	480f      	ldr	r0, [pc, #60]	@ (80025e4 <adjustPH+0x120>)
 80025a6:	f00f fd71 	bl	801208c <puts>
 80025aa:	e002      	b.n	80025b2 <adjustPH+0xee>
        return; // 正在运行时，不再判断 pH
 80025ac:	bf00      	nop
 80025ae:	e000      	b.n	80025b2 <adjustPH+0xee>
        return;
 80025b0:	bf00      	nop
    }
}
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	24000668 	.word	0x24000668
 80025bc:	2400066c 	.word	0x2400066c
 80025c0:	24000663 	.word	0x24000663
 80025c4:	08015d48 	.word	0x08015d48
 80025c8:	08015d58 	.word	0x08015d58
 80025cc:	24000670 	.word	0x24000670
 80025d0:	0002bf1f 	.word	0x0002bf1f
 80025d4:	2400000c 	.word	0x2400000c
 80025d8:	24000014 	.word	0x24000014
 80025dc:	24000664 	.word	0x24000664
 80025e0:	08015d6c 	.word	0x08015d6c
 80025e4:	08015d80 	.word	0x08015d80

080025e8 <Task_PH>:


// ========== pH 任务主函数 ==========
void Task_PH(void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
    requestPH();
 80025ee:	f7ff fec5 	bl	800237c <requestPH>

    uint32_t timeout = HAL_GetTick();
 80025f2:	f002 fdd7 	bl	80051a4 <HAL_GetTick>
 80025f6:	6078      	str	r0, [r7, #4]
    while(!rx_ph_flag && (HAL_GetTick() - timeout) < 100) {}
 80025f8:	bf00      	nop
 80025fa:	4b57      	ldr	r3, [pc, #348]	@ (8002758 <Task_PH+0x170>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <Task_PH+0x28>
 8002602:	f002 fdcf 	bl	80051a4 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b63      	cmp	r3, #99	@ 0x63
 800260e:	d9f4      	bls.n	80025fa <Task_PH+0x12>

    if(rx_ph_flag) {
 8002610:	4b51      	ldr	r3, [pc, #324]	@ (8002758 <Task_PH+0x170>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8095 	beq.w	8002744 <Task_PH+0x15c>
        readPH();
 800261a:	f7ff fee5 	bl	80023e8 <readPH>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rx_data3, sizeof(rx_data3));
 800261e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002622:	494e      	ldr	r1, [pc, #312]	@ (800275c <Task_PH+0x174>)
 8002624:	484e      	ldr	r0, [pc, #312]	@ (8002760 <Task_PH+0x178>)
 8002626:	f00e fd23 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 800262a:	4b4d      	ldr	r3, [pc, #308]	@ (8002760 <Task_PH+0x178>)
 800262c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a4c      	ldr	r2, [pc, #304]	@ (8002764 <Task_PH+0x17c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d068      	beq.n	800270a <Task_PH+0x122>
 8002638:	4b49      	ldr	r3, [pc, #292]	@ (8002760 <Task_PH+0x178>)
 800263a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a49      	ldr	r2, [pc, #292]	@ (8002768 <Task_PH+0x180>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d061      	beq.n	800270a <Task_PH+0x122>
 8002646:	4b46      	ldr	r3, [pc, #280]	@ (8002760 <Task_PH+0x178>)
 8002648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a47      	ldr	r2, [pc, #284]	@ (800276c <Task_PH+0x184>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d05a      	beq.n	800270a <Task_PH+0x122>
 8002654:	4b42      	ldr	r3, [pc, #264]	@ (8002760 <Task_PH+0x178>)
 8002656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a44      	ldr	r2, [pc, #272]	@ (8002770 <Task_PH+0x188>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d053      	beq.n	800270a <Task_PH+0x122>
 8002662:	4b3f      	ldr	r3, [pc, #252]	@ (8002760 <Task_PH+0x178>)
 8002664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a42      	ldr	r2, [pc, #264]	@ (8002774 <Task_PH+0x18c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04c      	beq.n	800270a <Task_PH+0x122>
 8002670:	4b3b      	ldr	r3, [pc, #236]	@ (8002760 <Task_PH+0x178>)
 8002672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a3f      	ldr	r2, [pc, #252]	@ (8002778 <Task_PH+0x190>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d045      	beq.n	800270a <Task_PH+0x122>
 800267e:	4b38      	ldr	r3, [pc, #224]	@ (8002760 <Task_PH+0x178>)
 8002680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a3d      	ldr	r2, [pc, #244]	@ (800277c <Task_PH+0x194>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d03e      	beq.n	800270a <Task_PH+0x122>
 800268c:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <Task_PH+0x178>)
 800268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a3a      	ldr	r2, [pc, #232]	@ (8002780 <Task_PH+0x198>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d037      	beq.n	800270a <Task_PH+0x122>
 800269a:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <Task_PH+0x178>)
 800269c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a38      	ldr	r2, [pc, #224]	@ (8002784 <Task_PH+0x19c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d030      	beq.n	800270a <Task_PH+0x122>
 80026a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002760 <Task_PH+0x178>)
 80026aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a35      	ldr	r2, [pc, #212]	@ (8002788 <Task_PH+0x1a0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d029      	beq.n	800270a <Task_PH+0x122>
 80026b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002760 <Task_PH+0x178>)
 80026b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a33      	ldr	r2, [pc, #204]	@ (800278c <Task_PH+0x1a4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d022      	beq.n	800270a <Task_PH+0x122>
 80026c4:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <Task_PH+0x178>)
 80026c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a30      	ldr	r2, [pc, #192]	@ (8002790 <Task_PH+0x1a8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01b      	beq.n	800270a <Task_PH+0x122>
 80026d2:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <Task_PH+0x178>)
 80026d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2e      	ldr	r2, [pc, #184]	@ (8002794 <Task_PH+0x1ac>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d014      	beq.n	800270a <Task_PH+0x122>
 80026e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002760 <Task_PH+0x178>)
 80026e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002798 <Task_PH+0x1b0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <Task_PH+0x122>
 80026ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002760 <Task_PH+0x178>)
 80026f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a29      	ldr	r2, [pc, #164]	@ (800279c <Task_PH+0x1b4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d006      	beq.n	800270a <Task_PH+0x122>
 80026fc:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <Task_PH+0x178>)
 80026fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a26      	ldr	r2, [pc, #152]	@ (80027a0 <Task_PH+0x1b8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d10c      	bne.n	8002724 <Task_PH+0x13c>
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <Task_PH+0x178>)
 800270c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <Task_PH+0x178>)
 8002716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0208 	bic.w	r2, r2, #8
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e00b      	b.n	800273c <Task_PH+0x154>
 8002724:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <Task_PH+0x178>)
 8002726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <Task_PH+0x178>)
 8002730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0204 	bic.w	r2, r2, #4
 800273a:	601a      	str	r2, [r3, #0]
        rx_ph_flag = 0;
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <Task_PH+0x170>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e002      	b.n	800274a <Task_PH+0x162>
    } else {
        printf("pH 接收超时\r\n");
 8002744:	4817      	ldr	r0, [pc, #92]	@ (80027a4 <Task_PH+0x1bc>)
 8002746:	f00f fca1 	bl	801208c <puts>
    }

    adjustPH();
 800274a:	f7ff febb 	bl	80024c4 <adjustPH>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	24000874 	.word	0x24000874
 800275c:	24000674 	.word	0x24000674
 8002760:	24000f28 	.word	0x24000f28
 8002764:	40020010 	.word	0x40020010
 8002768:	40020028 	.word	0x40020028
 800276c:	40020040 	.word	0x40020040
 8002770:	40020058 	.word	0x40020058
 8002774:	40020070 	.word	0x40020070
 8002778:	40020088 	.word	0x40020088
 800277c:	400200a0 	.word	0x400200a0
 8002780:	400200b8 	.word	0x400200b8
 8002784:	40020410 	.word	0x40020410
 8002788:	40020428 	.word	0x40020428
 800278c:	40020440 	.word	0x40020440
 8002790:	40020458 	.word	0x40020458
 8002794:	40020470 	.word	0x40020470
 8002798:	40020488 	.word	0x40020488
 800279c:	400204a0 	.word	0x400204a0
 80027a0:	400204b8 	.word	0x400204b8
 80027a4:	08015d90 	.word	0x08015d90

080027a8 <PID_Init>:
#include "pid.h"
#include "stdio.h"
#include "stm32h7xx_hal.h"

// ================= PID 初始化 =================
void PID_Init(PID_HandleTypeDef *pid, float Kp, float Ki, float Kd, float min, float max) {
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6178      	str	r0, [r7, #20]
 80027b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80027b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80027b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80027bc:	edc7 1a01 	vstr	s3, [r7, #4]
 80027c0:	ed87 2a00 	vstr	s4, [r7]
    pid->params.Kp = Kp;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	601a      	str	r2, [r3, #0]
    pid->params.Ki = Ki;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
    pid->params.Kd = Kd;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	609a      	str	r2, [r3, #8]
    pid->setpoint = 0.0f;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
    pid->last_error = 0.0f;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
    pid->integral = 0.0f;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
    pid->output_min = min;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
    pid->output_max = max;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	61da      	str	r2, [r3, #28]
    pid->last_pv = 0.0f;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <PID_Calculate>:

// ================= PID 计算 =================
float PID_Calculate(PID_HandleTypeDef *pid, float setpoint, float pv, float dt) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b092      	sub	sp, #72	@ 0x48
 8002814:	af08      	add	r7, sp, #32
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	ed87 0a02 	vstr	s0, [r7, #8]
 800281c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002820:	ed87 1a00 	vstr	s2, [r7]
    pid->setpoint = setpoint;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	60da      	str	r2, [r3, #12]
    float error = setpoint - pv;
 800282a:	ed97 7a02 	vldr	s14, [r7, #8]
 800282e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002836:	edc7 7a08 	vstr	s15, [r7, #32]

    // --- 改进积分抗饱和 ---
    if (fabsf(error) < 0.3f) {   // 仅在误差较小时积累积分
 800283a:	edd7 7a08 	vldr	s15, [r7, #32]
 800283e:	eef0 7ae7 	vabs.f32	s15, s15
 8002842:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80029e0 <PID_Calculate+0x1d0>
 8002846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	d513      	bpl.n	8002878 <PID_Calculate+0x68>
        pid->integral += pid->params.Ki * error * dt;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	ed93 7a05 	vldr	s14, [r3, #20]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	edd3 6a01 	vldr	s13, [r3, #4]
 800285c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002860:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002864:	edd7 7a00 	vldr	s15, [r7]
 8002868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	edc3 7a05 	vstr	s15, [r3, #20]
 8002876:	e009      	b.n	800288c <PID_Calculate+0x7c>
    } else {
        pid->integral *= 0.9f;   // 误差大时衰减积分
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	edd3 7a05 	vldr	s15, [r3, #20]
 800287e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80029e4 <PID_Calculate+0x1d4>
 8002882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    // --- 自适应积分限幅（积分不超过输出的30%） ---
    float Imax = pid->output_max * 0.3f;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002892:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80029e0 <PID_Calculate+0x1d0>
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (pid->integral > Imax) pid->integral = Imax;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80028a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80028a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	d502      	bpl.n	80028b8 <PID_Calculate+0xa8>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	615a      	str	r2, [r3, #20]
    if (pid->integral < -Imax) pid->integral = -Imax;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80028be:	edd7 7a07 	vldr	s15, [r7, #28]
 80028c2:	eef1 7a67 	vneg.f32	s15, s15
 80028c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	d506      	bpl.n	80028de <PID_Calculate+0xce>
 80028d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80028d4:	eef1 7a67 	vneg.f32	s15, s15
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	edc3 7a05 	vstr	s15, [r3, #20]

    // --- 微分项低通滤波 ---
    float derivative_raw = (error - pid->last_error) / dt;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80028e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80028e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028ec:	ed97 7a00 	vldr	s14, [r7]
 80028f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028f4:	edc7 7a06 	vstr	s15, [r7, #24]
    static float derivative_filt = 0.0f;
    derivative_filt += (derivative_raw - derivative_filt) * 0.1f;
 80028f8:	4b3b      	ldr	r3, [pc, #236]	@ (80029e8 <PID_Calculate+0x1d8>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8002902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002906:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80029ec <PID_Calculate+0x1dc>
 800290a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800290e:	4b36      	ldr	r3, [pc, #216]	@ (80029e8 <PID_Calculate+0x1d8>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002918:	4b33      	ldr	r3, [pc, #204]	@ (80029e8 <PID_Calculate+0x1d8>)
 800291a:	edc3 7a00 	vstr	s15, [r3]
    float derivative = derivative_filt;
 800291e:	4b32      	ldr	r3, [pc, #200]	@ (80029e8 <PID_Calculate+0x1d8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]

    pid->last_error = error;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a3a      	ldr	r2, [r7, #32]
 8002928:	611a      	str	r2, [r3, #16]

    // --- PID 输出计算 ---
    float output = pid->params.Kp * error + pid->integral + pid->params.Kd * derivative;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	edd7 7a08 	vldr	s15, [r7, #32]
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	edd3 7a05 	vldr	s15, [r3, #20]
 800293e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	edd3 6a02 	vldr	s13, [r3, #8]
 8002948:	edd7 7a05 	vldr	s15, [r7, #20]
 800294c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002954:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // 输出限幅
    if (output > pid->output_max) output = pid->output_max;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	edd3 7a07 	vldr	s15, [r3, #28]
 800295e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296a:	dd02      	ble.n	8002972 <PID_Calculate+0x162>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
    if (output < pid->output_min) output = pid->output_min;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	edd3 7a06 	vldr	s15, [r3, #24]
 8002978:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800297c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	d502      	bpl.n	800298c <PID_Calculate+0x17c>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24

    printf("[PID] SP=%.2f, PV=%.2f, Err=%.3f, Out=%.2f, I=%.3f\r\n",
 800298c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002990:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8002994:	edd7 7a01 	vldr	s15, [r7, #4]
 8002998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800299c:	edd7 6a08 	vldr	s13, [r7, #32]
 80029a0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80029a4:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 80029a8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
           setpoint, pv, error, output, pid->integral);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	edd3 4a05 	vldr	s9, [r3, #20]
    printf("[PID] SP=%.2f, PV=%.2f, Err=%.3f, Out=%.2f, I=%.3f\r\n",
 80029b2:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80029b6:	ed8d 4b06 	vstr	d4, [sp, #24]
 80029ba:	ed8d 5b04 	vstr	d5, [sp, #16]
 80029be:	ed8d 6b02 	vstr	d6, [sp, #8]
 80029c2:	ed8d 7b00 	vstr	d7, [sp]
 80029c6:	ec53 2b13 	vmov	r2, r3, d3
 80029ca:	4809      	ldr	r0, [pc, #36]	@ (80029f0 <PID_Calculate+0x1e0>)
 80029cc:	f00f faee 	bl	8011fac <iprintf>

    return output;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	ee07 3a90 	vmov	s15, r3
}
 80029d6:	eeb0 0a67 	vmov.f32	s0, s15
 80029da:	3728      	adds	r7, #40	@ 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	3e99999a 	.word	0x3e99999a
 80029e4:	3f666666 	.word	0x3f666666
 80029e8:	24000878 	.word	0x24000878
 80029ec:	3dcccccd 	.word	0x3dcccccd
 80029f0:	08015da4 	.word	0x08015da4

080029f4 <PID_UpdateParams>:

// ================= 更新 PID 参数 =================
void PID_UpdateParams(PID_HandleTypeDef *pid, float Kp, float Ki, float Kd) {
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a00:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a04:	ed87 1a00 	vstr	s2, [r7]
    pid->params.Kp = Kp;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	601a      	str	r2, [r3, #0]
    pid->params.Ki = Ki;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	605a      	str	r2, [r3, #4]
    pid->params.Kd = Kd;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	609a      	str	r2, [r3, #8]
    pid->integral = 0;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	615a      	str	r2, [r3, #20]
    pid->last_error = 0;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <PID_SelfAdjust>:

// ================= 自适应微调（防止长期偏差） =================
void PID_SelfAdjust(PID_HandleTypeDef *pid, float error, float dTemp) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a44:	edc7 0a01 	vstr	s1, [r7, #4]
    if (fabsf(error) < 0.3f && fabsf(dTemp) < 0.02f) {
 8002a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a4c:	eef0 7ae7 	vabs.f32	s15, s15
 8002a50:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002af8 <PID_SelfAdjust+0xc0>
 8002a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5c:	d515      	bpl.n	8002a8a <PID_SelfAdjust+0x52>
 8002a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a62:	eef0 7ae7 	vabs.f32	s15, s15
 8002a66:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002afc <PID_SelfAdjust+0xc4>
 8002a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a72:	d50a      	bpl.n	8002a8a <PID_SelfAdjust+0x52>
        pid->params.Kp *= 0.999f;   // 逐步降低Kp防止过冲
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002b00 <PID_SelfAdjust+0xc8>
 8002a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	edc3 7a00 	vstr	s15, [r3]
 8002a88:	e014      	b.n	8002ab4 <PID_SelfAdjust+0x7c>
    } else if (fabsf(error) > 0.5f) {
 8002a8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a8e:	eef0 7ae7 	vabs.f32	s15, s15
 8002a92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9e:	dd09      	ble.n	8002ab4 <PID_SelfAdjust+0x7c>
        pid->params.Kp *= 1.002f;   // 稍微增强响应
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002b04 <PID_SelfAdjust+0xcc>
 8002aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	edc3 7a00 	vstr	s15, [r3]
    }

    // 限制范围
    if (pid->params.Kp < 1.0f) pid->params.Kp = 1.0f;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	d503      	bpl.n	8002ad0 <PID_SelfAdjust+0x98>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002ace:	601a      	str	r2, [r3, #0]
    if (pid->params.Kp > 20.0f) pid->params.Kp = 20.0f;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae2:	dc00      	bgt.n	8002ae6 <PID_SelfAdjust+0xae>
}
 8002ae4:	e002      	b.n	8002aec <PID_SelfAdjust+0xb4>
    if (pid->params.Kp > 20.0f) pid->params.Kp = 20.0f;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a07      	ldr	r2, [pc, #28]	@ (8002b08 <PID_SelfAdjust+0xd0>)
 8002aea:	601a      	str	r2, [r3, #0]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	3e99999a 	.word	0x3e99999a
 8002afc:	3ca3d70a 	.word	0x3ca3d70a
 8002b00:	3f7fbe77 	.word	0x3f7fbe77
 8002b04:	3f804189 	.word	0x3f804189
 8002b08:	41a00000 	.word	0x41a00000

08002b0c <PID_AutoTune_Init>:


void PID_AutoTune_Init(AutoTuneHandle *h, PID_Params_t *p, float (*readTemp)(void),
                      void (*relayCtrl)(uint8_t), float target, uint32_t duration) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6178      	str	r0, [r7, #20]
 8002b14:	6139      	str	r1, [r7, #16]
 8002b16:	60fa      	str	r2, [r7, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	ed87 0a01 	vstr	s0, [r7, #4]
    h->state = TUNE_START;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
    h->params = p;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	605a      	str	r2, [r3, #4]
    h->readTemp = readTemp;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	609a      	str	r2, [r3, #8]
    h->relayCtrl = relayCtrl;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	60da      	str	r2, [r3, #12]
    h->target = target;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	611a      	str	r2, [r3, #16]
    h->duration = duration;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	6a3a      	ldr	r2, [r7, #32]
 8002b40:	615a      	str	r2, [r3, #20]
    h->start_time = HAL_GetTick();
 8002b42:	f002 fb2f 	bl	80051a4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	619a      	str	r2, [r3, #24]
    h->last_switch = h->start_time;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	61da      	str	r2, [r3, #28]
    h->last_cross_time = 0;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	621a      	str	r2, [r3, #32]
    h->period_accum = 0;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    h->period_count = 0;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2200      	movs	r2, #0
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28
    h->temp_max = -1000.0f;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4a0c      	ldr	r2, [pc, #48]	@ (8002b9c <PID_AutoTune_Init+0x90>)
 8002b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    h->temp_min = 1000.0f;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <PID_AutoTune_Init+0x94>)
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30
    h->last_temp = readTemp();
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4798      	blx	r3
 8002b76:	eef0 7a40 	vmov.f32	s15, s0
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    h->relay_state = 1;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    relayCtrl(1);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	4798      	blx	r3
    printf("=== PID AutoTune Start ===\r\n");
 8002b8e:	4805      	ldr	r0, [pc, #20]	@ (8002ba4 <PID_AutoTune_Init+0x98>)
 8002b90:	f00f fa7c 	bl	801208c <puts>
}
 8002b94:	bf00      	nop
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	c47a0000 	.word	0xc47a0000
 8002ba0:	447a0000 	.word	0x447a0000
 8002ba4:	08015ddc 	.word	0x08015ddc

08002ba8 <PID_AutoTune_Task>:

void PID_AutoTune_Task(AutoTuneHandle *h) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b094      	sub	sp, #80	@ 0x50
 8002bac:	af08      	add	r7, sp, #32
 8002bae:	6078      	str	r0, [r7, #4]
    if (h->state == TUNE_IDLE) return;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8194 	beq.w	8002ee2 <PID_AutoTune_Task+0x33a>
    uint32_t now = HAL_GetTick();
 8002bba:	f002 faf3 	bl	80051a4 <HAL_GetTick>
 8002bbe:	62f8      	str	r0, [r7, #44]	@ 0x2c
    float temp = h->readTemp();
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4798      	blx	r3
 8002bc6:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (temp <= -50.0f) return;
 8002bca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002bce:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8002e9c <PID_AutoTune_Task+0x2f4>
 8002bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bda:	f240 8184 	bls.w	8002ee6 <PID_AutoTune_Task+0x33e>

    // 记录最大最小温度
    if (temp > h->temp_max) h->temp_max = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002be4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002be8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf0:	dd02      	ble.n	8002bf8 <PID_AutoTune_Task+0x50>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (temp < h->temp_min) h->temp_min = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002bfe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d502      	bpl.n	8002c12 <PID_AutoTune_Task+0x6a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c10:	631a      	str	r2, [r3, #48]	@ 0x30

    float amplitude = (h->temp_max - h->temp_min) / 2.0f;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c22:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // --- 计算振荡周期 ---
    float mid = (h->temp_max + h->temp_min) / 2.0f;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c3e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c46:	edc7 7a08 	vstr	s15, [r7, #32]
    if ((h->last_temp < mid && temp >= mid) || (h->last_temp > mid && temp <= mid)) {
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002c50:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	dd08      	ble.n	8002c70 <PID_AutoTune_Task+0xc8>
 8002c5e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002c62:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6e:	da12      	bge.n	8002c96 <PID_AutoTune_Task+0xee>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002c76:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c82:	d51d      	bpl.n	8002cc0 <PID_AutoTune_Task+0x118>
 8002c84:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002c88:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	d814      	bhi.n	8002cc0 <PID_AutoTune_Task+0x118>
        if (h->last_cross_time != 0) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <PID_AutoTune_Task+0x112>
            h->period_accum += now - h->last_cross_time;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ca8:	1acb      	subs	r3, r1, r3
 8002caa:	441a      	add	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	625a      	str	r2, [r3, #36]	@ 0x24
            h->period_count++;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        h->last_cross_time = now;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cbe:	621a      	str	r2, [r3, #32]
    }

    // --- 自适应继电器切换 ---
    if (fabs(temp - h->target) > 0.3f) {
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cc6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cce:	eef0 7ae7 	vabs.f32	s15, s15
 8002cd2:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8002ea0 <PID_AutoTune_Task+0x2f8>
 8002cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cde:	dd18      	ble.n	8002d12 <PID_AutoTune_Task+0x16a>
        // 温差大时加热时间长
        if (now - h->last_switch > 4000)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002cec:	d924      	bls.n	8002d38 <PID_AutoTune_Task+0x190>
            h->relay_state = (temp < h->target);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cf4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d00:	bf4c      	ite	mi
 8002d02:	2301      	movmi	r3, #1
 8002d04:	2300      	movpl	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002d10:	e012      	b.n	8002d38 <PID_AutoTune_Task+0x190>
    } else {
        // 温差小，减少扰动
        if (now - h->last_switch > 8000)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002d1e:	d90b      	bls.n	8002d38 <PID_AutoTune_Task+0x190>
            h->relay_state = !h->relay_state;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    h->relayCtrl(h->relay_state);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8002d42:	4610      	mov	r0, r2
 8002d44:	4798      	blx	r3
    h->last_switch = now;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d4a:	61da      	str	r2, [r3, #28]

    h->last_temp = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d50:	635a      	str	r2, [r3, #52]	@ 0x34

    // --- 判断收敛 ---
    if (h->period_count >= 6) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	f240 80b0 	bls.w	8002ebc <PID_AutoTune_Task+0x314>
        float avg_period = (float)h->period_accum / h->period_count / 1000.0f;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d78:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002ea4 <PID_AutoTune_Task+0x2fc>
 8002d7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d80:	edc7 7a07 	vstr	s15, [r7, #28]
        float Ku = (4.0f * 1.0f) / (3.14159f * amplitude);
 8002d84:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d88:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002ea8 <PID_AutoTune_Task+0x300>
 8002d8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d90:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d98:	edc7 7a06 	vstr	s15, [r7, #24]
        float Kp = 0.33f * Ku;
 8002d9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002da0:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002eac <PID_AutoTune_Task+0x304>
 8002da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da8:	edc7 7a05 	vstr	s15, [r7, #20]
        float Ki = 2.0f * Kp / avg_period;
 8002dac:	edd7 7a05 	vldr	s15, [r7, #20]
 8002db0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002db4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dbc:	edc7 7a04 	vstr	s15, [r7, #16]
        float Kd = Kp * avg_period / 3.0f;
 8002dc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dcc:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd4:	edc7 7a03 	vstr	s15, [r7, #12]

        // 如果振荡幅度连续3次下降，认为收敛
        static float prev_amp[3] = {0};
        prev_amp[0] = prev_amp[1];
 8002dd8:	4b35      	ldr	r3, [pc, #212]	@ (8002eb0 <PID_AutoTune_Task+0x308>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a34      	ldr	r2, [pc, #208]	@ (8002eb0 <PID_AutoTune_Task+0x308>)
 8002dde:	6013      	str	r3, [r2, #0]
        prev_amp[1] = prev_amp[2];
 8002de0:	4b33      	ldr	r3, [pc, #204]	@ (8002eb0 <PID_AutoTune_Task+0x308>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a32      	ldr	r2, [pc, #200]	@ (8002eb0 <PID_AutoTune_Task+0x308>)
 8002de6:	6053      	str	r3, [r2, #4]
        prev_amp[2] = amplitude;
 8002de8:	4a31      	ldr	r2, [pc, #196]	@ (8002eb0 <PID_AutoTune_Task+0x308>)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	6093      	str	r3, [r2, #8]

        if (prev_amp[0] > prev_amp[1] && prev_amp[1] > prev_amp[2] && amplitude < 0.3f) {
 8002dee:	4b30      	ldr	r3, [pc, #192]	@ (8002eb0 <PID_AutoTune_Task+0x308>)
 8002df0:	ed93 7a00 	vldr	s14, [r3]
 8002df4:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb0 <PID_AutoTune_Task+0x308>)
 8002df6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e02:	dd5b      	ble.n	8002ebc <PID_AutoTune_Task+0x314>
 8002e04:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb0 <PID_AutoTune_Task+0x308>)
 8002e06:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e0a:	4b29      	ldr	r3, [pc, #164]	@ (8002eb0 <PID_AutoTune_Task+0x308>)
 8002e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e18:	dd50      	ble.n	8002ebc <PID_AutoTune_Task+0x314>
 8002e1a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e1e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002ea0 <PID_AutoTune_Task+0x2f8>
 8002e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	d547      	bpl.n	8002ebc <PID_AutoTune_Task+0x314>
            h->params->Kp = Kp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	601a      	str	r2, [r3, #0]
            h->params->Ki = Ki;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	605a      	str	r2, [r3, #4]
            h->params->Kd = Kd;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	609a      	str	r2, [r3, #8]
            printf("=== AutoTune Converged ===\r\n");
 8002e44:	481b      	ldr	r0, [pc, #108]	@ (8002eb4 <PID_AutoTune_Task+0x30c>)
 8002e46:	f00f f921 	bl	801208c <puts>
            printf("Kp=%.3f, Ki=%.3f, Kd=%.3f, Tu=%.2fs, Amp=%.2f\r\n",
 8002e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e4e:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8002e52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e5a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e5e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e62:	edd7 5a07 	vldr	s11, [r7, #28]
 8002e66:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002e6a:	edd7 4a09 	vldr	s9, [r7, #36]	@ 0x24
 8002e6e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8002e72:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002e76:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002e7a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e7e:	ed8d 7b00 	vstr	d7, [sp]
 8002e82:	ec53 2b13 	vmov	r2, r3, d3
 8002e86:	480c      	ldr	r0, [pc, #48]	@ (8002eb8 <PID_AutoTune_Task+0x310>)
 8002e88:	f00f f890 	bl	8011fac <iprintf>
                   Kp, Ki, Kd, avg_period, amplitude);
            h->relayCtrl(0);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2000      	movs	r0, #0
 8002e92:	4798      	blx	r3
            h->state = TUNE_IDLE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
            return;
 8002e9a:	e025      	b.n	8002ee8 <PID_AutoTune_Task+0x340>
 8002e9c:	c2480000 	.word	0xc2480000
 8002ea0:	3e99999a 	.word	0x3e99999a
 8002ea4:	447a0000 	.word	0x447a0000
 8002ea8:	40490fd0 	.word	0x40490fd0
 8002eac:	3ea8f5c3 	.word	0x3ea8f5c3
 8002eb0:	2400087c 	.word	0x2400087c
 8002eb4:	08015df8 	.word	0x08015df8
 8002eb8:	08015e14 	.word	0x08015e14
        }
    }

    // 超时保护
    if (now - h->start_time > h->duration) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d90d      	bls.n	8002ee8 <PID_AutoTune_Task+0x340>
        h->relayCtrl(0);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	4798      	blx	r3
        h->state = TUNE_IDLE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
        printf("[AutoTune] Timeout - keeping last PID.\r\n");
 8002eda:	4805      	ldr	r0, [pc, #20]	@ (8002ef0 <PID_AutoTune_Task+0x348>)
 8002edc:	f00f f8d6 	bl	801208c <puts>
 8002ee0:	e002      	b.n	8002ee8 <PID_AutoTune_Task+0x340>
    if (h->state == TUNE_IDLE) return;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <PID_AutoTune_Task+0x340>
    if (temp <= -50.0f) return;
 8002ee6:	bf00      	nop
    }
}
 8002ee8:	3730      	adds	r7, #48	@ 0x30
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	08015e44 	.word	0x08015e44

08002ef4 <Start_AcidPump>:
uint8_t rx_pump_flag = 0;


// ================= 启动泵 =================
void Start_AcidPump(void)//地址是01
{
 8002ef4:	b5b0      	push	{r4, r5, r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
    uint8_t sendBuffer[] = {
 8002efa:	4b54      	ldr	r3, [pc, #336]	@ (800304c <Start_AcidPump+0x158>)
 8002efc:	1d3c      	adds	r4, r7, #4
 8002efe:	461d      	mov	r5, r3
 8002f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	7023      	strb	r3, [r4, #0]
        0x01, 0x10, 0x00, 0x60, 0x00, 0x04, 0x08,
        0x00, 0x00, 0x0B, 0xB8, 0x01, 0x2C, 0x00, 0x64, 0x56, 0x44
    };

    tx_pump_flag = 0;
 8002f08:	4b51      	ldr	r3, [pc, #324]	@ (8003050 <Start_AcidPump+0x15c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart6, sendBuffer, sizeof(sendBuffer));
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	2211      	movs	r2, #17
 8002f12:	4619      	mov	r1, r3
 8002f14:	484f      	ldr	r0, [pc, #316]	@ (8003054 <Start_AcidPump+0x160>)
 8002f16:	f00c f961 	bl	800f1dc <HAL_UART_Transmit_DMA>
    while (tx_pump_flag == 0) {}  // 等待发送完成
 8002f1a:	bf00      	nop
 8002f1c:	4b4c      	ldr	r3, [pc, #304]	@ (8003050 <Start_AcidPump+0x15c>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0fb      	beq.n	8002f1c <Start_AcidPump+0x28>
    // 开启接收
    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_data6, sizeof(rx_data6));
 8002f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f28:	494b      	ldr	r1, [pc, #300]	@ (8003058 <Start_AcidPump+0x164>)
 8002f2a:	484a      	ldr	r0, [pc, #296]	@ (8003054 <Start_AcidPump+0x160>)
 8002f2c:	f00e f8a0 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8002f30:	4b48      	ldr	r3, [pc, #288]	@ (8003054 <Start_AcidPump+0x160>)
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a48      	ldr	r2, [pc, #288]	@ (800305c <Start_AcidPump+0x168>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d068      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002f3e:	4b45      	ldr	r3, [pc, #276]	@ (8003054 <Start_AcidPump+0x160>)
 8002f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a46      	ldr	r2, [pc, #280]	@ (8003060 <Start_AcidPump+0x16c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d061      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002f4c:	4b41      	ldr	r3, [pc, #260]	@ (8003054 <Start_AcidPump+0x160>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a43      	ldr	r2, [pc, #268]	@ (8003064 <Start_AcidPump+0x170>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d05a      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003054 <Start_AcidPump+0x160>)
 8002f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a41      	ldr	r2, [pc, #260]	@ (8003068 <Start_AcidPump+0x174>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d053      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002f68:	4b3a      	ldr	r3, [pc, #232]	@ (8003054 <Start_AcidPump+0x160>)
 8002f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3e      	ldr	r2, [pc, #248]	@ (800306c <Start_AcidPump+0x178>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d04c      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002f76:	4b37      	ldr	r3, [pc, #220]	@ (8003054 <Start_AcidPump+0x160>)
 8002f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a3c      	ldr	r2, [pc, #240]	@ (8003070 <Start_AcidPump+0x17c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d045      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002f84:	4b33      	ldr	r3, [pc, #204]	@ (8003054 <Start_AcidPump+0x160>)
 8002f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a39      	ldr	r2, [pc, #228]	@ (8003074 <Start_AcidPump+0x180>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d03e      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002f92:	4b30      	ldr	r3, [pc, #192]	@ (8003054 <Start_AcidPump+0x160>)
 8002f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a37      	ldr	r2, [pc, #220]	@ (8003078 <Start_AcidPump+0x184>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d037      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003054 <Start_AcidPump+0x160>)
 8002fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a34      	ldr	r2, [pc, #208]	@ (800307c <Start_AcidPump+0x188>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d030      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002fae:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <Start_AcidPump+0x160>)
 8002fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a32      	ldr	r2, [pc, #200]	@ (8003080 <Start_AcidPump+0x18c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d029      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002fbc:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <Start_AcidPump+0x160>)
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8003084 <Start_AcidPump+0x190>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d022      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002fca:	4b22      	ldr	r3, [pc, #136]	@ (8003054 <Start_AcidPump+0x160>)
 8002fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <Start_AcidPump+0x194>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d01b      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <Start_AcidPump+0x160>)
 8002fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800308c <Start_AcidPump+0x198>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d014      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <Start_AcidPump+0x160>)
 8002fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a28      	ldr	r2, [pc, #160]	@ (8003090 <Start_AcidPump+0x19c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00d      	beq.n	8003010 <Start_AcidPump+0x11c>
 8002ff4:	4b17      	ldr	r3, [pc, #92]	@ (8003054 <Start_AcidPump+0x160>)
 8002ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <Start_AcidPump+0x1a0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d006      	beq.n	8003010 <Start_AcidPump+0x11c>
 8003002:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <Start_AcidPump+0x160>)
 8003004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a23      	ldr	r2, [pc, #140]	@ (8003098 <Start_AcidPump+0x1a4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10c      	bne.n	800302a <Start_AcidPump+0x136>
 8003010:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <Start_AcidPump+0x160>)
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <Start_AcidPump+0x160>)
 800301c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0208 	bic.w	r2, r2, #8
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e00c      	b.n	8003044 <Start_AcidPump+0x150>
 800302a:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <Start_AcidPump+0x160>)
 800302c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b07      	ldr	r3, [pc, #28]	@ (8003054 <Start_AcidPump+0x160>)
 8003036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0204 	bic.w	r2, r2, #4
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bdb0      	pop	{r4, r5, r7, pc}
 800304c:	08015e6c 	.word	0x08015e6c
 8003050:	24000a88 	.word	0x24000a88
 8003054:	24000fbc 	.word	0x24000fbc
 8003058:	24000888 	.word	0x24000888
 800305c:	40020010 	.word	0x40020010
 8003060:	40020028 	.word	0x40020028
 8003064:	40020040 	.word	0x40020040
 8003068:	40020058 	.word	0x40020058
 800306c:	40020070 	.word	0x40020070
 8003070:	40020088 	.word	0x40020088
 8003074:	400200a0 	.word	0x400200a0
 8003078:	400200b8 	.word	0x400200b8
 800307c:	40020410 	.word	0x40020410
 8003080:	40020428 	.word	0x40020428
 8003084:	40020440 	.word	0x40020440
 8003088:	40020458 	.word	0x40020458
 800308c:	40020470 	.word	0x40020470
 8003090:	40020488 	.word	0x40020488
 8003094:	400204a0 	.word	0x400204a0
 8003098:	400204b8 	.word	0x400204b8

0800309c <Start_AlkaliPump>:
void Start_AlkaliPump(void)//地址是02
{
 800309c:	b5b0      	push	{r4, r5, r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
    uint8_t sendBuffer[] = {
 80030a2:	4b54      	ldr	r3, [pc, #336]	@ (80031f4 <Start_AlkaliPump+0x158>)
 80030a4:	1d3c      	adds	r4, r7, #4
 80030a6:	461d      	mov	r5, r3
 80030a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030ac:	682b      	ldr	r3, [r5, #0]
 80030ae:	7023      	strb	r3, [r4, #0]
        0x02, 0x10, 0x00, 0x60, 0x00, 0x04, 0x08,
        0x00, 0x00, 0x0B, 0xB8, 0x01, 0x2C, 0x00, 0x64, 0x15, 0x45
    };

    tx_pump_flag = 0;
 80030b0:	4b51      	ldr	r3, [pc, #324]	@ (80031f8 <Start_AlkaliPump+0x15c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart6, sendBuffer, sizeof(sendBuffer));
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	2211      	movs	r2, #17
 80030ba:	4619      	mov	r1, r3
 80030bc:	484f      	ldr	r0, [pc, #316]	@ (80031fc <Start_AlkaliPump+0x160>)
 80030be:	f00c f88d 	bl	800f1dc <HAL_UART_Transmit_DMA>
    while (tx_pump_flag == 0) {}  // 等待发送完成
 80030c2:	bf00      	nop
 80030c4:	4b4c      	ldr	r3, [pc, #304]	@ (80031f8 <Start_AlkaliPump+0x15c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0fb      	beq.n	80030c4 <Start_AlkaliPump+0x28>

    // 开启接收
    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_data6, sizeof(rx_data6));
 80030cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030d0:	494b      	ldr	r1, [pc, #300]	@ (8003200 <Start_AlkaliPump+0x164>)
 80030d2:	484a      	ldr	r0, [pc, #296]	@ (80031fc <Start_AlkaliPump+0x160>)
 80030d4:	f00d ffcc 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 80030d8:	4b48      	ldr	r3, [pc, #288]	@ (80031fc <Start_AlkaliPump+0x160>)
 80030da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a48      	ldr	r2, [pc, #288]	@ (8003204 <Start_AlkaliPump+0x168>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d068      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 80030e6:	4b45      	ldr	r3, [pc, #276]	@ (80031fc <Start_AlkaliPump+0x160>)
 80030e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a46      	ldr	r2, [pc, #280]	@ (8003208 <Start_AlkaliPump+0x16c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d061      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 80030f4:	4b41      	ldr	r3, [pc, #260]	@ (80031fc <Start_AlkaliPump+0x160>)
 80030f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a43      	ldr	r2, [pc, #268]	@ (800320c <Start_AlkaliPump+0x170>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d05a      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 8003102:	4b3e      	ldr	r3, [pc, #248]	@ (80031fc <Start_AlkaliPump+0x160>)
 8003104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a41      	ldr	r2, [pc, #260]	@ (8003210 <Start_AlkaliPump+0x174>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d053      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 8003110:	4b3a      	ldr	r3, [pc, #232]	@ (80031fc <Start_AlkaliPump+0x160>)
 8003112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a3e      	ldr	r2, [pc, #248]	@ (8003214 <Start_AlkaliPump+0x178>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d04c      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 800311e:	4b37      	ldr	r3, [pc, #220]	@ (80031fc <Start_AlkaliPump+0x160>)
 8003120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a3c      	ldr	r2, [pc, #240]	@ (8003218 <Start_AlkaliPump+0x17c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d045      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 800312c:	4b33      	ldr	r3, [pc, #204]	@ (80031fc <Start_AlkaliPump+0x160>)
 800312e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a39      	ldr	r2, [pc, #228]	@ (800321c <Start_AlkaliPump+0x180>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03e      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 800313a:	4b30      	ldr	r3, [pc, #192]	@ (80031fc <Start_AlkaliPump+0x160>)
 800313c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a37      	ldr	r2, [pc, #220]	@ (8003220 <Start_AlkaliPump+0x184>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d037      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 8003148:	4b2c      	ldr	r3, [pc, #176]	@ (80031fc <Start_AlkaliPump+0x160>)
 800314a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a34      	ldr	r2, [pc, #208]	@ (8003224 <Start_AlkaliPump+0x188>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d030      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 8003156:	4b29      	ldr	r3, [pc, #164]	@ (80031fc <Start_AlkaliPump+0x160>)
 8003158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a32      	ldr	r2, [pc, #200]	@ (8003228 <Start_AlkaliPump+0x18c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d029      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 8003164:	4b25      	ldr	r3, [pc, #148]	@ (80031fc <Start_AlkaliPump+0x160>)
 8003166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2f      	ldr	r2, [pc, #188]	@ (800322c <Start_AlkaliPump+0x190>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d022      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 8003172:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <Start_AlkaliPump+0x160>)
 8003174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2d      	ldr	r2, [pc, #180]	@ (8003230 <Start_AlkaliPump+0x194>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d01b      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 8003180:	4b1e      	ldr	r3, [pc, #120]	@ (80031fc <Start_AlkaliPump+0x160>)
 8003182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2a      	ldr	r2, [pc, #168]	@ (8003234 <Start_AlkaliPump+0x198>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d014      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 800318e:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <Start_AlkaliPump+0x160>)
 8003190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a28      	ldr	r2, [pc, #160]	@ (8003238 <Start_AlkaliPump+0x19c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00d      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 800319c:	4b17      	ldr	r3, [pc, #92]	@ (80031fc <Start_AlkaliPump+0x160>)
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a25      	ldr	r2, [pc, #148]	@ (800323c <Start_AlkaliPump+0x1a0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d006      	beq.n	80031b8 <Start_AlkaliPump+0x11c>
 80031aa:	4b14      	ldr	r3, [pc, #80]	@ (80031fc <Start_AlkaliPump+0x160>)
 80031ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a23      	ldr	r2, [pc, #140]	@ (8003240 <Start_AlkaliPump+0x1a4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d10c      	bne.n	80031d2 <Start_AlkaliPump+0x136>
 80031b8:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <Start_AlkaliPump+0x160>)
 80031ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b0e      	ldr	r3, [pc, #56]	@ (80031fc <Start_AlkaliPump+0x160>)
 80031c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0208 	bic.w	r2, r2, #8
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e00c      	b.n	80031ec <Start_AlkaliPump+0x150>
 80031d2:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <Start_AlkaliPump+0x160>)
 80031d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b07      	ldr	r3, [pc, #28]	@ (80031fc <Start_AlkaliPump+0x160>)
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0204 	bic.w	r2, r2, #4
 80031e8:	601a      	str	r2, [r3, #0]
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bdb0      	pop	{r4, r5, r7, pc}
 80031f4:	08015e80 	.word	0x08015e80
 80031f8:	24000a88 	.word	0x24000a88
 80031fc:	24000fbc 	.word	0x24000fbc
 8003200:	24000888 	.word	0x24000888
 8003204:	40020010 	.word	0x40020010
 8003208:	40020028 	.word	0x40020028
 800320c:	40020040 	.word	0x40020040
 8003210:	40020058 	.word	0x40020058
 8003214:	40020070 	.word	0x40020070
 8003218:	40020088 	.word	0x40020088
 800321c:	400200a0 	.word	0x400200a0
 8003220:	400200b8 	.word	0x400200b8
 8003224:	40020410 	.word	0x40020410
 8003228:	40020428 	.word	0x40020428
 800322c:	40020440 	.word	0x40020440
 8003230:	40020458 	.word	0x40020458
 8003234:	40020470 	.word	0x40020470
 8003238:	40020488 	.word	0x40020488
 800323c:	400204a0 	.word	0x400204a0
 8003240:	400204b8 	.word	0x400204b8

08003244 <Stop_AcidPump>:

// ================= 停止泵 =================
void Stop_AcidPump(void)//01
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
    uint8_t sendBuffer[] = {
 800324a:	4b53      	ldr	r3, [pc, #332]	@ (8003398 <Stop_AcidPump+0x154>)
 800324c:	463c      	mov	r4, r7
 800324e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003250:	c407      	stmia	r4!, {r0, r1, r2}
 8003252:	7023      	strb	r3, [r4, #0]
        0x01, 0x10, 0x00, 0x03, 0x00, 0x02,
        0x04, 0x00, 0x00, 0x00, 0x00, 0xB3, 0xBA
    };

    tx_pump_flag = 0;
 8003254:	4b51      	ldr	r3, [pc, #324]	@ (800339c <Stop_AcidPump+0x158>)
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart6, sendBuffer, sizeof(sendBuffer));
 800325a:	463b      	mov	r3, r7
 800325c:	220d      	movs	r2, #13
 800325e:	4619      	mov	r1, r3
 8003260:	484f      	ldr	r0, [pc, #316]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003262:	f00b ffbb 	bl	800f1dc <HAL_UART_Transmit_DMA>
    while (tx_pump_flag == 0) {}  // 等待发送完成
 8003266:	bf00      	nop
 8003268:	4b4c      	ldr	r3, [pc, #304]	@ (800339c <Stop_AcidPump+0x158>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0fb      	beq.n	8003268 <Stop_AcidPump+0x24>
    // 开启接收
    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_data6, sizeof(rx_data6));
 8003270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003274:	494b      	ldr	r1, [pc, #300]	@ (80033a4 <Stop_AcidPump+0x160>)
 8003276:	484a      	ldr	r0, [pc, #296]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003278:	f00d fefa 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 800327c:	4b48      	ldr	r3, [pc, #288]	@ (80033a0 <Stop_AcidPump+0x15c>)
 800327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a48      	ldr	r2, [pc, #288]	@ (80033a8 <Stop_AcidPump+0x164>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d068      	beq.n	800335c <Stop_AcidPump+0x118>
 800328a:	4b45      	ldr	r3, [pc, #276]	@ (80033a0 <Stop_AcidPump+0x15c>)
 800328c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a46      	ldr	r2, [pc, #280]	@ (80033ac <Stop_AcidPump+0x168>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d061      	beq.n	800335c <Stop_AcidPump+0x118>
 8003298:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <Stop_AcidPump+0x15c>)
 800329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a43      	ldr	r2, [pc, #268]	@ (80033b0 <Stop_AcidPump+0x16c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d05a      	beq.n	800335c <Stop_AcidPump+0x118>
 80032a6:	4b3e      	ldr	r3, [pc, #248]	@ (80033a0 <Stop_AcidPump+0x15c>)
 80032a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a41      	ldr	r2, [pc, #260]	@ (80033b4 <Stop_AcidPump+0x170>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d053      	beq.n	800335c <Stop_AcidPump+0x118>
 80032b4:	4b3a      	ldr	r3, [pc, #232]	@ (80033a0 <Stop_AcidPump+0x15c>)
 80032b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a3e      	ldr	r2, [pc, #248]	@ (80033b8 <Stop_AcidPump+0x174>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d04c      	beq.n	800335c <Stop_AcidPump+0x118>
 80032c2:	4b37      	ldr	r3, [pc, #220]	@ (80033a0 <Stop_AcidPump+0x15c>)
 80032c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a3c      	ldr	r2, [pc, #240]	@ (80033bc <Stop_AcidPump+0x178>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d045      	beq.n	800335c <Stop_AcidPump+0x118>
 80032d0:	4b33      	ldr	r3, [pc, #204]	@ (80033a0 <Stop_AcidPump+0x15c>)
 80032d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a39      	ldr	r2, [pc, #228]	@ (80033c0 <Stop_AcidPump+0x17c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d03e      	beq.n	800335c <Stop_AcidPump+0x118>
 80032de:	4b30      	ldr	r3, [pc, #192]	@ (80033a0 <Stop_AcidPump+0x15c>)
 80032e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a37      	ldr	r2, [pc, #220]	@ (80033c4 <Stop_AcidPump+0x180>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d037      	beq.n	800335c <Stop_AcidPump+0x118>
 80032ec:	4b2c      	ldr	r3, [pc, #176]	@ (80033a0 <Stop_AcidPump+0x15c>)
 80032ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a34      	ldr	r2, [pc, #208]	@ (80033c8 <Stop_AcidPump+0x184>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d030      	beq.n	800335c <Stop_AcidPump+0x118>
 80032fa:	4b29      	ldr	r3, [pc, #164]	@ (80033a0 <Stop_AcidPump+0x15c>)
 80032fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a32      	ldr	r2, [pc, #200]	@ (80033cc <Stop_AcidPump+0x188>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d029      	beq.n	800335c <Stop_AcidPump+0x118>
 8003308:	4b25      	ldr	r3, [pc, #148]	@ (80033a0 <Stop_AcidPump+0x15c>)
 800330a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2f      	ldr	r2, [pc, #188]	@ (80033d0 <Stop_AcidPump+0x18c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d022      	beq.n	800335c <Stop_AcidPump+0x118>
 8003316:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2d      	ldr	r2, [pc, #180]	@ (80033d4 <Stop_AcidPump+0x190>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d01b      	beq.n	800335c <Stop_AcidPump+0x118>
 8003324:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a2a      	ldr	r2, [pc, #168]	@ (80033d8 <Stop_AcidPump+0x194>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d014      	beq.n	800335c <Stop_AcidPump+0x118>
 8003332:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a28      	ldr	r2, [pc, #160]	@ (80033dc <Stop_AcidPump+0x198>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00d      	beq.n	800335c <Stop_AcidPump+0x118>
 8003340:	4b17      	ldr	r3, [pc, #92]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a25      	ldr	r2, [pc, #148]	@ (80033e0 <Stop_AcidPump+0x19c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d006      	beq.n	800335c <Stop_AcidPump+0x118>
 800334e:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a23      	ldr	r2, [pc, #140]	@ (80033e4 <Stop_AcidPump+0x1a0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d10c      	bne.n	8003376 <Stop_AcidPump+0x132>
 800335c:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <Stop_AcidPump+0x15c>)
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0208 	bic.w	r2, r2, #8
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e00c      	b.n	8003390 <Stop_AcidPump+0x14c>
 8003376:	4b0a      	ldr	r3, [pc, #40]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <Stop_AcidPump+0x15c>)
 8003382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0204 	bic.w	r2, r2, #4
 800338c:	601a      	str	r2, [r3, #0]
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bd90      	pop	{r4, r7, pc}
 8003398:	08015e94 	.word	0x08015e94
 800339c:	24000a88 	.word	0x24000a88
 80033a0:	24000fbc 	.word	0x24000fbc
 80033a4:	24000888 	.word	0x24000888
 80033a8:	40020010 	.word	0x40020010
 80033ac:	40020028 	.word	0x40020028
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020070 	.word	0x40020070
 80033bc:	40020088 	.word	0x40020088
 80033c0:	400200a0 	.word	0x400200a0
 80033c4:	400200b8 	.word	0x400200b8
 80033c8:	40020410 	.word	0x40020410
 80033cc:	40020428 	.word	0x40020428
 80033d0:	40020440 	.word	0x40020440
 80033d4:	40020458 	.word	0x40020458
 80033d8:	40020470 	.word	0x40020470
 80033dc:	40020488 	.word	0x40020488
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	400204b8 	.word	0x400204b8

080033e8 <Stop_AlkaliPump>:
void Stop_AlkaliPump(void)//02
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
    uint8_t sendBuffer[] = {
 80033ee:	4b53      	ldr	r3, [pc, #332]	@ (800353c <Stop_AlkaliPump+0x154>)
 80033f0:	463c      	mov	r4, r7
 80033f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033f4:	c407      	stmia	r4!, {r0, r1, r2}
 80033f6:	7023      	strb	r3, [r4, #0]
        0x02, 0x10, 0x00, 0x03, 0x00, 0x02,
        0x04, 0x00, 0x00, 0x00, 0x00, 0xBC, 0xFE
    };
    tx_pump_flag = 0;
 80033f8:	4b51      	ldr	r3, [pc, #324]	@ (8003540 <Stop_AlkaliPump+0x158>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart6, sendBuffer, sizeof(sendBuffer));
 80033fe:	463b      	mov	r3, r7
 8003400:	220d      	movs	r2, #13
 8003402:	4619      	mov	r1, r3
 8003404:	484f      	ldr	r0, [pc, #316]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 8003406:	f00b fee9 	bl	800f1dc <HAL_UART_Transmit_DMA>
    while (tx_pump_flag == 0) {}  // 等待发送完成
 800340a:	bf00      	nop
 800340c:	4b4c      	ldr	r3, [pc, #304]	@ (8003540 <Stop_AlkaliPump+0x158>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0fb      	beq.n	800340c <Stop_AlkaliPump+0x24>
    // 开启接收
    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_data6, sizeof(rx_data6));
 8003414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003418:	494b      	ldr	r1, [pc, #300]	@ (8003548 <Stop_AlkaliPump+0x160>)
 800341a:	484a      	ldr	r0, [pc, #296]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 800341c:	f00d fe28 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8003420:	4b48      	ldr	r3, [pc, #288]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 8003422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a48      	ldr	r2, [pc, #288]	@ (800354c <Stop_AlkaliPump+0x164>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d068      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 800342e:	4b45      	ldr	r3, [pc, #276]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 8003430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a46      	ldr	r2, [pc, #280]	@ (8003550 <Stop_AlkaliPump+0x168>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d061      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 800343c:	4b41      	ldr	r3, [pc, #260]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a43      	ldr	r2, [pc, #268]	@ (8003554 <Stop_AlkaliPump+0x16c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d05a      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 800344a:	4b3e      	ldr	r3, [pc, #248]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 800344c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a41      	ldr	r2, [pc, #260]	@ (8003558 <Stop_AlkaliPump+0x170>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d053      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 8003458:	4b3a      	ldr	r3, [pc, #232]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 800345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a3e      	ldr	r2, [pc, #248]	@ (800355c <Stop_AlkaliPump+0x174>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d04c      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 8003466:	4b37      	ldr	r3, [pc, #220]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 8003468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a3c      	ldr	r2, [pc, #240]	@ (8003560 <Stop_AlkaliPump+0x178>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d045      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 8003474:	4b33      	ldr	r3, [pc, #204]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 8003476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a39      	ldr	r2, [pc, #228]	@ (8003564 <Stop_AlkaliPump+0x17c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d03e      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 8003482:	4b30      	ldr	r3, [pc, #192]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 8003484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a37      	ldr	r2, [pc, #220]	@ (8003568 <Stop_AlkaliPump+0x180>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d037      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 8003490:	4b2c      	ldr	r3, [pc, #176]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 8003492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a34      	ldr	r2, [pc, #208]	@ (800356c <Stop_AlkaliPump+0x184>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d030      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 800349e:	4b29      	ldr	r3, [pc, #164]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 80034a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a32      	ldr	r2, [pc, #200]	@ (8003570 <Stop_AlkaliPump+0x188>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d029      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 80034ac:	4b25      	ldr	r3, [pc, #148]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 80034ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <Stop_AlkaliPump+0x18c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d022      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 80034bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003578 <Stop_AlkaliPump+0x190>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d01b      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 80034c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 80034ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a2a      	ldr	r2, [pc, #168]	@ (800357c <Stop_AlkaliPump+0x194>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d014      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 80034d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 80034d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a28      	ldr	r2, [pc, #160]	@ (8003580 <Stop_AlkaliPump+0x198>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00d      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 80034e4:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 80034e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a25      	ldr	r2, [pc, #148]	@ (8003584 <Stop_AlkaliPump+0x19c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d006      	beq.n	8003500 <Stop_AlkaliPump+0x118>
 80034f2:	4b14      	ldr	r3, [pc, #80]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 80034f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a23      	ldr	r2, [pc, #140]	@ (8003588 <Stop_AlkaliPump+0x1a0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10c      	bne.n	800351a <Stop_AlkaliPump+0x132>
 8003500:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 8003502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 800350c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e00c      	b.n	8003534 <Stop_AlkaliPump+0x14c>
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 800351c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <Stop_AlkaliPump+0x15c>)
 8003526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0204 	bic.w	r2, r2, #4
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bd90      	pop	{r4, r7, pc}
 800353c:	08015ea4 	.word	0x08015ea4
 8003540:	24000a88 	.word	0x24000a88
 8003544:	24000fbc 	.word	0x24000fbc
 8003548:	24000888 	.word	0x24000888
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8

0800358c <Relay_Init>:
#include "relay.h"

static uint8_t relay_status = 0;  // 记录继电器状态

void Relay_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
	Relay_Off();
 8003590:	f000 f81e 	bl	80035d0 <Relay_Off>
    relay_status = 0;
 8003594:	4b02      	ldr	r3, [pc, #8]	@ (80035a0 <Relay_Init+0x14>)
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	24000a8a 	.word	0x24000a8a

080035a4 <Relay_On>:

void Relay_On(void) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET); // 低电平激活
 80035a8:	2201      	movs	r2, #1
 80035aa:	2101      	movs	r1, #1
 80035ac:	4805      	ldr	r0, [pc, #20]	@ (80035c4 <Relay_On+0x20>)
 80035ae:	f006 fc57 	bl	8009e60 <HAL_GPIO_WritePin>
    relay_status = 1;
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <Relay_On+0x24>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
    printf("[Relay] On (Heating)\r\n");
 80035b8:	4804      	ldr	r0, [pc, #16]	@ (80035cc <Relay_On+0x28>)
 80035ba:	f00e fd67 	bl	801208c <puts>
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	58020400 	.word	0x58020400
 80035c8:	24000a8a 	.word	0x24000a8a
 80035cc:	08015eb4 	.word	0x08015eb4

080035d0 <Relay_Off>:

void Relay_Off(void) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);   // 高电平关闭
 80035d4:	2200      	movs	r2, #0
 80035d6:	2101      	movs	r1, #1
 80035d8:	4805      	ldr	r0, [pc, #20]	@ (80035f0 <Relay_Off+0x20>)
 80035da:	f006 fc41 	bl	8009e60 <HAL_GPIO_WritePin>
    relay_status = 0;
 80035de:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <Relay_Off+0x24>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
    printf("[Relay] Off (Stop Heating)\r\n");
 80035e4:	4804      	ldr	r0, [pc, #16]	@ (80035f8 <Relay_Off+0x28>)
 80035e6:	f00e fd51 	bl	801208c <puts>
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	58020400 	.word	0x58020400
 80035f4:	24000a8a 	.word	0x24000a8a
 80035f8:	08015ecc 	.word	0x08015ecc

080035fc <Relay_Switch>:

void Relay_Switch(uint8_t onoff) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
    if (onoff && !relay_status) {
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <Relay_Switch+0x1e>
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <Relay_Switch+0x38>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <Relay_Switch+0x1e>
        Relay_On();
 8003614:	f7ff ffc6 	bl	80035a4 <Relay_On>
    } else if (!onoff && relay_status) {
        Relay_Off();
    }
}
 8003618:	e008      	b.n	800362c <Relay_Switch+0x30>
    } else if (!onoff && relay_status) {
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <Relay_Switch+0x30>
 8003620:	4b04      	ldr	r3, [pc, #16]	@ (8003634 <Relay_Switch+0x38>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <Relay_Switch+0x30>
        Relay_Off();
 8003628:	f7ff ffd2 	bl	80035d0 <Relay_Off>
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	24000a8a 	.word	0x24000a8a

08003638 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800363c:	4b28      	ldr	r3, [pc, #160]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 800363e:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <MX_SPI4_Init+0xac>)
 8003640:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003642:	4b27      	ldr	r3, [pc, #156]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 8003644:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003648:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800364a:	4b25      	ldr	r3, [pc, #148]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003650:	4b23      	ldr	r3, [pc, #140]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 8003652:	2207      	movs	r2, #7
 8003654:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003656:	4b22      	ldr	r3, [pc, #136]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800365c:	4b20      	ldr	r3, [pc, #128]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 800365e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003662:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003664:	4b1e      	ldr	r3, [pc, #120]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 8003666:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800366a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800366c:	4b1c      	ldr	r3, [pc, #112]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 800366e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003672:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003674:	4b1a      	ldr	r3, [pc, #104]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 8003676:	2200      	movs	r2, #0
 8003678:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800367a:	4b19      	ldr	r3, [pc, #100]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 800367c:	2200      	movs	r2, #0
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003680:	4b17      	ldr	r3, [pc, #92]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 8003682:	2200      	movs	r2, #0
 8003684:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8003686:	4b16      	ldr	r3, [pc, #88]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 8003688:	2200      	movs	r2, #0
 800368a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800368c:	4b14      	ldr	r3, [pc, #80]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 800368e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003692:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003694:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 8003696:	2200      	movs	r2, #0
 8003698:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800369a:	4b11      	ldr	r3, [pc, #68]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 800369c:	2200      	movs	r2, #0
 800369e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80036a0:	4b0f      	ldr	r3, [pc, #60]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80036a6:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80036ac:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80036b8:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80036be:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80036ca:	4805      	ldr	r0, [pc, #20]	@ (80036e0 <MX_SPI4_Init+0xa8>)
 80036cc:	f00a f900 	bl	800d8d0 <HAL_SPI_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80036d6:	f7fe fb46 	bl	8001d66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	24000a8c 	.word	0x24000a8c
 80036e4:	40013400 	.word	0x40013400

080036e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b0ba      	sub	sp, #232	@ 0xe8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003700:	f107 0310 	add.w	r3, r7, #16
 8003704:	22c0      	movs	r2, #192	@ 0xc0
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f00e fdf7 	bl	80122fc <memset>
  if(spiHandle->Instance==SPI4)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a26      	ldr	r2, [pc, #152]	@ (80037ac <HAL_SPI_MspInit+0xc4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d144      	bne.n	80037a2 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8003718:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8003724:	2300      	movs	r3, #0
 8003726:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003728:	f107 0310 	add.w	r3, r7, #16
 800372c:	4618      	mov	r0, r3
 800372e:	f007 fbd1 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003738:	f7fe fb15 	bl	8001d66 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800373c:	4b1c      	ldr	r3, [pc, #112]	@ (80037b0 <HAL_SPI_MspInit+0xc8>)
 800373e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003742:	4a1b      	ldr	r2, [pc, #108]	@ (80037b0 <HAL_SPI_MspInit+0xc8>)
 8003744:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003748:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800374c:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <HAL_SPI_MspInit+0xc8>)
 800374e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800375a:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <HAL_SPI_MspInit+0xc8>)
 800375c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003760:	4a13      	ldr	r2, [pc, #76]	@ (80037b0 <HAL_SPI_MspInit+0xc8>)
 8003762:	f043 0310 	orr.w	r3, r3, #16
 8003766:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800376a:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <HAL_SPI_MspInit+0xc8>)
 800376c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003778:	2364      	movs	r3, #100	@ 0x64
 800377a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	2300      	movs	r3, #0
 800378c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003790:	2305      	movs	r3, #5
 8003792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003796:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800379a:	4619      	mov	r1, r3
 800379c:	4805      	ldr	r0, [pc, #20]	@ (80037b4 <HAL_SPI_MspInit+0xcc>)
 800379e:	f006 f9af 	bl	8009b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80037a2:	bf00      	nop
 80037a4:	37e8      	adds	r7, #232	@ 0xe8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40013400 	.word	0x40013400
 80037b0:	58024400 	.word	0x58024400
 80037b4:	58021000 	.word	0x58021000

080037b8 <Get_Sign>:

uint8_t rx_data7[RX_BUFFER_SIZE];    // uart7接收缓存
 uint8_t tx_stir_flag = 0;    // uart7发送完成标志
 uint8_t rx_stir_flag = 0;
 //发送使能信号
 void Get_Sign(){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
	 uint8_t sendBuffer[] = {0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x48, 0x0A};
 80037be:	4a54      	ldr	r2, [pc, #336]	@ (8003910 <Get_Sign+0x158>)
 80037c0:	463b      	mov	r3, r7
 80037c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037c6:	e883 0003 	stmia.w	r3, {r0, r1}
	 tx_stir_flag = 0;
 80037ca:	4b52      	ldr	r3, [pc, #328]	@ (8003914 <Get_Sign+0x15c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
     HAL_UART_Transmit_DMA(&huart7, sendBuffer, sizeof(sendBuffer));
 80037d0:	463b      	mov	r3, r7
 80037d2:	2208      	movs	r2, #8
 80037d4:	4619      	mov	r1, r3
 80037d6:	4850      	ldr	r0, [pc, #320]	@ (8003918 <Get_Sign+0x160>)
 80037d8:	f00b fd00 	bl	800f1dc <HAL_UART_Transmit_DMA>
     while (tx_stir_flag == 0) {}  // 等待发送完成
 80037dc:	bf00      	nop
 80037de:	4b4d      	ldr	r3, [pc, #308]	@ (8003914 <Get_Sign+0x15c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0fb      	beq.n	80037de <Get_Sign+0x26>
         // 开启接收
     HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rx_data7, sizeof(rx_data7));
 80037e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ea:	494c      	ldr	r1, [pc, #304]	@ (800391c <Get_Sign+0x164>)
 80037ec:	484a      	ldr	r0, [pc, #296]	@ (8003918 <Get_Sign+0x160>)
 80037ee:	f00d fc3f 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(huart7.hdmarx, DMA_IT_HT);
 80037f2:	4b49      	ldr	r3, [pc, #292]	@ (8003918 <Get_Sign+0x160>)
 80037f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a49      	ldr	r2, [pc, #292]	@ (8003920 <Get_Sign+0x168>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d068      	beq.n	80038d2 <Get_Sign+0x11a>
 8003800:	4b45      	ldr	r3, [pc, #276]	@ (8003918 <Get_Sign+0x160>)
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a46      	ldr	r2, [pc, #280]	@ (8003924 <Get_Sign+0x16c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d061      	beq.n	80038d2 <Get_Sign+0x11a>
 800380e:	4b42      	ldr	r3, [pc, #264]	@ (8003918 <Get_Sign+0x160>)
 8003810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a44      	ldr	r2, [pc, #272]	@ (8003928 <Get_Sign+0x170>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d05a      	beq.n	80038d2 <Get_Sign+0x11a>
 800381c:	4b3e      	ldr	r3, [pc, #248]	@ (8003918 <Get_Sign+0x160>)
 800381e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a41      	ldr	r2, [pc, #260]	@ (800392c <Get_Sign+0x174>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d053      	beq.n	80038d2 <Get_Sign+0x11a>
 800382a:	4b3b      	ldr	r3, [pc, #236]	@ (8003918 <Get_Sign+0x160>)
 800382c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a3f      	ldr	r2, [pc, #252]	@ (8003930 <Get_Sign+0x178>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d04c      	beq.n	80038d2 <Get_Sign+0x11a>
 8003838:	4b37      	ldr	r3, [pc, #220]	@ (8003918 <Get_Sign+0x160>)
 800383a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3c      	ldr	r2, [pc, #240]	@ (8003934 <Get_Sign+0x17c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d045      	beq.n	80038d2 <Get_Sign+0x11a>
 8003846:	4b34      	ldr	r3, [pc, #208]	@ (8003918 <Get_Sign+0x160>)
 8003848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a3a      	ldr	r2, [pc, #232]	@ (8003938 <Get_Sign+0x180>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d03e      	beq.n	80038d2 <Get_Sign+0x11a>
 8003854:	4b30      	ldr	r3, [pc, #192]	@ (8003918 <Get_Sign+0x160>)
 8003856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a37      	ldr	r2, [pc, #220]	@ (800393c <Get_Sign+0x184>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d037      	beq.n	80038d2 <Get_Sign+0x11a>
 8003862:	4b2d      	ldr	r3, [pc, #180]	@ (8003918 <Get_Sign+0x160>)
 8003864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a35      	ldr	r2, [pc, #212]	@ (8003940 <Get_Sign+0x188>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d030      	beq.n	80038d2 <Get_Sign+0x11a>
 8003870:	4b29      	ldr	r3, [pc, #164]	@ (8003918 <Get_Sign+0x160>)
 8003872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a32      	ldr	r2, [pc, #200]	@ (8003944 <Get_Sign+0x18c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d029      	beq.n	80038d2 <Get_Sign+0x11a>
 800387e:	4b26      	ldr	r3, [pc, #152]	@ (8003918 <Get_Sign+0x160>)
 8003880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a30      	ldr	r2, [pc, #192]	@ (8003948 <Get_Sign+0x190>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d022      	beq.n	80038d2 <Get_Sign+0x11a>
 800388c:	4b22      	ldr	r3, [pc, #136]	@ (8003918 <Get_Sign+0x160>)
 800388e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2d      	ldr	r2, [pc, #180]	@ (800394c <Get_Sign+0x194>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01b      	beq.n	80038d2 <Get_Sign+0x11a>
 800389a:	4b1f      	ldr	r3, [pc, #124]	@ (8003918 <Get_Sign+0x160>)
 800389c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003950 <Get_Sign+0x198>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d014      	beq.n	80038d2 <Get_Sign+0x11a>
 80038a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <Get_Sign+0x160>)
 80038aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a28      	ldr	r2, [pc, #160]	@ (8003954 <Get_Sign+0x19c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00d      	beq.n	80038d2 <Get_Sign+0x11a>
 80038b6:	4b18      	ldr	r3, [pc, #96]	@ (8003918 <Get_Sign+0x160>)
 80038b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a26      	ldr	r2, [pc, #152]	@ (8003958 <Get_Sign+0x1a0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d006      	beq.n	80038d2 <Get_Sign+0x11a>
 80038c4:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <Get_Sign+0x160>)
 80038c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a23      	ldr	r2, [pc, #140]	@ (800395c <Get_Sign+0x1a4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10c      	bne.n	80038ec <Get_Sign+0x134>
 80038d2:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <Get_Sign+0x160>)
 80038d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <Get_Sign+0x160>)
 80038de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0208 	bic.w	r2, r2, #8
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e00c      	b.n	8003906 <Get_Sign+0x14e>
 80038ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <Get_Sign+0x160>)
 80038ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <Get_Sign+0x160>)
 80038f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	601a      	str	r2, [r3, #0]

 }
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	08015ee8 	.word	0x08015ee8
 8003914:	24000d14 	.word	0x24000d14
 8003918:	24000e00 	.word	0x24000e00
 800391c:	24000b14 	.word	0x24000b14
 8003920:	40020010 	.word	0x40020010
 8003924:	40020028 	.word	0x40020028
 8003928:	40020040 	.word	0x40020040
 800392c:	40020058 	.word	0x40020058
 8003930:	40020070 	.word	0x40020070
 8003934:	40020088 	.word	0x40020088
 8003938:	400200a0 	.word	0x400200a0
 800393c:	400200b8 	.word	0x400200b8
 8003940:	40020410 	.word	0x40020410
 8003944:	40020428 	.word	0x40020428
 8003948:	40020440 	.word	0x40020440
 800394c:	40020458 	.word	0x40020458
 8003950:	40020470 	.word	0x40020470
 8003954:	40020488 	.word	0x40020488
 8003958:	400204a0 	.word	0x400204a0
 800395c:	400204b8 	.word	0x400204b8

08003960 <SpeedMode>:
 //启动速度模式
 void SpeedMode(){
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 	uint8_t sendBuffer[] = {0x01, 0x06, 0x00, 0x19, 0x00, 0x03, 0x18, 0x0C};
 8003966:	4a54      	ldr	r2, [pc, #336]	@ (8003ab8 <SpeedMode+0x158>)
 8003968:	463b      	mov	r3, r7
 800396a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800396e:	e883 0003 	stmia.w	r3, {r0, r1}
 	tx_stir_flag = 0;
 8003972:	4b52      	ldr	r3, [pc, #328]	@ (8003abc <SpeedMode+0x15c>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
 	HAL_UART_Transmit_DMA(&huart7, sendBuffer, sizeof(sendBuffer));
 8003978:	463b      	mov	r3, r7
 800397a:	2208      	movs	r2, #8
 800397c:	4619      	mov	r1, r3
 800397e:	4850      	ldr	r0, [pc, #320]	@ (8003ac0 <SpeedMode+0x160>)
 8003980:	f00b fc2c 	bl	800f1dc <HAL_UART_Transmit_DMA>
 	while (tx_stir_flag == 0) {}  // 等待发送完成
 8003984:	bf00      	nop
 8003986:	4b4d      	ldr	r3, [pc, #308]	@ (8003abc <SpeedMode+0x15c>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0fb      	beq.n	8003986 <SpeedMode+0x26>
 	         // 开启接收
 	         HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rx_data7, sizeof(rx_data7));
 800398e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003992:	494c      	ldr	r1, [pc, #304]	@ (8003ac4 <SpeedMode+0x164>)
 8003994:	484a      	ldr	r0, [pc, #296]	@ (8003ac0 <SpeedMode+0x160>)
 8003996:	f00d fb6b 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
 	         __HAL_DMA_DISABLE_IT(huart7.hdmarx, DMA_IT_HT);
 800399a:	4b49      	ldr	r3, [pc, #292]	@ (8003ac0 <SpeedMode+0x160>)
 800399c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a49      	ldr	r2, [pc, #292]	@ (8003ac8 <SpeedMode+0x168>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d068      	beq.n	8003a7a <SpeedMode+0x11a>
 80039a8:	4b45      	ldr	r3, [pc, #276]	@ (8003ac0 <SpeedMode+0x160>)
 80039aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a46      	ldr	r2, [pc, #280]	@ (8003acc <SpeedMode+0x16c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d061      	beq.n	8003a7a <SpeedMode+0x11a>
 80039b6:	4b42      	ldr	r3, [pc, #264]	@ (8003ac0 <SpeedMode+0x160>)
 80039b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a44      	ldr	r2, [pc, #272]	@ (8003ad0 <SpeedMode+0x170>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d05a      	beq.n	8003a7a <SpeedMode+0x11a>
 80039c4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ac0 <SpeedMode+0x160>)
 80039c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a41      	ldr	r2, [pc, #260]	@ (8003ad4 <SpeedMode+0x174>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d053      	beq.n	8003a7a <SpeedMode+0x11a>
 80039d2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac0 <SpeedMode+0x160>)
 80039d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a3f      	ldr	r2, [pc, #252]	@ (8003ad8 <SpeedMode+0x178>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d04c      	beq.n	8003a7a <SpeedMode+0x11a>
 80039e0:	4b37      	ldr	r3, [pc, #220]	@ (8003ac0 <SpeedMode+0x160>)
 80039e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a3c      	ldr	r2, [pc, #240]	@ (8003adc <SpeedMode+0x17c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <SpeedMode+0x11a>
 80039ee:	4b34      	ldr	r3, [pc, #208]	@ (8003ac0 <SpeedMode+0x160>)
 80039f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ae0 <SpeedMode+0x180>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d03e      	beq.n	8003a7a <SpeedMode+0x11a>
 80039fc:	4b30      	ldr	r3, [pc, #192]	@ (8003ac0 <SpeedMode+0x160>)
 80039fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a37      	ldr	r2, [pc, #220]	@ (8003ae4 <SpeedMode+0x184>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d037      	beq.n	8003a7a <SpeedMode+0x11a>
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac0 <SpeedMode+0x160>)
 8003a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a35      	ldr	r2, [pc, #212]	@ (8003ae8 <SpeedMode+0x188>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d030      	beq.n	8003a7a <SpeedMode+0x11a>
 8003a18:	4b29      	ldr	r3, [pc, #164]	@ (8003ac0 <SpeedMode+0x160>)
 8003a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a32      	ldr	r2, [pc, #200]	@ (8003aec <SpeedMode+0x18c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d029      	beq.n	8003a7a <SpeedMode+0x11a>
 8003a26:	4b26      	ldr	r3, [pc, #152]	@ (8003ac0 <SpeedMode+0x160>)
 8003a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a30      	ldr	r2, [pc, #192]	@ (8003af0 <SpeedMode+0x190>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <SpeedMode+0x11a>
 8003a34:	4b22      	ldr	r3, [pc, #136]	@ (8003ac0 <SpeedMode+0x160>)
 8003a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003af4 <SpeedMode+0x194>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01b      	beq.n	8003a7a <SpeedMode+0x11a>
 8003a42:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac0 <SpeedMode+0x160>)
 8003a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003af8 <SpeedMode+0x198>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d014      	beq.n	8003a7a <SpeedMode+0x11a>
 8003a50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <SpeedMode+0x160>)
 8003a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a28      	ldr	r2, [pc, #160]	@ (8003afc <SpeedMode+0x19c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00d      	beq.n	8003a7a <SpeedMode+0x11a>
 8003a5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ac0 <SpeedMode+0x160>)
 8003a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a26      	ldr	r2, [pc, #152]	@ (8003b00 <SpeedMode+0x1a0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d006      	beq.n	8003a7a <SpeedMode+0x11a>
 8003a6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <SpeedMode+0x160>)
 8003a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a23      	ldr	r2, [pc, #140]	@ (8003b04 <SpeedMode+0x1a4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10c      	bne.n	8003a94 <SpeedMode+0x134>
 8003a7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <SpeedMode+0x160>)
 8003a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac0 <SpeedMode+0x160>)
 8003a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0208 	bic.w	r2, r2, #8
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e00c      	b.n	8003aae <SpeedMode+0x14e>
 8003a94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <SpeedMode+0x160>)
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b08      	ldr	r3, [pc, #32]	@ (8003ac0 <SpeedMode+0x160>)
 8003aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	601a      	str	r2, [r3, #0]

 }
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08015ef0 	.word	0x08015ef0
 8003abc:	24000d14 	.word	0x24000d14
 8003ac0:	24000e00 	.word	0x24000e00
 8003ac4:	24000b14 	.word	0x24000b14
 8003ac8:	40020010 	.word	0x40020010
 8003acc:	40020028 	.word	0x40020028
 8003ad0:	40020040 	.word	0x40020040
 8003ad4:	40020058 	.word	0x40020058
 8003ad8:	40020070 	.word	0x40020070
 8003adc:	40020088 	.word	0x40020088
 8003ae0:	400200a0 	.word	0x400200a0
 8003ae4:	400200b8 	.word	0x400200b8
 8003ae8:	40020410 	.word	0x40020410
 8003aec:	40020428 	.word	0x40020428
 8003af0:	40020440 	.word	0x40020440
 8003af4:	40020458 	.word	0x40020458
 8003af8:	40020470 	.word	0x40020470
 8003afc:	40020488 	.word	0x40020488
 8003b00:	400204a0 	.word	0x400204a0
 8003b04:	400204b8 	.word	0x400204b8

08003b08 <Start_Stir>:

 //转速300
void Start_Stir(){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
	uint8_t sendBuffer[] = {0x01, 0x06, 0x00, 0x02, 0x01, 0x2C, 0x28, 0x47};
 8003b0e:	4a54      	ldr	r2, [pc, #336]	@ (8003c60 <Start_Stir+0x158>)
 8003b10:	463b      	mov	r3, r7
 8003b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b16:	e883 0003 	stmia.w	r3, {r0, r1}
	tx_stir_flag = 0;
 8003b1a:	4b52      	ldr	r3, [pc, #328]	@ (8003c64 <Start_Stir+0x15c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart7, sendBuffer, sizeof(sendBuffer));
 8003b20:	463b      	mov	r3, r7
 8003b22:	2208      	movs	r2, #8
 8003b24:	4619      	mov	r1, r3
 8003b26:	4850      	ldr	r0, [pc, #320]	@ (8003c68 <Start_Stir+0x160>)
 8003b28:	f00b fb58 	bl	800f1dc <HAL_UART_Transmit_DMA>
	while (tx_stir_flag == 0) {}  // 等待发送完成
 8003b2c:	bf00      	nop
 8003b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c64 <Start_Stir+0x15c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0fb      	beq.n	8003b2e <Start_Stir+0x26>
	         // 开启接收
	         HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rx_data7, sizeof(rx_data7));
 8003b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b3a:	494c      	ldr	r1, [pc, #304]	@ (8003c6c <Start_Stir+0x164>)
 8003b3c:	484a      	ldr	r0, [pc, #296]	@ (8003c68 <Start_Stir+0x160>)
 8003b3e:	f00d fa97 	bl	8011070 <HAL_UARTEx_ReceiveToIdle_DMA>
	         __HAL_DMA_DISABLE_IT(huart7.hdmarx, DMA_IT_HT);
 8003b42:	4b49      	ldr	r3, [pc, #292]	@ (8003c68 <Start_Stir+0x160>)
 8003b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a49      	ldr	r2, [pc, #292]	@ (8003c70 <Start_Stir+0x168>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d068      	beq.n	8003c22 <Start_Stir+0x11a>
 8003b50:	4b45      	ldr	r3, [pc, #276]	@ (8003c68 <Start_Stir+0x160>)
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a46      	ldr	r2, [pc, #280]	@ (8003c74 <Start_Stir+0x16c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d061      	beq.n	8003c22 <Start_Stir+0x11a>
 8003b5e:	4b42      	ldr	r3, [pc, #264]	@ (8003c68 <Start_Stir+0x160>)
 8003b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a44      	ldr	r2, [pc, #272]	@ (8003c78 <Start_Stir+0x170>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d05a      	beq.n	8003c22 <Start_Stir+0x11a>
 8003b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c68 <Start_Stir+0x160>)
 8003b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a41      	ldr	r2, [pc, #260]	@ (8003c7c <Start_Stir+0x174>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d053      	beq.n	8003c22 <Start_Stir+0x11a>
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <Start_Stir+0x160>)
 8003b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3f      	ldr	r2, [pc, #252]	@ (8003c80 <Start_Stir+0x178>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d04c      	beq.n	8003c22 <Start_Stir+0x11a>
 8003b88:	4b37      	ldr	r3, [pc, #220]	@ (8003c68 <Start_Stir+0x160>)
 8003b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a3c      	ldr	r2, [pc, #240]	@ (8003c84 <Start_Stir+0x17c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d045      	beq.n	8003c22 <Start_Stir+0x11a>
 8003b96:	4b34      	ldr	r3, [pc, #208]	@ (8003c68 <Start_Stir+0x160>)
 8003b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a3a      	ldr	r2, [pc, #232]	@ (8003c88 <Start_Stir+0x180>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d03e      	beq.n	8003c22 <Start_Stir+0x11a>
 8003ba4:	4b30      	ldr	r3, [pc, #192]	@ (8003c68 <Start_Stir+0x160>)
 8003ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a37      	ldr	r2, [pc, #220]	@ (8003c8c <Start_Stir+0x184>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d037      	beq.n	8003c22 <Start_Stir+0x11a>
 8003bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8003c68 <Start_Stir+0x160>)
 8003bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a35      	ldr	r2, [pc, #212]	@ (8003c90 <Start_Stir+0x188>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d030      	beq.n	8003c22 <Start_Stir+0x11a>
 8003bc0:	4b29      	ldr	r3, [pc, #164]	@ (8003c68 <Start_Stir+0x160>)
 8003bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a32      	ldr	r2, [pc, #200]	@ (8003c94 <Start_Stir+0x18c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d029      	beq.n	8003c22 <Start_Stir+0x11a>
 8003bce:	4b26      	ldr	r3, [pc, #152]	@ (8003c68 <Start_Stir+0x160>)
 8003bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a30      	ldr	r2, [pc, #192]	@ (8003c98 <Start_Stir+0x190>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d022      	beq.n	8003c22 <Start_Stir+0x11a>
 8003bdc:	4b22      	ldr	r3, [pc, #136]	@ (8003c68 <Start_Stir+0x160>)
 8003bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c9c <Start_Stir+0x194>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01b      	beq.n	8003c22 <Start_Stir+0x11a>
 8003bea:	4b1f      	ldr	r3, [pc, #124]	@ (8003c68 <Start_Stir+0x160>)
 8003bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca0 <Start_Stir+0x198>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d014      	beq.n	8003c22 <Start_Stir+0x11a>
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <Start_Stir+0x160>)
 8003bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a28      	ldr	r2, [pc, #160]	@ (8003ca4 <Start_Stir+0x19c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00d      	beq.n	8003c22 <Start_Stir+0x11a>
 8003c06:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <Start_Stir+0x160>)
 8003c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a26      	ldr	r2, [pc, #152]	@ (8003ca8 <Start_Stir+0x1a0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d006      	beq.n	8003c22 <Start_Stir+0x11a>
 8003c14:	4b14      	ldr	r3, [pc, #80]	@ (8003c68 <Start_Stir+0x160>)
 8003c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a23      	ldr	r2, [pc, #140]	@ (8003cac <Start_Stir+0x1a4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10c      	bne.n	8003c3c <Start_Stir+0x134>
 8003c22:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <Start_Stir+0x160>)
 8003c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c68 <Start_Stir+0x160>)
 8003c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0208 	bic.w	r2, r2, #8
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e00c      	b.n	8003c56 <Start_Stir+0x14e>
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <Start_Stir+0x160>)
 8003c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b08      	ldr	r3, [pc, #32]	@ (8003c68 <Start_Stir+0x160>)
 8003c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	601a      	str	r2, [r3, #0]

}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	08015ef8 	.word	0x08015ef8
 8003c64:	24000d14 	.word	0x24000d14
 8003c68:	24000e00 	.word	0x24000e00
 8003c6c:	24000b14 	.word	0x24000b14
 8003c70:	40020010 	.word	0x40020010
 8003c74:	40020028 	.word	0x40020028
 8003c78:	40020040 	.word	0x40020040
 8003c7c:	40020058 	.word	0x40020058
 8003c80:	40020070 	.word	0x40020070
 8003c84:	40020088 	.word	0x40020088
 8003c88:	400200a0 	.word	0x400200a0
 8003c8c:	400200b8 	.word	0x400200b8
 8003c90:	40020410 	.word	0x40020410
 8003c94:	40020428 	.word	0x40020428
 8003c98:	40020440 	.word	0x40020440
 8003c9c:	40020458 	.word	0x40020458
 8003ca0:	40020470 	.word	0x40020470
 8003ca4:	40020488 	.word	0x40020488
 8003ca8:	400204a0 	.word	0x400204a0
 8003cac:	400204b8 	.word	0x400204b8

08003cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce0 <HAL_MspInit+0x30>)
 8003cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003cbc:	4a08      	ldr	r2, [pc, #32]	@ (8003ce0 <HAL_MspInit+0x30>)
 8003cbe:	f043 0302 	orr.w	r3, r3, #2
 8003cc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003cc6:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <HAL_MspInit+0x30>)
 8003cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	58024400 	.word	0x58024400

08003ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <NMI_Handler+0x4>

08003cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <HardFault_Handler+0x4>

08003cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <MemManage_Handler+0x4>

08003cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <BusFault_Handler+0x4>

08003d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <UsageFault_Handler+0x4>

08003d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d3a:	f001 fa1f 	bl	800517c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003d48:	4802      	ldr	r0, [pc, #8]	@ (8003d54 <DMA1_Stream0_IRQHandler+0x10>)
 8003d4a:	f004 fbc7 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	24001410 	.word	0x24001410

08003d58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003d5c:	4802      	ldr	r0, [pc, #8]	@ (8003d68 <DMA1_Stream1_IRQHandler+0x10>)
 8003d5e:	f004 fbbd 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	24001488 	.word	0x24001488

08003d6c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d70:	4802      	ldr	r0, [pc, #8]	@ (8003d7c <DMA1_Stream2_IRQHandler+0x10>)
 8003d72:	f004 fbb3 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	24001230 	.word	0x24001230

08003d80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003d84:	4802      	ldr	r0, [pc, #8]	@ (8003d90 <DMA1_Stream3_IRQHandler+0x10>)
 8003d86:	f004 fba9 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	240012a8 	.word	0x240012a8

08003d94 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003d98:	4802      	ldr	r0, [pc, #8]	@ (8003da4 <DMA1_Stream4_IRQHandler+0x10>)
 8003d9a:	f004 fb9f 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	24001050 	.word	0x24001050

08003da8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003dac:	4802      	ldr	r0, [pc, #8]	@ (8003db8 <DMA1_Stream5_IRQHandler+0x10>)
 8003dae:	f004 fb95 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	240010c8 	.word	0x240010c8

08003dbc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003dc0:	4802      	ldr	r0, [pc, #8]	@ (8003dcc <DMA1_Stream6_IRQHandler+0x10>)
 8003dc2:	f004 fb8b 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	24001320 	.word	0x24001320

08003dd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003dd4:	4802      	ldr	r0, [pc, #8]	@ (8003de0 <TIM4_IRQHandler+0x10>)
 8003dd6:	f00a fd07 	bl	800e7e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	24000d20 	.word	0x24000d20

08003de4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003de8:	4802      	ldr	r0, [pc, #8]	@ (8003df4 <USART1_IRQHandler+0x10>)
 8003dea:	f00b fa77 	bl	800f2dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	24000e94 	.word	0x24000e94

08003df8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003dfc:	4802      	ldr	r0, [pc, #8]	@ (8003e08 <USART3_IRQHandler+0x10>)
 8003dfe:	f00b fa6d 	bl	800f2dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	24000f28 	.word	0x24000f28

08003e0c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003e10:	4802      	ldr	r0, [pc, #8]	@ (8003e1c <DMA1_Stream7_IRQHandler+0x10>)
 8003e12:	f004 fb63 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	24001398 	.word	0x24001398

08003e20 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003e24:	4802      	ldr	r0, [pc, #8]	@ (8003e30 <UART4_IRQHandler+0x10>)
 8003e26:	f00b fa59 	bl	800f2dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	24000d6c 	.word	0x24000d6c

08003e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003e38:	4802      	ldr	r0, [pc, #8]	@ (8003e44 <DMA2_Stream0_IRQHandler+0x10>)
 8003e3a:	f004 fb4f 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	24001140 	.word	0x24001140

08003e48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003e4c:	4802      	ldr	r0, [pc, #8]	@ (8003e58 <DMA2_Stream1_IRQHandler+0x10>)
 8003e4e:	f004 fb45 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	240011b8 	.word	0x240011b8

08003e5c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003e60:	4802      	ldr	r0, [pc, #8]	@ (8003e6c <USART6_IRQHandler+0x10>)
 8003e62:	f00b fa3b 	bl	800f2dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	24000fbc 	.word	0x24000fbc

08003e70 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003e74:	4802      	ldr	r0, [pc, #8]	@ (8003e80 <UART7_IRQHandler+0x10>)
 8003e76:	f00b fa31 	bl	800f2dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	24000e00 	.word	0x24000e00

08003e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return 1;
 8003e88:	2301      	movs	r3, #1
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <_kill>:

int _kill(int pid, int sig)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e9e:	f00e fa7f 	bl	80123a0 <__errno>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2216      	movs	r2, #22
 8003ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <_exit>:

void _exit (int status)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ffe7 	bl	8003e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <_exit+0x12>

08003eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e00a      	b.n	8003ef2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003edc:	f3af 8000 	nop.w
 8003ee0:	4601      	mov	r1, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	60ba      	str	r2, [r7, #8]
 8003ee8:	b2ca      	uxtb	r2, r1
 8003eea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	dbf0      	blt.n	8003edc <_read+0x12>
  }

  return len;
 8003efa:	687b      	ldr	r3, [r7, #4]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f2c:	605a      	str	r2, [r3, #4]
  return 0;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <_isatty>:

int _isatty(int file)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f44:	2301      	movs	r3, #1
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f74:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <_sbrk+0x5c>)
 8003f76:	4b15      	ldr	r3, [pc, #84]	@ (8003fcc <_sbrk+0x60>)
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f80:	4b13      	ldr	r3, [pc, #76]	@ (8003fd0 <_sbrk+0x64>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f88:	4b11      	ldr	r3, [pc, #68]	@ (8003fd0 <_sbrk+0x64>)
 8003f8a:	4a12      	ldr	r2, [pc, #72]	@ (8003fd4 <_sbrk+0x68>)
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f8e:	4b10      	ldr	r3, [pc, #64]	@ (8003fd0 <_sbrk+0x64>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d207      	bcs.n	8003fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f9c:	f00e fa00 	bl	80123a0 <__errno>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	220c      	movs	r2, #12
 8003fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	e009      	b.n	8003fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fac:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <_sbrk+0x64>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fb2:	4b07      	ldr	r3, [pc, #28]	@ (8003fd0 <_sbrk+0x64>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	4a05      	ldr	r2, [pc, #20]	@ (8003fd0 <_sbrk+0x64>)
 8003fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	24080000 	.word	0x24080000
 8003fcc:	00000400 	.word	0x00000400
 8003fd0:	24000d18 	.word	0x24000d18
 8003fd4:	24001650 	.word	0x24001650

08003fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fdc:	4b43      	ldr	r3, [pc, #268]	@ (80040ec <SystemInit+0x114>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	4a42      	ldr	r2, [pc, #264]	@ (80040ec <SystemInit+0x114>)
 8003fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fec:	4b40      	ldr	r3, [pc, #256]	@ (80040f0 <SystemInit+0x118>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	2b06      	cmp	r3, #6
 8003ff6:	d807      	bhi.n	8004008 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ff8:	4b3d      	ldr	r3, [pc, #244]	@ (80040f0 <SystemInit+0x118>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 030f 	bic.w	r3, r3, #15
 8004000:	4a3b      	ldr	r2, [pc, #236]	@ (80040f0 <SystemInit+0x118>)
 8004002:	f043 0307 	orr.w	r3, r3, #7
 8004006:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004008:	4b3a      	ldr	r3, [pc, #232]	@ (80040f4 <SystemInit+0x11c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a39      	ldr	r2, [pc, #228]	@ (80040f4 <SystemInit+0x11c>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004014:	4b37      	ldr	r3, [pc, #220]	@ (80040f4 <SystemInit+0x11c>)
 8004016:	2200      	movs	r2, #0
 8004018:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800401a:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <SystemInit+0x11c>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4935      	ldr	r1, [pc, #212]	@ (80040f4 <SystemInit+0x11c>)
 8004020:	4b35      	ldr	r3, [pc, #212]	@ (80040f8 <SystemInit+0x120>)
 8004022:	4013      	ands	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004026:	4b32      	ldr	r3, [pc, #200]	@ (80040f0 <SystemInit+0x118>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004032:	4b2f      	ldr	r3, [pc, #188]	@ (80040f0 <SystemInit+0x118>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 030f 	bic.w	r3, r3, #15
 800403a:	4a2d      	ldr	r2, [pc, #180]	@ (80040f0 <SystemInit+0x118>)
 800403c:	f043 0307 	orr.w	r3, r3, #7
 8004040:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004042:	4b2c      	ldr	r3, [pc, #176]	@ (80040f4 <SystemInit+0x11c>)
 8004044:	2200      	movs	r2, #0
 8004046:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004048:	4b2a      	ldr	r3, [pc, #168]	@ (80040f4 <SystemInit+0x11c>)
 800404a:	2200      	movs	r2, #0
 800404c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800404e:	4b29      	ldr	r3, [pc, #164]	@ (80040f4 <SystemInit+0x11c>)
 8004050:	2200      	movs	r2, #0
 8004052:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004054:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <SystemInit+0x11c>)
 8004056:	4a29      	ldr	r2, [pc, #164]	@ (80040fc <SystemInit+0x124>)
 8004058:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800405a:	4b26      	ldr	r3, [pc, #152]	@ (80040f4 <SystemInit+0x11c>)
 800405c:	4a28      	ldr	r2, [pc, #160]	@ (8004100 <SystemInit+0x128>)
 800405e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004060:	4b24      	ldr	r3, [pc, #144]	@ (80040f4 <SystemInit+0x11c>)
 8004062:	4a28      	ldr	r2, [pc, #160]	@ (8004104 <SystemInit+0x12c>)
 8004064:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004066:	4b23      	ldr	r3, [pc, #140]	@ (80040f4 <SystemInit+0x11c>)
 8004068:	2200      	movs	r2, #0
 800406a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800406c:	4b21      	ldr	r3, [pc, #132]	@ (80040f4 <SystemInit+0x11c>)
 800406e:	4a25      	ldr	r2, [pc, #148]	@ (8004104 <SystemInit+0x12c>)
 8004070:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004072:	4b20      	ldr	r3, [pc, #128]	@ (80040f4 <SystemInit+0x11c>)
 8004074:	2200      	movs	r2, #0
 8004076:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004078:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <SystemInit+0x11c>)
 800407a:	4a22      	ldr	r2, [pc, #136]	@ (8004104 <SystemInit+0x12c>)
 800407c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800407e:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <SystemInit+0x11c>)
 8004080:	2200      	movs	r2, #0
 8004082:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004084:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <SystemInit+0x11c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1a      	ldr	r2, [pc, #104]	@ (80040f4 <SystemInit+0x11c>)
 800408a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800408e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004090:	4b18      	ldr	r3, [pc, #96]	@ (80040f4 <SystemInit+0x11c>)
 8004092:	2200      	movs	r2, #0
 8004094:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004096:	4b1c      	ldr	r3, [pc, #112]	@ (8004108 <SystemInit+0x130>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b1c      	ldr	r3, [pc, #112]	@ (800410c <SystemInit+0x134>)
 800409c:	4013      	ands	r3, r2
 800409e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040a2:	d202      	bcs.n	80040aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80040a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <SystemInit+0x138>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80040aa:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <SystemInit+0x11c>)
 80040ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80040b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d113      	bne.n	80040e0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80040b8:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <SystemInit+0x11c>)
 80040ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80040be:	4a0d      	ldr	r2, [pc, #52]	@ (80040f4 <SystemInit+0x11c>)
 80040c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040c8:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <SystemInit+0x13c>)
 80040ca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80040ce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80040d0:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <SystemInit+0x11c>)
 80040d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80040d6:	4a07      	ldr	r2, [pc, #28]	@ (80040f4 <SystemInit+0x11c>)
 80040d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000ed00 	.word	0xe000ed00
 80040f0:	52002000 	.word	0x52002000
 80040f4:	58024400 	.word	0x58024400
 80040f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80040fc:	02020200 	.word	0x02020200
 8004100:	01ff0000 	.word	0x01ff0000
 8004104:	01010280 	.word	0x01010280
 8004108:	5c001000 	.word	0x5c001000
 800410c:	ffff0000 	.word	0xffff0000
 8004110:	51008108 	.word	0x51008108
 8004114:	52004000 	.word	0x52004000

08004118 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <ExitRun0Mode+0x2c>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <ExitRun0Mode+0x2c>)
 8004122:	f043 0302 	orr.w	r3, r3, #2
 8004126:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8004128:	bf00      	nop
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <ExitRun0Mode+0x2c>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f9      	beq.n	800412a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	58024800 	.word	0x58024800

08004148 <Read_Temperature>:

void TempSensor_Init(void) {
    HAL_ADC_Start(&hadc2);
}

float Read_Temperature(void) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc2);
 800414e:	484f      	ldr	r0, [pc, #316]	@ (800428c <Read_Temperature+0x144>)
 8004150:	f001 fc6c 	bl	8005a2c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, 100) != HAL_OK) {
 8004154:	2164      	movs	r1, #100	@ 0x64
 8004156:	484d      	ldr	r0, [pc, #308]	@ (800428c <Read_Temperature+0x144>)
 8004158:	f001 fd66 	bl	8005c28 <HAL_ADC_PollForConversion>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d004      	beq.n	800416c <Read_Temperature+0x24>
        HAL_ADC_Stop(&hadc2);
 8004162:	484a      	ldr	r0, [pc, #296]	@ (800428c <Read_Temperature+0x144>)
 8004164:	f001 fd2c 	bl	8005bc0 <HAL_ADC_Stop>
        return -100.0f;
 8004168:	4b49      	ldr	r3, [pc, #292]	@ (8004290 <Read_Temperature+0x148>)
 800416a:	e088      	b.n	800427e <Read_Temperature+0x136>
    }

    uint32_t raw = HAL_ADC_GetValue(&hadc2);
 800416c:	4847      	ldr	r0, [pc, #284]	@ (800428c <Read_Temperature+0x144>)
 800416e:	f001 fe4f 	bl	8005e10 <HAL_ADC_GetValue>
 8004172:	6138      	str	r0, [r7, #16]
    static float filt = 0;
    filt += ((float)raw - filt) * 0.0625f;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800417e:	4b45      	ldr	r3, [pc, #276]	@ (8004294 <Read_Temperature+0x14c>)
 8004180:	edd3 7a00 	vldr	s15, [r3]
 8004184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004188:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8004298 <Read_Temperature+0x150>
 800418c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004190:	4b40      	ldr	r3, [pc, #256]	@ (8004294 <Read_Temperature+0x14c>)
 8004192:	edd3 7a00 	vldr	s15, [r3]
 8004196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800419a:	4b3e      	ldr	r3, [pc, #248]	@ (8004294 <Read_Temperature+0x14c>)
 800419c:	edc3 7a00 	vstr	s15, [r3]
    float adc_value = filt;
 80041a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004294 <Read_Temperature+0x14c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]

    float Vadc = (adc_value / 65535.0f) * VREF;
 80041a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80041aa:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800429c <Read_Temperature+0x154>
 80041ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041b2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80042a0 <Read_Temperature+0x158>
 80041b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ba:	edc7 7a02 	vstr	s15, [r7, #8]
    if (Vadc <= 0.0f || Vadc >= VREF) {
 80041be:	edd7 7a02 	vldr	s15, [r7, #8]
 80041c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ca:	d908      	bls.n	80041de <Read_Temperature+0x96>
 80041cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80041d0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80042a0 <Read_Temperature+0x158>
 80041d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041dc:	db04      	blt.n	80041e8 <Read_Temperature+0xa0>
        HAL_ADC_Stop(&hadc2);
 80041de:	482b      	ldr	r0, [pc, #172]	@ (800428c <Read_Temperature+0x144>)
 80041e0:	f001 fcee 	bl	8005bc0 <HAL_ADC_Stop>
        return -100.0f;
 80041e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004290 <Read_Temperature+0x148>)
 80041e6:	e04a      	b.n	800427e <Read_Temperature+0x136>
    }

    float Rntc = R_PULL * (Vadc / (VREF - Vadc));
 80041e8:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80042a0 <Read_Temperature+0x158>
 80041ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80041f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041f4:	edd7 6a02 	vldr	s13, [r7, #8]
 80041f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041fc:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80042a4 <Read_Temperature+0x15c>
 8004200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004204:	edc7 7a01 	vstr	s15, [r7, #4]
    float invT = (1.0f / T0) + (1.0f / BETA) * logf(Rntc / R0);
 8004208:	edd7 7a01 	vldr	s15, [r7, #4]
 800420c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80042a4 <Read_Temperature+0x15c>
 8004210:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004214:	eeb0 0a47 	vmov.f32	s0, s14
 8004218:	f011 fb2c 	bl	8015874 <logf>
 800421c:	eef0 7a40 	vmov.f32	s15, s0
 8004220:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80042a8 <Read_Temperature+0x160>
 8004224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004228:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80042ac <Read_Temperature+0x164>
 800422c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004230:	edc7 7a00 	vstr	s15, [r7]
    float Tc = (1.0f / invT) - 273.15f;
 8004234:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004238:	ed97 7a00 	vldr	s14, [r7]
 800423c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004240:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80042b0 <Read_Temperature+0x168>
 8004244:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004248:	edc7 7a05 	vstr	s15, [r7, #20]

    if (Tc < 0.0f) Tc = 0.0f;
 800424c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004250:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004258:	d502      	bpl.n	8004260 <Read_Temperature+0x118>
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
    if (Tc > 150.0f) Tc = 150.0f;
 8004260:	edd7 7a05 	vldr	s15, [r7, #20]
 8004264:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80042b4 <Read_Temperature+0x16c>
 8004268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004270:	dd01      	ble.n	8004276 <Read_Temperature+0x12e>
 8004272:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <Read_Temperature+0x170>)
 8004274:	617b      	str	r3, [r7, #20]

    HAL_ADC_Stop(&hadc2);
 8004276:	4805      	ldr	r0, [pc, #20]	@ (800428c <Read_Temperature+0x144>)
 8004278:	f001 fca2 	bl	8005bc0 <HAL_ADC_Stop>
    return Tc;
 800427c:	697b      	ldr	r3, [r7, #20]
}
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eeb0 0a67 	vmov.f32	s0, s15
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	24000270 	.word	0x24000270
 8004290:	c2c80000 	.word	0xc2c80000
 8004294:	24000d1c 	.word	0x24000d1c
 8004298:	3d800000 	.word	0x3d800000
 800429c:	477fff00 	.word	0x477fff00
 80042a0:	40533333 	.word	0x40533333
 80042a4:	461c4000 	.word	0x461c4000
 80042a8:	3984bb2c 	.word	0x3984bb2c
 80042ac:	3b5bcf0f 	.word	0x3b5bcf0f
 80042b0:	43889333 	.word	0x43889333
 80042b4:	43160000 	.word	0x43160000
 80042b8:	43160000 	.word	0x43160000

080042bc <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042c2:	f107 0310 	add.w	r3, r7, #16
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	609a      	str	r2, [r3, #8]
 80042ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042d0:	1d3b      	adds	r3, r7, #4
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042da:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <MX_TIM4_Init+0x98>)
 80042dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004358 <MX_TIM4_Init+0x9c>)
 80042de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 80042e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004354 <MX_TIM4_Init+0x98>)
 80042e2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80042e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <MX_TIM4_Init+0x98>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80042ee:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <MX_TIM4_Init+0x98>)
 80042f0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80042f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042f6:	4b17      	ldr	r3, [pc, #92]	@ (8004354 <MX_TIM4_Init+0x98>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042fc:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <MX_TIM4_Init+0x98>)
 80042fe:	2200      	movs	r2, #0
 8004300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004302:	4814      	ldr	r0, [pc, #80]	@ (8004354 <MX_TIM4_Init+0x98>)
 8004304:	f00a fa19 	bl	800e73a <HAL_TIM_Base_Init>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800430e:	f7fd fd2a 	bl	8001d66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	4619      	mov	r1, r3
 800431e:	480d      	ldr	r0, [pc, #52]	@ (8004354 <MX_TIM4_Init+0x98>)
 8004320:	f00a fb6a 	bl	800e9f8 <HAL_TIM_ConfigClockSource>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800432a:	f7fd fd1c 	bl	8001d66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004336:	1d3b      	adds	r3, r7, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4806      	ldr	r0, [pc, #24]	@ (8004354 <MX_TIM4_Init+0x98>)
 800433c:	f00a fdc4 	bl	800eec8 <HAL_TIMEx_MasterConfigSynchronization>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004346:	f7fd fd0e 	bl	8001d66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800434a:	bf00      	nop
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	24000d20 	.word	0x24000d20
 8004358:	40000800 	.word	0x40000800

0800435c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0e      	ldr	r2, [pc, #56]	@ (80043a4 <HAL_TIM_Base_MspInit+0x48>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d116      	bne.n	800439c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800436e:	4b0e      	ldr	r3, [pc, #56]	@ (80043a8 <HAL_TIM_Base_MspInit+0x4c>)
 8004370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004374:	4a0c      	ldr	r2, [pc, #48]	@ (80043a8 <HAL_TIM_Base_MspInit+0x4c>)
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800437e:	4b0a      	ldr	r3, [pc, #40]	@ (80043a8 <HAL_TIM_Base_MspInit+0x4c>)
 8004380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800438c:	2200      	movs	r2, #0
 800438e:	2100      	movs	r1, #0
 8004390:	201e      	movs	r0, #30
 8004392:	f002 fccc 	bl	8006d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004396:	201e      	movs	r0, #30
 8004398:	f002 fce3 	bl	8006d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40000800 	.word	0x40000800
 80043a8:	58024400 	.word	0x58024400

080043ac <HAL_UARTEx_RxEventCallback>:
#include "usart.h"

/* USER CODE BEGIN 0 */

// 串口接收完成回调
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART6)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a13      	ldr	r2, [pc, #76]	@ (800440c <HAL_UARTEx_RxEventCallback+0x60>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d103      	bne.n	80043ca <HAL_UARTEx_RxEventCallback+0x1e>
	    {
		    rx_pump_flag = 1;
 80043c2:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <HAL_UARTEx_RxEventCallback+0x64>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
    	    rx_stir_flag = 1;
        }
    else if (huart->Instance == UART4) {
        	 rx_ox_flag = 1;
            }
}
 80043c8:	e019      	b.n	80043fe <HAL_UARTEx_RxEventCallback+0x52>
    else if (huart->Instance == USART3) {
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a11      	ldr	r2, [pc, #68]	@ (8004414 <HAL_UARTEx_RxEventCallback+0x68>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d103      	bne.n	80043dc <HAL_UARTEx_RxEventCallback+0x30>
    	     rx_ph_flag = 1;
 80043d4:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <HAL_UARTEx_RxEventCallback+0x6c>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
}
 80043da:	e010      	b.n	80043fe <HAL_UARTEx_RxEventCallback+0x52>
    else if (huart->Instance == UART7) {
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0e      	ldr	r2, [pc, #56]	@ (800441c <HAL_UARTEx_RxEventCallback+0x70>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d103      	bne.n	80043ee <HAL_UARTEx_RxEventCallback+0x42>
    	    rx_stir_flag = 1;
 80043e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <HAL_UARTEx_RxEventCallback+0x74>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
}
 80043ec:	e007      	b.n	80043fe <HAL_UARTEx_RxEventCallback+0x52>
    else if (huart->Instance == UART4) {
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004424 <HAL_UARTEx_RxEventCallback+0x78>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d102      	bne.n	80043fe <HAL_UARTEx_RxEventCallback+0x52>
        	 rx_ox_flag = 1;
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_UARTEx_RxEventCallback+0x7c>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40011400 	.word	0x40011400
 8004410:	24000a89 	.word	0x24000a89
 8004414:	40004800 	.word	0x40004800
 8004418:	24000874 	.word	0x24000874
 800441c:	40007800 	.word	0x40007800
 8004420:	24000d15 	.word	0x24000d15
 8004424:	40004c00 	.word	0x40004c00
 8004428:	24000661 	.word	0x24000661

0800442c <HAL_UART_TxCpltCallback>:

// ================= 发送完成回调 =================
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a17      	ldr	r2, [pc, #92]	@ (8004498 <HAL_UART_TxCpltCallback+0x6c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d103      	bne.n	8004446 <HAL_UART_TxCpltCallback+0x1a>
    {
        tx_pump_flag = 1;
 800443e:	4b17      	ldr	r3, [pc, #92]	@ (800449c <HAL_UART_TxCpltCallback+0x70>)
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
    else if(huart->Instance == USART1)
    {
        tx_busy = 0;  // 标记空闲
    }

}
 8004444:	e022      	b.n	800448c <HAL_UART_TxCpltCallback+0x60>
    else if (huart->Instance == USART3)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a15      	ldr	r2, [pc, #84]	@ (80044a0 <HAL_UART_TxCpltCallback+0x74>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d103      	bne.n	8004458 <HAL_UART_TxCpltCallback+0x2c>
            tx_ph_flag = 1;
 8004450:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <HAL_UART_TxCpltCallback+0x78>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
}
 8004456:	e019      	b.n	800448c <HAL_UART_TxCpltCallback+0x60>
    else if (huart->Instance == UART7)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a12      	ldr	r2, [pc, #72]	@ (80044a8 <HAL_UART_TxCpltCallback+0x7c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d103      	bne.n	800446a <HAL_UART_TxCpltCallback+0x3e>
                tx_stir_flag = 1;
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <HAL_UART_TxCpltCallback+0x80>)
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
}
 8004468:	e010      	b.n	800448c <HAL_UART_TxCpltCallback+0x60>
    else if (huart->Instance == UART4)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a10      	ldr	r2, [pc, #64]	@ (80044b0 <HAL_UART_TxCpltCallback+0x84>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d103      	bne.n	800447c <HAL_UART_TxCpltCallback+0x50>
                    tx_ox_flag = 1;
 8004474:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <HAL_UART_TxCpltCallback+0x88>)
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
}
 800447a:	e007      	b.n	800448c <HAL_UART_TxCpltCallback+0x60>
    else if(huart->Instance == USART1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0d      	ldr	r2, [pc, #52]	@ (80044b8 <HAL_UART_TxCpltCallback+0x8c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d102      	bne.n	800448c <HAL_UART_TxCpltCallback+0x60>
        tx_busy = 0;  // 标记空闲
 8004486:	4b0d      	ldr	r3, [pc, #52]	@ (80044bc <HAL_UART_TxCpltCallback+0x90>)
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40011400 	.word	0x40011400
 800449c:	24000a88 	.word	0x24000a88
 80044a0:	40004800 	.word	0x40004800
 80044a4:	24000875 	.word	0x24000875
 80044a8:	40007800 	.word	0x40007800
 80044ac:	24000d14 	.word	0x24000d14
 80044b0:	40004c00 	.word	0x40004c00
 80044b4:	24000660 	.word	0x24000660
 80044b8:	40011000 	.word	0x40011000
 80044bc:	240003d8 	.word	0x240003d8

080044c0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80044c4:	4b22      	ldr	r3, [pc, #136]	@ (8004550 <MX_UART4_Init+0x90>)
 80044c6:	4a23      	ldr	r2, [pc, #140]	@ (8004554 <MX_UART4_Init+0x94>)
 80044c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80044ca:	4b21      	ldr	r3, [pc, #132]	@ (8004550 <MX_UART4_Init+0x90>)
 80044cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80044d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80044d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004550 <MX_UART4_Init+0x90>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80044d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <MX_UART4_Init+0x90>)
 80044da:	2200      	movs	r2, #0
 80044dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80044de:	4b1c      	ldr	r3, [pc, #112]	@ (8004550 <MX_UART4_Init+0x90>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80044e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <MX_UART4_Init+0x90>)
 80044e6:	220c      	movs	r2, #12
 80044e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ea:	4b19      	ldr	r3, [pc, #100]	@ (8004550 <MX_UART4_Init+0x90>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80044f0:	4b17      	ldr	r3, [pc, #92]	@ (8004550 <MX_UART4_Init+0x90>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044f6:	4b16      	ldr	r3, [pc, #88]	@ (8004550 <MX_UART4_Init+0x90>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80044fc:	4b14      	ldr	r3, [pc, #80]	@ (8004550 <MX_UART4_Init+0x90>)
 80044fe:	2200      	movs	r2, #0
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004502:	4b13      	ldr	r3, [pc, #76]	@ (8004550 <MX_UART4_Init+0x90>)
 8004504:	2200      	movs	r2, #0
 8004506:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004508:	4811      	ldr	r0, [pc, #68]	@ (8004550 <MX_UART4_Init+0x90>)
 800450a:	f00a fd89 	bl	800f020 <HAL_UART_Init>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8004514:	f7fd fc27 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004518:	2100      	movs	r1, #0
 800451a:	480d      	ldr	r0, [pc, #52]	@ (8004550 <MX_UART4_Init+0x90>)
 800451c:	f00c fd2c 	bl	8010f78 <HAL_UARTEx_SetTxFifoThreshold>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8004526:	f7fd fc1e 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800452a:	2100      	movs	r1, #0
 800452c:	4808      	ldr	r0, [pc, #32]	@ (8004550 <MX_UART4_Init+0x90>)
 800452e:	f00c fd61 	bl	8010ff4 <HAL_UARTEx_SetRxFifoThreshold>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8004538:	f7fd fc15 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800453c:	4804      	ldr	r0, [pc, #16]	@ (8004550 <MX_UART4_Init+0x90>)
 800453e:	f00c fce2 	bl	8010f06 <HAL_UARTEx_DisableFifoMode>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8004548:	f7fd fc0d 	bl	8001d66 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800454c:	bf00      	nop
 800454e:	bd80      	pop	{r7, pc}
 8004550:	24000d6c 	.word	0x24000d6c
 8004554:	40004c00 	.word	0x40004c00

08004558 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800455c:	4b22      	ldr	r3, [pc, #136]	@ (80045e8 <MX_UART7_Init+0x90>)
 800455e:	4a23      	ldr	r2, [pc, #140]	@ (80045ec <MX_UART7_Init+0x94>)
 8004560:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 19200;
 8004562:	4b21      	ldr	r3, [pc, #132]	@ (80045e8 <MX_UART7_Init+0x90>)
 8004564:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8004568:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800456a:	4b1f      	ldr	r3, [pc, #124]	@ (80045e8 <MX_UART7_Init+0x90>)
 800456c:	2200      	movs	r2, #0
 800456e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004570:	4b1d      	ldr	r3, [pc, #116]	@ (80045e8 <MX_UART7_Init+0x90>)
 8004572:	2200      	movs	r2, #0
 8004574:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004576:	4b1c      	ldr	r3, [pc, #112]	@ (80045e8 <MX_UART7_Init+0x90>)
 8004578:	2200      	movs	r2, #0
 800457a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800457c:	4b1a      	ldr	r3, [pc, #104]	@ (80045e8 <MX_UART7_Init+0x90>)
 800457e:	220c      	movs	r2, #12
 8004580:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004582:	4b19      	ldr	r3, [pc, #100]	@ (80045e8 <MX_UART7_Init+0x90>)
 8004584:	2200      	movs	r2, #0
 8004586:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004588:	4b17      	ldr	r3, [pc, #92]	@ (80045e8 <MX_UART7_Init+0x90>)
 800458a:	2200      	movs	r2, #0
 800458c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800458e:	4b16      	ldr	r3, [pc, #88]	@ (80045e8 <MX_UART7_Init+0x90>)
 8004590:	2200      	movs	r2, #0
 8004592:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004594:	4b14      	ldr	r3, [pc, #80]	@ (80045e8 <MX_UART7_Init+0x90>)
 8004596:	2200      	movs	r2, #0
 8004598:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800459a:	4b13      	ldr	r3, [pc, #76]	@ (80045e8 <MX_UART7_Init+0x90>)
 800459c:	2200      	movs	r2, #0
 800459e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80045a0:	4811      	ldr	r0, [pc, #68]	@ (80045e8 <MX_UART7_Init+0x90>)
 80045a2:	f00a fd3d 	bl	800f020 <HAL_UART_Init>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80045ac:	f7fd fbdb 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045b0:	2100      	movs	r1, #0
 80045b2:	480d      	ldr	r0, [pc, #52]	@ (80045e8 <MX_UART7_Init+0x90>)
 80045b4:	f00c fce0 	bl	8010f78 <HAL_UARTEx_SetTxFifoThreshold>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80045be:	f7fd fbd2 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045c2:	2100      	movs	r1, #0
 80045c4:	4808      	ldr	r0, [pc, #32]	@ (80045e8 <MX_UART7_Init+0x90>)
 80045c6:	f00c fd15 	bl	8010ff4 <HAL_UARTEx_SetRxFifoThreshold>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80045d0:	f7fd fbc9 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80045d4:	4804      	ldr	r0, [pc, #16]	@ (80045e8 <MX_UART7_Init+0x90>)
 80045d6:	f00c fc96 	bl	8010f06 <HAL_UARTEx_DisableFifoMode>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80045e0:	f7fd fbc1 	bl	8001d66 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80045e4:	bf00      	nop
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	24000e00 	.word	0x24000e00
 80045ec:	40007800 	.word	0x40007800

080045f0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045f4:	4b22      	ldr	r3, [pc, #136]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 80045f6:	4a23      	ldr	r2, [pc, #140]	@ (8004684 <MX_USART1_UART_Init+0x94>)
 80045f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045fa:	4b21      	ldr	r3, [pc, #132]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 80045fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004602:	4b1f      	ldr	r3, [pc, #124]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 8004604:	2200      	movs	r2, #0
 8004606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004608:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 800460a:	2200      	movs	r2, #0
 800460c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800460e:	4b1c      	ldr	r3, [pc, #112]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 8004610:	2200      	movs	r2, #0
 8004612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004614:	4b1a      	ldr	r3, [pc, #104]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 8004616:	220c      	movs	r2, #12
 8004618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800461a:	4b19      	ldr	r3, [pc, #100]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 800461c:	2200      	movs	r2, #0
 800461e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004620:	4b17      	ldr	r3, [pc, #92]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 8004622:	2200      	movs	r2, #0
 8004624:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004626:	4b16      	ldr	r3, [pc, #88]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 8004628:	2200      	movs	r2, #0
 800462a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800462c:	4b14      	ldr	r3, [pc, #80]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 800462e:	2200      	movs	r2, #0
 8004630:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004632:	4b13      	ldr	r3, [pc, #76]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 8004634:	2200      	movs	r2, #0
 8004636:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004638:	4811      	ldr	r0, [pc, #68]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 800463a:	f00a fcf1 	bl	800f020 <HAL_UART_Init>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004644:	f7fd fb8f 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004648:	2100      	movs	r1, #0
 800464a:	480d      	ldr	r0, [pc, #52]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 800464c:	f00c fc94 	bl	8010f78 <HAL_UARTEx_SetTxFifoThreshold>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004656:	f7fd fb86 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800465a:	2100      	movs	r1, #0
 800465c:	4808      	ldr	r0, [pc, #32]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 800465e:	f00c fcc9 	bl	8010ff4 <HAL_UARTEx_SetRxFifoThreshold>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004668:	f7fd fb7d 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800466c:	4804      	ldr	r0, [pc, #16]	@ (8004680 <MX_USART1_UART_Init+0x90>)
 800466e:	f00c fc4a 	bl	8010f06 <HAL_UARTEx_DisableFifoMode>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004678:	f7fd fb75 	bl	8001d66 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800467c:	bf00      	nop
 800467e:	bd80      	pop	{r7, pc}
 8004680:	24000e94 	.word	0x24000e94
 8004684:	40011000 	.word	0x40011000

08004688 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800468c:	4b22      	ldr	r3, [pc, #136]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 800468e:	4a23      	ldr	r2, [pc, #140]	@ (800471c <MX_USART3_UART_Init+0x94>)
 8004690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8004692:	4b21      	ldr	r3, [pc, #132]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 8004694:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8004698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800469a:	4b1f      	ldr	r3, [pc, #124]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 800469c:	2200      	movs	r2, #0
 800469e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046ae:	220c      	movs	r2, #12
 80046b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046b2:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046b8:	4b17      	ldr	r3, [pc, #92]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046be:	4b16      	ldr	r3, [pc, #88]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046c4:	4b14      	ldr	r3, [pc, #80]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046ca:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046d0:	4811      	ldr	r0, [pc, #68]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046d2:	f00a fca5 	bl	800f020 <HAL_UART_Init>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80046dc:	f7fd fb43 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046e0:	2100      	movs	r1, #0
 80046e2:	480d      	ldr	r0, [pc, #52]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046e4:	f00c fc48 	bl	8010f78 <HAL_UARTEx_SetTxFifoThreshold>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80046ee:	f7fd fb3a 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046f2:	2100      	movs	r1, #0
 80046f4:	4808      	ldr	r0, [pc, #32]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 80046f6:	f00c fc7d 	bl	8010ff4 <HAL_UARTEx_SetRxFifoThreshold>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004700:	f7fd fb31 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004704:	4804      	ldr	r0, [pc, #16]	@ (8004718 <MX_USART3_UART_Init+0x90>)
 8004706:	f00c fbfe 	bl	8010f06 <HAL_UARTEx_DisableFifoMode>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004710:	f7fd fb29 	bl	8001d66 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}
 8004718:	24000f28 	.word	0x24000f28
 800471c:	40004800 	.word	0x40004800

08004720 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004724:	4b22      	ldr	r3, [pc, #136]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 8004726:	4a23      	ldr	r2, [pc, #140]	@ (80047b4 <MX_USART6_UART_Init+0x94>)
 8004728:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800472a:	4b21      	ldr	r3, [pc, #132]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 800472c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004730:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004732:	4b1f      	ldr	r3, [pc, #124]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 8004734:	2200      	movs	r2, #0
 8004736:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004738:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 800473a:	2200      	movs	r2, #0
 800473c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800473e:	4b1c      	ldr	r3, [pc, #112]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 8004740:	2200      	movs	r2, #0
 8004742:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004744:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 8004746:	220c      	movs	r2, #12
 8004748:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800474a:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 800474c:	2200      	movs	r2, #0
 800474e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004750:	4b17      	ldr	r3, [pc, #92]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004756:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 8004758:	2200      	movs	r2, #0
 800475a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800475c:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 800475e:	2200      	movs	r2, #0
 8004760:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004762:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 8004764:	2200      	movs	r2, #0
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004768:	4811      	ldr	r0, [pc, #68]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 800476a:	f00a fc59 	bl	800f020 <HAL_UART_Init>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004774:	f7fd faf7 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004778:	2100      	movs	r1, #0
 800477a:	480d      	ldr	r0, [pc, #52]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 800477c:	f00c fbfc 	bl	8010f78 <HAL_UARTEx_SetTxFifoThreshold>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8004786:	f7fd faee 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800478a:	2100      	movs	r1, #0
 800478c:	4808      	ldr	r0, [pc, #32]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 800478e:	f00c fc31 	bl	8010ff4 <HAL_UARTEx_SetRxFifoThreshold>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004798:	f7fd fae5 	bl	8001d66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800479c:	4804      	ldr	r0, [pc, #16]	@ (80047b0 <MX_USART6_UART_Init+0x90>)
 800479e:	f00c fbb2 	bl	8010f06 <HAL_UARTEx_DisableFifoMode>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80047a8:	f7fd fadd 	bl	8001d66 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	24000fbc 	.word	0x24000fbc
 80047b4:	40011400 	.word	0x40011400

080047b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b0c2      	sub	sp, #264	@ 0x108
 80047bc:	af00      	add	r7, sp, #0
 80047be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047c6:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047dc:	22c0      	movs	r2, #192	@ 0xc0
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f00d fd8b 	bl	80122fc <memset>
  if(uartHandle->Instance==UART4)
 80047e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004970 <HAL_UART_MspInit+0x1b8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	f040 80c9 	bne.w	800498c <HAL_UART_MspInit+0x1d4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80047fa:	f04f 0202 	mov.w	r2, #2
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800480c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004810:	4618      	mov	r0, r3
 8004812:	f006 fb5f 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 800481c:	f7fd faa3 	bl	8001d66 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004820:	4b54      	ldr	r3, [pc, #336]	@ (8004974 <HAL_UART_MspInit+0x1bc>)
 8004822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004826:	4a53      	ldr	r2, [pc, #332]	@ (8004974 <HAL_UART_MspInit+0x1bc>)
 8004828:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800482c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004830:	4b50      	ldr	r3, [pc, #320]	@ (8004974 <HAL_UART_MspInit+0x1bc>)
 8004832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800483a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800483e:	4b4d      	ldr	r3, [pc, #308]	@ (8004974 <HAL_UART_MspInit+0x1bc>)
 8004840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004844:	4a4b      	ldr	r2, [pc, #300]	@ (8004974 <HAL_UART_MspInit+0x1bc>)
 8004846:	f043 0304 	orr.w	r3, r3, #4
 800484a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800484e:	4b49      	ldr	r3, [pc, #292]	@ (8004974 <HAL_UART_MspInit+0x1bc>)
 8004850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800485c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004860:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004864:	2302      	movs	r3, #2
 8004866:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004870:	2300      	movs	r3, #0
 8004872:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004876:	2308      	movs	r3, #8
 8004878:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800487c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004880:	4619      	mov	r1, r3
 8004882:	483d      	ldr	r0, [pc, #244]	@ (8004978 <HAL_UART_MspInit+0x1c0>)
 8004884:	f005 f93c 	bl	8009b00 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream4;
 8004888:	4b3c      	ldr	r3, [pc, #240]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 800488a:	4a3d      	ldr	r2, [pc, #244]	@ (8004980 <HAL_UART_MspInit+0x1c8>)
 800488c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800488e:	4b3b      	ldr	r3, [pc, #236]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 8004890:	223f      	movs	r2, #63	@ 0x3f
 8004892:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004894:	4b39      	ldr	r3, [pc, #228]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 8004896:	2200      	movs	r2, #0
 8004898:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800489a:	4b38      	ldr	r3, [pc, #224]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 800489c:	2200      	movs	r2, #0
 800489e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048a0:	4b36      	ldr	r3, [pc, #216]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 80048a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048a6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048a8:	4b34      	ldr	r3, [pc, #208]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048ae:	4b33      	ldr	r3, [pc, #204]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80048b4:	4b31      	ldr	r3, [pc, #196]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048ba:	4b30      	ldr	r3, [pc, #192]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 80048bc:	2200      	movs	r2, #0
 80048be:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048c0:	4b2e      	ldr	r3, [pc, #184]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80048c6:	482d      	ldr	r0, [pc, #180]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 80048c8:	f002 fade 	bl	8006e88 <HAL_DMA_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 80048d2:	f7fd fa48 	bl	8001d66 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80048d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a26      	ldr	r2, [pc, #152]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 80048e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80048e6:	4a25      	ldr	r2, [pc, #148]	@ (800497c <HAL_UART_MspInit+0x1c4>)
 80048e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream5;
 80048f4:	4b23      	ldr	r3, [pc, #140]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 80048f6:	4a24      	ldr	r2, [pc, #144]	@ (8004988 <HAL_UART_MspInit+0x1d0>)
 80048f8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80048fa:	4b22      	ldr	r3, [pc, #136]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 80048fc:	2240      	movs	r2, #64	@ 0x40
 80048fe:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004900:	4b20      	ldr	r3, [pc, #128]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 8004902:	2240      	movs	r2, #64	@ 0x40
 8004904:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004906:	4b1f      	ldr	r3, [pc, #124]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 8004908:	2200      	movs	r2, #0
 800490a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800490c:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 800490e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004912:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004914:	4b1b      	ldr	r3, [pc, #108]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 8004916:	2200      	movs	r2, #0
 8004918:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800491a:	4b1a      	ldr	r3, [pc, #104]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 800491c:	2200      	movs	r2, #0
 800491e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004920:	4b18      	ldr	r3, [pc, #96]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 8004922:	2200      	movs	r2, #0
 8004924:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004926:	4b17      	ldr	r3, [pc, #92]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 8004928:	2200      	movs	r2, #0
 800492a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800492c:	4b15      	ldr	r3, [pc, #84]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 800492e:	2200      	movs	r2, #0
 8004930:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004932:	4814      	ldr	r0, [pc, #80]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 8004934:	f002 faa8 	bl	8006e88 <HAL_DMA_Init>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_UART_MspInit+0x18a>
    {
      Error_Handler();
 800493e:	f7fd fa12 	bl	8001d66 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8004942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a0d      	ldr	r2, [pc, #52]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 800494e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004950:	4a0c      	ldr	r2, [pc, #48]	@ (8004984 <HAL_UART_MspInit+0x1cc>)
 8004952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800495e:	2200      	movs	r2, #0
 8004960:	2100      	movs	r1, #0
 8004962:	2034      	movs	r0, #52	@ 0x34
 8004964:	f002 f9e3 	bl	8006d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004968:	2034      	movs	r0, #52	@ 0x34
 800496a:	f002 f9fa 	bl	8006d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800496e:	e354      	b.n	800501a <HAL_UART_MspInit+0x862>
 8004970:	40004c00 	.word	0x40004c00
 8004974:	58024400 	.word	0x58024400
 8004978:	58020800 	.word	0x58020800
 800497c:	24001050 	.word	0x24001050
 8004980:	40020070 	.word	0x40020070
 8004984:	240010c8 	.word	0x240010c8
 8004988:	40020088 	.word	0x40020088
  else if(uartHandle->Instance==UART7)
 800498c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004990:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a5f      	ldr	r2, [pc, #380]	@ (8004b18 <HAL_UART_MspInit+0x360>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f040 80ca 	bne.w	8004b34 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80049a0:	f04f 0202 	mov.w	r2, #2
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80049b6:	4618      	mov	r0, r3
 80049b8:	f006 fa8c 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_UART_MspInit+0x20e>
      Error_Handler();
 80049c2:	f7fd f9d0 	bl	8001d66 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80049c6:	4b55      	ldr	r3, [pc, #340]	@ (8004b1c <HAL_UART_MspInit+0x364>)
 80049c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049cc:	4a53      	ldr	r2, [pc, #332]	@ (8004b1c <HAL_UART_MspInit+0x364>)
 80049ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049d6:	4b51      	ldr	r3, [pc, #324]	@ (8004b1c <HAL_UART_MspInit+0x364>)
 80049d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80049e4:	4b4d      	ldr	r3, [pc, #308]	@ (8004b1c <HAL_UART_MspInit+0x364>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ea:	4a4c      	ldr	r2, [pc, #304]	@ (8004b1c <HAL_UART_MspInit+0x364>)
 80049ec:	f043 0310 	orr.w	r3, r3, #16
 80049f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049f4:	4b49      	ldr	r3, [pc, #292]	@ (8004b1c <HAL_UART_MspInit+0x364>)
 80049f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	623b      	str	r3, [r7, #32]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004a02:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004a06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004a1c:	2307      	movs	r3, #7
 8004a1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a22:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004a26:	4619      	mov	r1, r3
 8004a28:	483d      	ldr	r0, [pc, #244]	@ (8004b20 <HAL_UART_MspInit+0x368>)
 8004a2a:	f005 f869 	bl	8009b00 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA2_Stream0;
 8004a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a30:	4a3d      	ldr	r2, [pc, #244]	@ (8004b28 <HAL_UART_MspInit+0x370>)
 8004a32:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8004a34:	4b3b      	ldr	r3, [pc, #236]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a36:	224f      	movs	r2, #79	@ 0x4f
 8004a38:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a40:	4b38      	ldr	r3, [pc, #224]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a46:	4b37      	ldr	r3, [pc, #220]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a4c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a4e:	4b35      	ldr	r3, [pc, #212]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a54:	4b33      	ldr	r3, [pc, #204]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8004a5a:	4b32      	ldr	r3, [pc, #200]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a60:	4b30      	ldr	r3, [pc, #192]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a66:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8004a6c:	482d      	ldr	r0, [pc, #180]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a6e:	f002 fa0b 	bl	8006e88 <HAL_DMA_Init>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8004a78:	f7fd f975 	bl	8001d66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8004a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a27      	ldr	r2, [pc, #156]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004a8c:	4a25      	ldr	r2, [pc, #148]	@ (8004b24 <HAL_UART_MspInit+0x36c>)
 8004a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart7_tx.Instance = DMA2_Stream1;
 8004a9a:	4b24      	ldr	r3, [pc, #144]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004a9c:	4a24      	ldr	r2, [pc, #144]	@ (8004b30 <HAL_UART_MspInit+0x378>)
 8004a9e:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8004aa0:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004aa2:	2250      	movs	r2, #80	@ 0x50
 8004aa4:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004aa6:	4b21      	ldr	r3, [pc, #132]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004aa8:	2240      	movs	r2, #64	@ 0x40
 8004aaa:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aac:	4b1f      	ldr	r3, [pc, #124]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004ab4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ab8:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aba:	4b1c      	ldr	r3, [pc, #112]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8004ac6:	4b19      	ldr	r3, [pc, #100]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004acc:	4b17      	ldr	r3, [pc, #92]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ad2:	4b16      	ldr	r3, [pc, #88]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8004ad8:	4814      	ldr	r0, [pc, #80]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004ada:	f002 f9d5 	bl	8006e88 <HAL_DMA_Init>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_UART_MspInit+0x330>
      Error_Handler();
 8004ae4:	f7fd f93f 	bl	8001d66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8004ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a0e      	ldr	r2, [pc, #56]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004af4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004af6:	4a0d      	ldr	r2, [pc, #52]	@ (8004b2c <HAL_UART_MspInit+0x374>)
 8004af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8004b04:	2200      	movs	r2, #0
 8004b06:	2100      	movs	r1, #0
 8004b08:	2052      	movs	r0, #82	@ 0x52
 8004b0a:	f002 f910 	bl	8006d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004b0e:	2052      	movs	r0, #82	@ 0x52
 8004b10:	f002 f927 	bl	8006d62 <HAL_NVIC_EnableIRQ>
}
 8004b14:	e281      	b.n	800501a <HAL_UART_MspInit+0x862>
 8004b16:	bf00      	nop
 8004b18:	40007800 	.word	0x40007800
 8004b1c:	58024400 	.word	0x58024400
 8004b20:	58021000 	.word	0x58021000
 8004b24:	24001140 	.word	0x24001140
 8004b28:	40020410 	.word	0x40020410
 8004b2c:	240011b8 	.word	0x240011b8
 8004b30:	40020428 	.word	0x40020428
  else if(uartHandle->Instance==USART1)
 8004b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a5f      	ldr	r2, [pc, #380]	@ (8004cc0 <HAL_UART_MspInit+0x508>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	f040 80ca 	bne.w	8004cdc <HAL_UART_MspInit+0x524>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b48:	f04f 0201 	mov.w	r2, #1
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f006 f9b8 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_UART_MspInit+0x3b6>
      Error_Handler();
 8004b6a:	f7fd f8fc 	bl	8001d66 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b6e:	4b55      	ldr	r3, [pc, #340]	@ (8004cc4 <HAL_UART_MspInit+0x50c>)
 8004b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b74:	4a53      	ldr	r2, [pc, #332]	@ (8004cc4 <HAL_UART_MspInit+0x50c>)
 8004b76:	f043 0310 	orr.w	r3, r3, #16
 8004b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b7e:	4b51      	ldr	r3, [pc, #324]	@ (8004cc4 <HAL_UART_MspInit+0x50c>)
 8004b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8004cc4 <HAL_UART_MspInit+0x50c>)
 8004b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b92:	4a4c      	ldr	r2, [pc, #304]	@ (8004cc4 <HAL_UART_MspInit+0x50c>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b9c:	4b49      	ldr	r3, [pc, #292]	@ (8004cc4 <HAL_UART_MspInit+0x50c>)
 8004b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004baa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004bae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004bc4:	2307      	movs	r3, #7
 8004bc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bca:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	483d      	ldr	r0, [pc, #244]	@ (8004cc8 <HAL_UART_MspInit+0x510>)
 8004bd2:	f004 ff95 	bl	8009b00 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream2;
 8004bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8004cd0 <HAL_UART_MspInit+0x518>)
 8004bda:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004bde:	2229      	movs	r2, #41	@ 0x29
 8004be0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004be2:	4b3a      	ldr	r3, [pc, #232]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004be8:	4b38      	ldr	r3, [pc, #224]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bee:	4b37      	ldr	r3, [pc, #220]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004bf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bf4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bf6:	4b35      	ldr	r3, [pc, #212]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bfc:	4b33      	ldr	r3, [pc, #204]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004c02:	4b32      	ldr	r3, [pc, #200]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c08:	4b30      	ldr	r3, [pc, #192]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004c14:	482d      	ldr	r0, [pc, #180]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004c16:	f002 f937 	bl	8006e88 <HAL_DMA_Init>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_UART_MspInit+0x46c>
      Error_Handler();
 8004c20:	f7fd f8a1 	bl	8001d66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a27      	ldr	r2, [pc, #156]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004c30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004c34:	4a25      	ldr	r2, [pc, #148]	@ (8004ccc <HAL_UART_MspInit+0x514>)
 8004c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA1_Stream3;
 8004c42:	4b24      	ldr	r3, [pc, #144]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c44:	4a24      	ldr	r2, [pc, #144]	@ (8004cd8 <HAL_UART_MspInit+0x520>)
 8004c46:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004c48:	4b22      	ldr	r3, [pc, #136]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c4a:	222a      	movs	r2, #42	@ 0x2a
 8004c4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c4e:	4b21      	ldr	r3, [pc, #132]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c50:	2240      	movs	r2, #64	@ 0x40
 8004c52:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c54:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c60:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c62:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c68:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004c6e:	4b19      	ldr	r3, [pc, #100]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c74:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c7a:	4b16      	ldr	r3, [pc, #88]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004c80:	4814      	ldr	r0, [pc, #80]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c82:	f002 f901 	bl	8006e88 <HAL_DMA_Init>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_UART_MspInit+0x4d8>
      Error_Handler();
 8004c8c:	f7fd f86b 	bl	8001d66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004c9c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd4 <HAL_UART_MspInit+0x51c>)
 8004ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004cac:	2200      	movs	r2, #0
 8004cae:	2100      	movs	r1, #0
 8004cb0:	2025      	movs	r0, #37	@ 0x25
 8004cb2:	f002 f83c 	bl	8006d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004cb6:	2025      	movs	r0, #37	@ 0x25
 8004cb8:	f002 f853 	bl	8006d62 <HAL_NVIC_EnableIRQ>
}
 8004cbc:	e1ad      	b.n	800501a <HAL_UART_MspInit+0x862>
 8004cbe:	bf00      	nop
 8004cc0:	40011000 	.word	0x40011000
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	58020000 	.word	0x58020000
 8004ccc:	24001230 	.word	0x24001230
 8004cd0:	40020040 	.word	0x40020040
 8004cd4:	240012a8 	.word	0x240012a8
 8004cd8:	40020058 	.word	0x40020058
  else if(uartHandle->Instance==USART3)
 8004cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8004e68 <HAL_UART_MspInit+0x6b0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	f040 80ca 	bne.w	8004e84 <HAL_UART_MspInit+0x6cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004cf0:	f04f 0202 	mov.w	r2, #2
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d06:	4618      	mov	r0, r3
 8004d08:	f006 f8e4 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_UART_MspInit+0x55e>
      Error_Handler();
 8004d12:	f7fd f828 	bl	8001d66 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d16:	4b55      	ldr	r3, [pc, #340]	@ (8004e6c <HAL_UART_MspInit+0x6b4>)
 8004d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d1c:	4a53      	ldr	r2, [pc, #332]	@ (8004e6c <HAL_UART_MspInit+0x6b4>)
 8004d1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004d26:	4b51      	ldr	r3, [pc, #324]	@ (8004e6c <HAL_UART_MspInit+0x6b4>)
 8004d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d34:	4b4d      	ldr	r3, [pc, #308]	@ (8004e6c <HAL_UART_MspInit+0x6b4>)
 8004d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8004e6c <HAL_UART_MspInit+0x6b4>)
 8004d3c:	f043 0308 	orr.w	r3, r3, #8
 8004d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d44:	4b49      	ldr	r3, [pc, #292]	@ (8004e6c <HAL_UART_MspInit+0x6b4>)
 8004d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004d56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d6c:	2307      	movs	r3, #7
 8004d6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d72:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004d76:	4619      	mov	r1, r3
 8004d78:	483d      	ldr	r0, [pc, #244]	@ (8004e70 <HAL_UART_MspInit+0x6b8>)
 8004d7a:	f004 fec1 	bl	8009b00 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream6;
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004d80:	4a3d      	ldr	r2, [pc, #244]	@ (8004e78 <HAL_UART_MspInit+0x6c0>)
 8004d82:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004d84:	4b3b      	ldr	r3, [pc, #236]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004d86:	222d      	movs	r2, #45	@ 0x2d
 8004d88:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d90:	4b38      	ldr	r3, [pc, #224]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d96:	4b37      	ldr	r3, [pc, #220]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004d98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d9c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d9e:	4b35      	ldr	r3, [pc, #212]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004da4:	4b33      	ldr	r3, [pc, #204]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004daa:	4b32      	ldr	r3, [pc, #200]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004db0:	4b30      	ldr	r3, [pc, #192]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004db6:	4b2f      	ldr	r3, [pc, #188]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004dbc:	482d      	ldr	r0, [pc, #180]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004dbe:	f002 f863 	bl	8006e88 <HAL_DMA_Init>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_UART_MspInit+0x614>
      Error_Handler();
 8004dc8:	f7fc ffcd 	bl	8001d66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a27      	ldr	r2, [pc, #156]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004ddc:	4a25      	ldr	r2, [pc, #148]	@ (8004e74 <HAL_UART_MspInit+0x6bc>)
 8004dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream7;
 8004dea:	4b24      	ldr	r3, [pc, #144]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004dec:	4a24      	ldr	r2, [pc, #144]	@ (8004e80 <HAL_UART_MspInit+0x6c8>)
 8004dee:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004df0:	4b22      	ldr	r3, [pc, #136]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004df2:	222e      	movs	r2, #46	@ 0x2e
 8004df4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004df6:	4b21      	ldr	r3, [pc, #132]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004df8:	2240      	movs	r2, #64	@ 0x40
 8004dfa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e02:	4b1e      	ldr	r3, [pc, #120]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004e04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e08:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e10:	4b1a      	ldr	r3, [pc, #104]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004e16:	4b19      	ldr	r3, [pc, #100]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e1c:	4b17      	ldr	r3, [pc, #92]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e22:	4b16      	ldr	r3, [pc, #88]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004e28:	4814      	ldr	r0, [pc, #80]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004e2a:	f002 f82d 	bl	8006e88 <HAL_DMA_Init>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_UART_MspInit+0x680>
      Error_Handler();
 8004e34:	f7fc ff97 	bl	8001d66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a0e      	ldr	r2, [pc, #56]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004e44:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004e46:	4a0d      	ldr	r2, [pc, #52]	@ (8004e7c <HAL_UART_MspInit+0x6c4>)
 8004e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004e54:	2200      	movs	r2, #0
 8004e56:	2100      	movs	r1, #0
 8004e58:	2027      	movs	r0, #39	@ 0x27
 8004e5a:	f001 ff68 	bl	8006d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004e5e:	2027      	movs	r0, #39	@ 0x27
 8004e60:	f001 ff7f 	bl	8006d62 <HAL_NVIC_EnableIRQ>
}
 8004e64:	e0d9      	b.n	800501a <HAL_UART_MspInit+0x862>
 8004e66:	bf00      	nop
 8004e68:	40004800 	.word	0x40004800
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	58020c00 	.word	0x58020c00
 8004e74:	24001320 	.word	0x24001320
 8004e78:	400200a0 	.word	0x400200a0
 8004e7c:	24001398 	.word	0x24001398
 8004e80:	400200b8 	.word	0x400200b8
  else if(uartHandle->Instance==USART6)
 8004e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a64      	ldr	r2, [pc, #400]	@ (8005024 <HAL_UART_MspInit+0x86c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	f040 80c1 	bne.w	800501a <HAL_UART_MspInit+0x862>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004e98:	f04f 0201 	mov.w	r2, #1
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004eaa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f006 f810 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_UART_MspInit+0x706>
      Error_Handler();
 8004eba:	f7fc ff54 	bl	8001d66 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8005028 <HAL_UART_MspInit+0x870>)
 8004ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ec4:	4a58      	ldr	r2, [pc, #352]	@ (8005028 <HAL_UART_MspInit+0x870>)
 8004ec6:	f043 0320 	orr.w	r3, r3, #32
 8004eca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ece:	4b56      	ldr	r3, [pc, #344]	@ (8005028 <HAL_UART_MspInit+0x870>)
 8004ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004edc:	4b52      	ldr	r3, [pc, #328]	@ (8005028 <HAL_UART_MspInit+0x870>)
 8004ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ee2:	4a51      	ldr	r2, [pc, #324]	@ (8005028 <HAL_UART_MspInit+0x870>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004eec:	4b4e      	ldr	r3, [pc, #312]	@ (8005028 <HAL_UART_MspInit+0x870>)
 8004eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ef2:	f003 0204 	and.w	r2, r3, #4
 8004ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004f08:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f0a:	23c0      	movs	r3, #192	@ 0xc0
 8004f0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f10:	2302      	movs	r3, #2
 8004f12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004f22:	2307      	movs	r3, #7
 8004f24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f28:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	483f      	ldr	r0, [pc, #252]	@ (800502c <HAL_UART_MspInit+0x874>)
 8004f30:	f004 fde6 	bl	8009b00 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream0;
 8004f34:	4b3e      	ldr	r3, [pc, #248]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f36:	4a3f      	ldr	r2, [pc, #252]	@ (8005034 <HAL_UART_MspInit+0x87c>)
 8004f38:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8004f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f3c:	2247      	movs	r2, #71	@ 0x47
 8004f3e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f40:	4b3b      	ldr	r3, [pc, #236]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f46:	4b3a      	ldr	r3, [pc, #232]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f4c:	4b38      	ldr	r3, [pc, #224]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f52:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f54:	4b36      	ldr	r3, [pc, #216]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f5a:	4b35      	ldr	r3, [pc, #212]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004f60:	4b33      	ldr	r3, [pc, #204]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f66:	4b32      	ldr	r3, [pc, #200]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f6c:	4b30      	ldr	r3, [pc, #192]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004f72:	482f      	ldr	r0, [pc, #188]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f74:	f001 ff88 	bl	8006e88 <HAL_DMA_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_UART_MspInit+0x7ca>
      Error_Handler();
 8004f7e:	f7fc fef2 	bl	8001d66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004f92:	4a27      	ldr	r2, [pc, #156]	@ (8005030 <HAL_UART_MspInit+0x878>)
 8004f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA1_Stream1;
 8004fa0:	4b25      	ldr	r3, [pc, #148]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fa2:	4a26      	ldr	r2, [pc, #152]	@ (800503c <HAL_UART_MspInit+0x884>)
 8004fa4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8004fa6:	4b24      	ldr	r3, [pc, #144]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fa8:	2248      	movs	r2, #72	@ 0x48
 8004faa:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fac:	4b22      	ldr	r3, [pc, #136]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fae:	2240      	movs	r2, #64	@ 0x40
 8004fb0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fb2:	4b21      	ldr	r3, [pc, #132]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fbe:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004fd2:	4b19      	ldr	r3, [pc, #100]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fd8:	4b17      	ldr	r3, [pc, #92]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004fde:	4816      	ldr	r0, [pc, #88]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004fe0:	f001 ff52 	bl	8006e88 <HAL_DMA_Init>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_UART_MspInit+0x836>
      Error_Handler();
 8004fea:	f7fc febc 	bl	8001d66 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004ffa:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8005038 <HAL_UART_MspInit+0x880>)
 8004ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005002:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	2047      	movs	r0, #71	@ 0x47
 8005010:	f001 fe8d 	bl	8006d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005014:	2047      	movs	r0, #71	@ 0x47
 8005016:	f001 fea4 	bl	8006d62 <HAL_NVIC_EnableIRQ>
}
 800501a:	bf00      	nop
 800501c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40011400 	.word	0x40011400
 8005028:	58024400 	.word	0x58024400
 800502c:	58020800 	.word	0x58020800
 8005030:	24001410 	.word	0x24001410
 8005034:	40020010 	.word	0x40020010
 8005038:	24001488 	.word	0x24001488
 800503c:	40020028 	.word	0x40020028

08005040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack      /* set stack pointer */
 8005040:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800507c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8005044:	f7ff f868 	bl	8004118 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005048:	f7fe ffc6 	bl	8003fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800504c:	480c      	ldr	r0, [pc, #48]	@ (8005080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800504e:	490d      	ldr	r1, [pc, #52]	@ (8005084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005050:	4a0d      	ldr	r2, [pc, #52]	@ (8005088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005054:	e002      	b.n	800505c <LoopCopyDataInit>

08005056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800505a:	3304      	adds	r3, #4

0800505c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800505c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800505e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005060:	d3f9      	bcc.n	8005056 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005062:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005064:	4c0a      	ldr	r4, [pc, #40]	@ (8005090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005068:	e001      	b.n	800506e <LoopFillZerobss>

0800506a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800506a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800506c:	3204      	adds	r2, #4

0800506e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800506e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005070:	d3fb      	bcc.n	800506a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005072:	f00d f99b 	bl	80123ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005076:	f7fc fa8f 	bl	8001598 <main>
  bx  lr
 800507a:	4770      	bx	lr
    ldr   sp, =_estack      /* set stack pointer */
 800507c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005080:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005084:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8005088:	080164b0 	.word	0x080164b0
  ldr r2, =_sbss
 800508c:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8005090:	24001650 	.word	0x24001650

08005094 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005094:	e7fe      	b.n	8005094 <ADC3_IRQHandler>
	...

08005098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800509e:	2003      	movs	r0, #3
 80050a0:	f001 fe3a 	bl	8006d18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050a4:	f005 fd40 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b15      	ldr	r3, [pc, #84]	@ (8005100 <HAL_Init+0x68>)
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	0a1b      	lsrs	r3, r3, #8
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	4913      	ldr	r1, [pc, #76]	@ (8005104 <HAL_Init+0x6c>)
 80050b6:	5ccb      	ldrb	r3, [r1, r3]
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <HAL_Init+0x68>)
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005104 <HAL_Init+0x6c>)
 80050cc:	5cd3      	ldrb	r3, [r2, r3]
 80050ce:	f003 031f 	and.w	r3, r3, #31
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005108 <HAL_Init+0x70>)
 80050da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050dc:	4a0b      	ldr	r2, [pc, #44]	@ (800510c <HAL_Init+0x74>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050e2:	200f      	movs	r0, #15
 80050e4:	f000 f814 	bl	8005110 <HAL_InitTick>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e002      	b.n	80050f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80050f2:	f7fe fddd 	bl	8003cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	58024400 	.word	0x58024400
 8005104:	08015f10 	.word	0x08015f10
 8005108:	2400001c 	.word	0x2400001c
 800510c:	24000018 	.word	0x24000018

08005110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005118:	4b15      	ldr	r3, [pc, #84]	@ (8005170 <HAL_InitTick+0x60>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e021      	b.n	8005168 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005124:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <HAL_InitTick+0x64>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <HAL_InitTick+0x60>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	4619      	mov	r1, r3
 800512e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005132:	fbb3 f3f1 	udiv	r3, r3, r1
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	4618      	mov	r0, r3
 800513c:	f001 fe1f 	bl	8006d7e <HAL_SYSTICK_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e00e      	b.n	8005168 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b0f      	cmp	r3, #15
 800514e:	d80a      	bhi.n	8005166 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005150:	2200      	movs	r2, #0
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	f001 fde9 	bl	8006d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800515c:	4a06      	ldr	r2, [pc, #24]	@ (8005178 <HAL_InitTick+0x68>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e000      	b.n	8005168 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	24000024 	.word	0x24000024
 8005174:	24000018 	.word	0x24000018
 8005178:	24000020 	.word	0x24000020

0800517c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005180:	4b06      	ldr	r3, [pc, #24]	@ (800519c <HAL_IncTick+0x20>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <HAL_IncTick+0x24>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4413      	add	r3, r2
 800518c:	4a04      	ldr	r2, [pc, #16]	@ (80051a0 <HAL_IncTick+0x24>)
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	24000024 	.word	0x24000024
 80051a0:	24001500 	.word	0x24001500

080051a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return uwTick;
 80051a8:	4b03      	ldr	r3, [pc, #12]	@ (80051b8 <HAL_GetTick+0x14>)
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	24001500 	.word	0x24001500

080051bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051c4:	f7ff ffee 	bl	80051a4 <HAL_GetTick>
 80051c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d005      	beq.n	80051e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <HAL_Delay+0x44>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051e2:	bf00      	nop
 80051e4:	f7ff ffde 	bl	80051a4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d8f7      	bhi.n	80051e4 <HAL_Delay+0x28>
  {
  }
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	24000024 	.word	0x24000024

08005204 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005208:	4b03      	ldr	r3, [pc, #12]	@ (8005218 <HAL_GetREVID+0x14>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	0c1b      	lsrs	r3, r3, #16
}
 800520e:	4618      	mov	r0, r3
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	5c001000 	.word	0x5c001000

0800521c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	609a      	str	r2, [r3, #8]
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <LL_ADC_SetChannelPreselection+0x24>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	0e9b      	lsrs	r3, r3, #26
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2201      	movs	r2, #1
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	e015      	b.n	80052d4 <LL_ADC_SetChannelPreselection+0x50>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	fa93 f3a3 	rbit	r3, r3
 80052b2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80052be:	2320      	movs	r3, #32
 80052c0:	e003      	b.n	80052ca <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2201      	movs	r2, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	69d2      	ldr	r2, [r2, #28]
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b087      	sub	sp, #28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
 80052f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3360      	adds	r3, #96	@ 0x60
 80052fc:	461a      	mov	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	430b      	orrs	r3, r1
 8005318:	431a      	orrs	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	fa01 f303 	lsl.w	r3, r1, r3
 800534a:	431a      	orrs	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	611a      	str	r2, [r3, #16]
}
 8005350:	bf00      	nop
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3360      	adds	r3, #96	@ 0x60
 800536c:	461a      	mov	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	431a      	orrs	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	601a      	str	r2, [r3, #0]
  }
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3330      	adds	r3, #48	@ 0x30
 80053c8:	461a      	mov	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	0a1b      	lsrs	r3, r3, #8
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	f003 030c 	and.w	r3, r3, #12
 80053d4:	4413      	add	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	211f      	movs	r1, #31
 80053e4:	fa01 f303 	lsl.w	r3, r1, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	401a      	ands	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0e9b      	lsrs	r3, r3, #26
 80053f0:	f003 011f 	and.w	r1, r3, #31
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	fa01 f303 	lsl.w	r3, r1, r3
 80053fe:	431a      	orrs	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3314      	adds	r3, #20
 8005420:	461a      	mov	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	0e5b      	lsrs	r3, r3, #25
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	4413      	add	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	0d1b      	lsrs	r3, r3, #20
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2107      	movs	r1, #7
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	401a      	ands	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	0d1b      	lsrs	r3, r3, #20
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	431a      	orrs	r2, r3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 0318 	and.w	r3, r3, #24
 800548a:	4908      	ldr	r1, [pc, #32]	@ (80054ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800548c:	40d9      	lsrs	r1, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	400b      	ands	r3, r1
 8005492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005496:	431a      	orrs	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	000fffff 	.word	0x000fffff

080054b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 031f 	and.w	r3, r3, #31
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <LL_ADC_DisableDeepPowerDown+0x20>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6093      	str	r3, [r2, #8]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	5fffffc0 	.word	0x5fffffc0

0800550c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800551c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005520:	d101      	bne.n	8005526 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <LL_ADC_EnableInternalRegulator+0x24>)
 8005542:	4013      	ands	r3, r2
 8005544:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	6fffffc0 	.word	0x6fffffc0

0800555c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005570:	d101      	bne.n	8005576 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <LL_ADC_Enable+0x24>)
 8005592:	4013      	ands	r3, r2
 8005594:	f043 0201 	orr.w	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	7fffffc0 	.word	0x7fffffc0

080055ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <LL_ADC_Disable+0x24>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	f043 0202 	orr.w	r2, r3, #2
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	7fffffc0 	.word	0x7fffffc0

080055d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <LL_ADC_IsEnabled+0x18>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <LL_ADC_IsEnabled+0x1a>
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	d101      	bne.n	8005612 <LL_ADC_IsDisableOngoing+0x18>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <LL_ADC_IsDisableOngoing+0x1a>
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	4b05      	ldr	r3, [pc, #20]	@ (8005644 <LL_ADC_REG_StartConversion+0x24>)
 800562e:	4013      	ands	r3, r2
 8005630:	f043 0204 	orr.w	r2, r3, #4
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	7fffffc0 	.word	0x7fffffc0

08005648 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <LL_ADC_REG_StopConversion+0x24>)
 8005656:	4013      	ands	r3, r2
 8005658:	f043 0210 	orr.w	r2, r3, #16
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	7fffffc0 	.word	0x7fffffc0

08005670 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b04      	cmp	r3, #4
 8005682:	d101      	bne.n	8005688 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <LL_ADC_INJ_StopConversion+0x24>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	f043 0220 	orr.w	r2, r3, #32
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	7fffffc0 	.word	0x7fffffc0

080056c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d101      	bne.n	80056d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b089      	sub	sp, #36	@ 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e18f      	b.n	8005a22 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570c:	2b00      	cmp	r3, #0
 800570e:	d109      	bne.n	8005724 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fb faad 	bl	8000c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff feef 	bl	800550c <LL_ADC_IsDeepPowerDownEnabled>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fed5 	bl	80054e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff ff0a 	bl	800555c <LL_ADC_IsInternalRegulatorEnabled>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d114      	bne.n	8005778 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff feee 	bl	8005534 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005758:	4b87      	ldr	r3, [pc, #540]	@ (8005978 <HAL_ADC_Init+0x290>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	099b      	lsrs	r3, r3, #6
 800575e:	4a87      	ldr	r2, [pc, #540]	@ (800597c <HAL_ADC_Init+0x294>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	099b      	lsrs	r3, r3, #6
 8005766:	3301      	adds	r3, #1
 8005768:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800576a:	e002      	b.n	8005772 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	3b01      	subs	r3, #1
 8005770:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f9      	bne.n	800576c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff feed 	bl	800555c <LL_ADC_IsInternalRegulatorEnabled>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10d      	bne.n	80057a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578c:	f043 0210 	orr.w	r2, r3, #16
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005798:	f043 0201 	orr.w	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff ff61 	bl	8005670 <LL_ADC_REG_IsConversionOngoing>
 80057ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f040 8129 	bne.w	8005a10 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f040 8125 	bne.w	8005a10 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80057ce:	f043 0202 	orr.w	r2, r3, #2
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fefa 	bl	80055d4 <LL_ADC_IsEnabled>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d136      	bne.n	8005854 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a65      	ldr	r2, [pc, #404]	@ (8005980 <HAL_ADC_Init+0x298>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_ADC_Init+0x112>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a63      	ldr	r2, [pc, #396]	@ (8005984 <HAL_ADC_Init+0x29c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10e      	bne.n	8005818 <HAL_ADC_Init+0x130>
 80057fa:	4861      	ldr	r0, [pc, #388]	@ (8005980 <HAL_ADC_Init+0x298>)
 80057fc:	f7ff feea 	bl	80055d4 <LL_ADC_IsEnabled>
 8005800:	4604      	mov	r4, r0
 8005802:	4860      	ldr	r0, [pc, #384]	@ (8005984 <HAL_ADC_Init+0x29c>)
 8005804:	f7ff fee6 	bl	80055d4 <LL_ADC_IsEnabled>
 8005808:	4603      	mov	r3, r0
 800580a:	4323      	orrs	r3, r4
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	e008      	b.n	800582a <HAL_ADC_Init+0x142>
 8005818:	485b      	ldr	r0, [pc, #364]	@ (8005988 <HAL_ADC_Init+0x2a0>)
 800581a:	f7ff fedb 	bl	80055d4 <LL_ADC_IsEnabled>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf0c      	ite	eq
 8005824:	2301      	moveq	r3, #1
 8005826:	2300      	movne	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d012      	beq.n	8005854 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a53      	ldr	r2, [pc, #332]	@ (8005980 <HAL_ADC_Init+0x298>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_ADC_Init+0x15a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a51      	ldr	r2, [pc, #324]	@ (8005984 <HAL_ADC_Init+0x29c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d101      	bne.n	8005846 <HAL_ADC_Init+0x15e>
 8005842:	4a52      	ldr	r2, [pc, #328]	@ (800598c <HAL_ADC_Init+0x2a4>)
 8005844:	e000      	b.n	8005848 <HAL_ADC_Init+0x160>
 8005846:	4a52      	ldr	r2, [pc, #328]	@ (8005990 <HAL_ADC_Init+0x2a8>)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f7ff fce4 	bl	800521c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005854:	f7ff fcd6 	bl	8005204 <HAL_GetREVID>
 8005858:	4603      	mov	r3, r0
 800585a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800585e:	4293      	cmp	r3, r2
 8005860:	d914      	bls.n	800588c <HAL_ADC_Init+0x1a4>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b10      	cmp	r3, #16
 8005868:	d110      	bne.n	800588c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	7d5b      	ldrb	r3, [r3, #21]
 800586e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005874:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800587a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	7f1b      	ldrb	r3, [r3, #28]
 8005880:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005882:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005884:	f043 030c 	orr.w	r3, r3, #12
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e00d      	b.n	80058a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	7d5b      	ldrb	r3, [r3, #21]
 8005890:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005896:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800589c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7f1b      	ldrb	r3, [r3, #28]
 80058a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	7f1b      	ldrb	r3, [r3, #28]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d106      	bne.n	80058be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	045b      	lsls	r3, r3, #17
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	4b2c      	ldr	r3, [pc, #176]	@ (8005994 <HAL_ADC_Init+0x2ac>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	69b9      	ldr	r1, [r7, #24]
 80058ea:	430b      	orrs	r3, r1
 80058ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff febc 	bl	8005670 <LL_ADC_REG_IsConversionOngoing>
 80058f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff fede 	bl	80056c0 <LL_ADC_INJ_IsConversionOngoing>
 8005904:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d15f      	bne.n	80059cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d15c      	bne.n	80059cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	7d1b      	ldrb	r3, [r3, #20]
 8005916:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	4b1c      	ldr	r3, [pc, #112]	@ (8005998 <HAL_ADC_Init+0x2b0>)
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	69b9      	ldr	r1, [r7, #24]
 8005930:	430b      	orrs	r3, r1
 8005932:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800593a:	2b01      	cmp	r3, #1
 800593c:	d130      	bne.n	80059a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	4b14      	ldr	r3, [pc, #80]	@ (800599c <HAL_ADC_Init+0x2b4>)
 800594c:	4013      	ands	r3, r2
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005952:	3a01      	subs	r2, #1
 8005954:	0411      	lsls	r1, r2, #16
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800595a:	4311      	orrs	r1, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005960:	4311      	orrs	r1, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005966:	430a      	orrs	r2, r1
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	611a      	str	r2, [r3, #16]
 8005974:	e01c      	b.n	80059b0 <HAL_ADC_Init+0x2c8>
 8005976:	bf00      	nop
 8005978:	24000018 	.word	0x24000018
 800597c:	053e2d63 	.word	0x053e2d63
 8005980:	40022000 	.word	0x40022000
 8005984:	40022100 	.word	0x40022100
 8005988:	58026000 	.word	0x58026000
 800598c:	40022300 	.word	0x40022300
 8005990:	58026300 	.word	0x58026300
 8005994:	fff0c003 	.word	0xfff0c003
 8005998:	ffffbffc 	.word	0xffffbffc
 800599c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0201 	bic.w	r2, r2, #1
 80059ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fec6 	bl	8006758 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d10c      	bne.n	80059ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059da:	f023 010f 	bic.w	r1, r3, #15
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	1e5a      	subs	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80059ec:	e007      	b.n	80059fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 020f 	bic.w	r2, r2, #15
 80059fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	f043 0201 	orr.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a0e:	e007      	b.n	8005a20 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a14:	f043 0210 	orr.w	r2, r3, #16
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3724      	adds	r7, #36	@ 0x24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd90      	pop	{r4, r7, pc}
 8005a2a:	bf00      	nop

08005a2c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a5c      	ldr	r2, [pc, #368]	@ (8005bac <HAL_ADC_Start+0x180>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_ADC_Start+0x1c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a5b      	ldr	r2, [pc, #364]	@ (8005bb0 <HAL_ADC_Start+0x184>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_ADC_Start+0x20>
 8005a48:	4b5a      	ldr	r3, [pc, #360]	@ (8005bb4 <HAL_ADC_Start+0x188>)
 8005a4a:	e000      	b.n	8005a4e <HAL_ADC_Start+0x22>
 8005a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8005bb8 <HAL_ADC_Start+0x18c>)
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fd2e 	bl	80054b0 <LL_ADC_GetMultimode>
 8005a54:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fe08 	bl	8005670 <LL_ADC_REG_IsConversionOngoing>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f040 809a 	bne.w	8005b9c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_ADC_Start+0x4a>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e095      	b.n	8005ba2 <HAL_ADC_Start+0x176>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fd80 	bl	8006584 <ADC_Enable>
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f040 8081 	bne.w	8005b92 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a94:	4b49      	ldr	r3, [pc, #292]	@ (8005bbc <HAL_ADC_Start+0x190>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a42      	ldr	r2, [pc, #264]	@ (8005bb0 <HAL_ADC_Start+0x184>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d002      	beq.n	8005ab0 <HAL_ADC_Start+0x84>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	e000      	b.n	8005ab2 <HAL_ADC_Start+0x86>
 8005ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8005bac <HAL_ADC_Start+0x180>)
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d002      	beq.n	8005ac0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad8:	d106      	bne.n	8005ae8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ade:	f023 0206 	bic.w	r2, r3, #6
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ae6:	e002      	b.n	8005aee <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	221c      	movs	r2, #28
 8005af4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb0 <HAL_ADC_Start+0x184>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d002      	beq.n	8005b0e <HAL_ADC_Start+0xe2>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	e000      	b.n	8005b10 <HAL_ADC_Start+0xe4>
 8005b0e:	4b27      	ldr	r3, [pc, #156]	@ (8005bac <HAL_ADC_Start+0x180>)
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d008      	beq.n	8005b2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b05      	cmp	r3, #5
 8005b22:	d002      	beq.n	8005b2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b09      	cmp	r3, #9
 8005b28:	d114      	bne.n	8005b54 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005b40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fd67 	bl	8005620 <LL_ADC_REG_StartConversion>
 8005b52:	e025      	b.n	8005ba0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b58:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a12      	ldr	r2, [pc, #72]	@ (8005bb0 <HAL_ADC_Start+0x184>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d002      	beq.n	8005b70 <HAL_ADC_Start+0x144>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	e000      	b.n	8005b72 <HAL_ADC_Start+0x146>
 8005b70:	4b0e      	ldr	r3, [pc, #56]	@ (8005bac <HAL_ADC_Start+0x180>)
 8005b72:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00f      	beq.n	8005ba0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005b88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005b90:	e006      	b.n	8005ba0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005b9a:	e001      	b.n	8005ba0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40022000 	.word	0x40022000
 8005bb0:	40022100 	.word	0x40022100
 8005bb4:	40022300 	.word	0x40022300
 8005bb8:	58026300 	.word	0x58026300
 8005bbc:	fffff0fe 	.word	0xfffff0fe

08005bc0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_ADC_Stop+0x16>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e021      	b.n	8005c1a <HAL_ADC_Stop+0x5a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005bde:	2103      	movs	r1, #3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fc13 	bl	800640c <ADC_ConversionStop>
 8005be6:	4603      	mov	r3, r0
 8005be8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10f      	bne.n	8005c10 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fd51 	bl	8006698 <ADC_Disable>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c04:	4b07      	ldr	r3, [pc, #28]	@ (8005c24 <HAL_ADC_Stop+0x64>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	f043 0201 	orr.w	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	ffffeefe 	.word	0xffffeefe

08005c28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a72      	ldr	r2, [pc, #456]	@ (8005e00 <HAL_ADC_PollForConversion+0x1d8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_ADC_PollForConversion+0x1e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a70      	ldr	r2, [pc, #448]	@ (8005e04 <HAL_ADC_PollForConversion+0x1dc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d101      	bne.n	8005c4a <HAL_ADC_PollForConversion+0x22>
 8005c46:	4b70      	ldr	r3, [pc, #448]	@ (8005e08 <HAL_ADC_PollForConversion+0x1e0>)
 8005c48:	e000      	b.n	8005c4c <HAL_ADC_PollForConversion+0x24>
 8005c4a:	4b70      	ldr	r3, [pc, #448]	@ (8005e0c <HAL_ADC_PollForConversion+0x1e4>)
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff fc2f 	bl	80054b0 <LL_ADC_GetMultimode>
 8005c52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d102      	bne.n	8005c62 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e037      	b.n	8005cd2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b05      	cmp	r3, #5
 8005c6c:	d002      	beq.n	8005c74 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b09      	cmp	r3, #9
 8005c72:	d111      	bne.n	8005c98 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c86:	f043 0220 	orr.w	r2, r3, #32
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e0b1      	b.n	8005df6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005c92:	2304      	movs	r3, #4
 8005c94:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005c96:	e01c      	b.n	8005cd2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a58      	ldr	r2, [pc, #352]	@ (8005e00 <HAL_ADC_PollForConversion+0x1d8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_ADC_PollForConversion+0x84>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a57      	ldr	r2, [pc, #348]	@ (8005e04 <HAL_ADC_PollForConversion+0x1dc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d101      	bne.n	8005cb0 <HAL_ADC_PollForConversion+0x88>
 8005cac:	4b56      	ldr	r3, [pc, #344]	@ (8005e08 <HAL_ADC_PollForConversion+0x1e0>)
 8005cae:	e000      	b.n	8005cb2 <HAL_ADC_PollForConversion+0x8a>
 8005cb0:	4b56      	ldr	r3, [pc, #344]	@ (8005e0c <HAL_ADC_PollForConversion+0x1e4>)
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fc0a 	bl	80054cc <LL_ADC_GetMultiDMATransfer>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc2:	f043 0220 	orr.w	r2, r3, #32
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e093      	b.n	8005df6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005cce:	2304      	movs	r3, #4
 8005cd0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005cd2:	f7ff fa67 	bl	80051a4 <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005cd8:	e021      	b.n	8005d1e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d01d      	beq.n	8005d1e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005ce2:	f7ff fa5f 	bl	80051a4 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <HAL_ADC_PollForConversion+0xd0>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d112      	bne.n	8005d1e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	f043 0204 	orr.w	r2, r3, #4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e06b      	b.n	8005df6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0d6      	beq.n	8005cda <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fb28 	bl	8005392 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01c      	beq.n	8005d82 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	7d5b      	ldrb	r3, [r3, #21]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d118      	bne.n	8005d82 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d111      	bne.n	8005d82 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d105      	bne.n	8005d82 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7a:	f043 0201 	orr.w	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1f      	ldr	r2, [pc, #124]	@ (8005e04 <HAL_ADC_PollForConversion+0x1dc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d002      	beq.n	8005d92 <HAL_ADC_PollForConversion+0x16a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	e000      	b.n	8005d94 <HAL_ADC_PollForConversion+0x16c>
 8005d92:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <HAL_ADC_PollForConversion+0x1d8>)
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d008      	beq.n	8005dae <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b05      	cmp	r3, #5
 8005da6:	d002      	beq.n	8005dae <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	d104      	bne.n	8005db8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	e00c      	b.n	8005dd2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a11      	ldr	r2, [pc, #68]	@ (8005e04 <HAL_ADC_PollForConversion+0x1dc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d002      	beq.n	8005dc8 <HAL_ADC_PollForConversion+0x1a0>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	e000      	b.n	8005dca <HAL_ADC_PollForConversion+0x1a2>
 8005dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005e00 <HAL_ADC_PollForConversion+0x1d8>)
 8005dca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d104      	bne.n	8005de2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	e008      	b.n	8005df4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d103      	bne.n	8005df4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	220c      	movs	r2, #12
 8005df2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40022000 	.word	0x40022000
 8005e04:	40022100 	.word	0x40022100
 8005e08:	40022300 	.word	0x40022300
 8005e0c:	58026300 	.word	0x58026300

08005e10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b08d      	sub	sp, #52	@ 0x34
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a65      	ldr	r2, [pc, #404]	@ (8005fdc <HAL_ADC_ConfigChannel+0x1b0>)
 8005e46:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x2a>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e2c7      	b.n	80063e6 <HAL_ADC_ConfigChannel+0x5ba>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fc04 	bl	8005670 <LL_ADC_REG_IsConversionOngoing>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 82ac 	bne.w	80063c8 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	db2c      	blt.n	8005ed2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d108      	bne.n	8005e96 <HAL_ADC_ConfigChannel+0x6a>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0e9b      	lsrs	r3, r3, #26
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2201      	movs	r2, #1
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	e016      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x98>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	fa93 f3a3 	rbit	r3, r3
 8005ea2:	613b      	str	r3, [r7, #16]
  return result;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8005eae:	2320      	movs	r3, #32
 8005eb0:	e003      	b.n	8005eba <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	fab3 f383 	clz	r3, r3
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	69d1      	ldr	r1, [r2, #28]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f7ff fa6a 	bl	80053b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff fbc1 	bl	8005670 <LL_ADC_REG_IsConversionOngoing>
 8005eee:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fbe3 	bl	80056c0 <LL_ADC_INJ_IsConversionOngoing>
 8005efa:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 80b8 	bne.w	8006074 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 80b4 	bne.w	8006074 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f7ff fa79 	bl	8005410 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005f1e:	4b30      	ldr	r3, [pc, #192]	@ (8005fe0 <HAL_ADC_ConfigChannel+0x1b4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f2a:	d10b      	bne.n	8005f44 <HAL_ADC_ConfigChannel+0x118>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	e01d      	b.n	8005f80 <HAL_ADC_ConfigChannel+0x154>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <HAL_ADC_ConfigChannel+0x13e>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	089b      	lsrs	r3, r3, #2
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	e00a      	b.n	8005f80 <HAL_ADC_ConfigChannel+0x154>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	089b      	lsrs	r3, r3, #2
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d02c      	beq.n	8005fe4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6919      	ldr	r1, [r3, #16]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	f7ff f9a7 	bl	80052ea <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	6919      	ldr	r1, [r3, #16]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	7e5b      	ldrb	r3, [r3, #25]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d102      	bne.n	8005fb2 <HAL_ADC_ConfigChannel+0x186>
 8005fac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005fb0:	e000      	b.n	8005fb4 <HAL_ADC_ConfigChannel+0x188>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f7ff f9d1 	bl	800535c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6919      	ldr	r1, [r3, #16]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	7e1b      	ldrb	r3, [r3, #24]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d102      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x1a4>
 8005fca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fce:	e000      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x1a6>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7ff f9a9 	bl	800532a <LL_ADC_SetDataRightShift>
 8005fd8:	e04c      	b.n	8006074 <HAL_ADC_ConfigChannel+0x248>
 8005fda:	bf00      	nop
 8005fdc:	47ff0000 	.word	0x47ff0000
 8005fe0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	069b      	lsls	r3, r3, #26
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d107      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006006:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800600e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	069b      	lsls	r3, r3, #26
 8006018:	429a      	cmp	r2, r3
 800601a:	d107      	bne.n	800602c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800602a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	069b      	lsls	r3, r3, #26
 800603c:	429a      	cmp	r2, r3
 800603e:	d107      	bne.n	8006050 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800604e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006056:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	069b      	lsls	r3, r3, #26
 8006060:	429a      	cmp	r2, r3
 8006062:	d107      	bne.n	8006074 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006072:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff faab 	bl	80055d4 <LL_ADC_IsEnabled>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	f040 81aa 	bne.w	80063da <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6819      	ldr	r1, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	461a      	mov	r2, r3
 8006094:	f7ff f9e8 	bl	8005468 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a87      	ldr	r2, [pc, #540]	@ (80062bc <HAL_ADC_ConfigChannel+0x490>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	f040 809a 	bne.w	80061d8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4984      	ldr	r1, [pc, #528]	@ (80062c0 <HAL_ADC_ConfigChannel+0x494>)
 80060ae:	428b      	cmp	r3, r1
 80060b0:	d147      	bne.n	8006142 <HAL_ADC_ConfigChannel+0x316>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4983      	ldr	r1, [pc, #524]	@ (80062c4 <HAL_ADC_ConfigChannel+0x498>)
 80060b8:	428b      	cmp	r3, r1
 80060ba:	d040      	beq.n	800613e <HAL_ADC_ConfigChannel+0x312>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4981      	ldr	r1, [pc, #516]	@ (80062c8 <HAL_ADC_ConfigChannel+0x49c>)
 80060c2:	428b      	cmp	r3, r1
 80060c4:	d039      	beq.n	800613a <HAL_ADC_ConfigChannel+0x30e>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4980      	ldr	r1, [pc, #512]	@ (80062cc <HAL_ADC_ConfigChannel+0x4a0>)
 80060cc:	428b      	cmp	r3, r1
 80060ce:	d032      	beq.n	8006136 <HAL_ADC_ConfigChannel+0x30a>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	497e      	ldr	r1, [pc, #504]	@ (80062d0 <HAL_ADC_ConfigChannel+0x4a4>)
 80060d6:	428b      	cmp	r3, r1
 80060d8:	d02b      	beq.n	8006132 <HAL_ADC_ConfigChannel+0x306>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	497d      	ldr	r1, [pc, #500]	@ (80062d4 <HAL_ADC_ConfigChannel+0x4a8>)
 80060e0:	428b      	cmp	r3, r1
 80060e2:	d024      	beq.n	800612e <HAL_ADC_ConfigChannel+0x302>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	497b      	ldr	r1, [pc, #492]	@ (80062d8 <HAL_ADC_ConfigChannel+0x4ac>)
 80060ea:	428b      	cmp	r3, r1
 80060ec:	d01d      	beq.n	800612a <HAL_ADC_ConfigChannel+0x2fe>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	497a      	ldr	r1, [pc, #488]	@ (80062dc <HAL_ADC_ConfigChannel+0x4b0>)
 80060f4:	428b      	cmp	r3, r1
 80060f6:	d016      	beq.n	8006126 <HAL_ADC_ConfigChannel+0x2fa>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4978      	ldr	r1, [pc, #480]	@ (80062e0 <HAL_ADC_ConfigChannel+0x4b4>)
 80060fe:	428b      	cmp	r3, r1
 8006100:	d00f      	beq.n	8006122 <HAL_ADC_ConfigChannel+0x2f6>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4977      	ldr	r1, [pc, #476]	@ (80062e4 <HAL_ADC_ConfigChannel+0x4b8>)
 8006108:	428b      	cmp	r3, r1
 800610a:	d008      	beq.n	800611e <HAL_ADC_ConfigChannel+0x2f2>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4975      	ldr	r1, [pc, #468]	@ (80062e8 <HAL_ADC_ConfigChannel+0x4bc>)
 8006112:	428b      	cmp	r3, r1
 8006114:	d101      	bne.n	800611a <HAL_ADC_ConfigChannel+0x2ee>
 8006116:	4b75      	ldr	r3, [pc, #468]	@ (80062ec <HAL_ADC_ConfigChannel+0x4c0>)
 8006118:	e05a      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 800611a:	2300      	movs	r3, #0
 800611c:	e058      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 800611e:	4b74      	ldr	r3, [pc, #464]	@ (80062f0 <HAL_ADC_ConfigChannel+0x4c4>)
 8006120:	e056      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 8006122:	4b74      	ldr	r3, [pc, #464]	@ (80062f4 <HAL_ADC_ConfigChannel+0x4c8>)
 8006124:	e054      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 8006126:	4b6e      	ldr	r3, [pc, #440]	@ (80062e0 <HAL_ADC_ConfigChannel+0x4b4>)
 8006128:	e052      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 800612a:	4b6c      	ldr	r3, [pc, #432]	@ (80062dc <HAL_ADC_ConfigChannel+0x4b0>)
 800612c:	e050      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 800612e:	4b72      	ldr	r3, [pc, #456]	@ (80062f8 <HAL_ADC_ConfigChannel+0x4cc>)
 8006130:	e04e      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 8006132:	4b72      	ldr	r3, [pc, #456]	@ (80062fc <HAL_ADC_ConfigChannel+0x4d0>)
 8006134:	e04c      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 8006136:	4b72      	ldr	r3, [pc, #456]	@ (8006300 <HAL_ADC_ConfigChannel+0x4d4>)
 8006138:	e04a      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 800613a:	4b72      	ldr	r3, [pc, #456]	@ (8006304 <HAL_ADC_ConfigChannel+0x4d8>)
 800613c:	e048      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 800613e:	2301      	movs	r3, #1
 8006140:	e046      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4970      	ldr	r1, [pc, #448]	@ (8006308 <HAL_ADC_ConfigChannel+0x4dc>)
 8006148:	428b      	cmp	r3, r1
 800614a:	d140      	bne.n	80061ce <HAL_ADC_ConfigChannel+0x3a2>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	495c      	ldr	r1, [pc, #368]	@ (80062c4 <HAL_ADC_ConfigChannel+0x498>)
 8006152:	428b      	cmp	r3, r1
 8006154:	d039      	beq.n	80061ca <HAL_ADC_ConfigChannel+0x39e>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	495b      	ldr	r1, [pc, #364]	@ (80062c8 <HAL_ADC_ConfigChannel+0x49c>)
 800615c:	428b      	cmp	r3, r1
 800615e:	d032      	beq.n	80061c6 <HAL_ADC_ConfigChannel+0x39a>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4959      	ldr	r1, [pc, #356]	@ (80062cc <HAL_ADC_ConfigChannel+0x4a0>)
 8006166:	428b      	cmp	r3, r1
 8006168:	d02b      	beq.n	80061c2 <HAL_ADC_ConfigChannel+0x396>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4958      	ldr	r1, [pc, #352]	@ (80062d0 <HAL_ADC_ConfigChannel+0x4a4>)
 8006170:	428b      	cmp	r3, r1
 8006172:	d024      	beq.n	80061be <HAL_ADC_ConfigChannel+0x392>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4956      	ldr	r1, [pc, #344]	@ (80062d4 <HAL_ADC_ConfigChannel+0x4a8>)
 800617a:	428b      	cmp	r3, r1
 800617c:	d01d      	beq.n	80061ba <HAL_ADC_ConfigChannel+0x38e>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4955      	ldr	r1, [pc, #340]	@ (80062d8 <HAL_ADC_ConfigChannel+0x4ac>)
 8006184:	428b      	cmp	r3, r1
 8006186:	d016      	beq.n	80061b6 <HAL_ADC_ConfigChannel+0x38a>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4953      	ldr	r1, [pc, #332]	@ (80062dc <HAL_ADC_ConfigChannel+0x4b0>)
 800618e:	428b      	cmp	r3, r1
 8006190:	d00f      	beq.n	80061b2 <HAL_ADC_ConfigChannel+0x386>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4952      	ldr	r1, [pc, #328]	@ (80062e0 <HAL_ADC_ConfigChannel+0x4b4>)
 8006198:	428b      	cmp	r3, r1
 800619a:	d008      	beq.n	80061ae <HAL_ADC_ConfigChannel+0x382>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4951      	ldr	r1, [pc, #324]	@ (80062e8 <HAL_ADC_ConfigChannel+0x4bc>)
 80061a2:	428b      	cmp	r3, r1
 80061a4:	d101      	bne.n	80061aa <HAL_ADC_ConfigChannel+0x37e>
 80061a6:	4b51      	ldr	r3, [pc, #324]	@ (80062ec <HAL_ADC_ConfigChannel+0x4c0>)
 80061a8:	e012      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061aa:	2300      	movs	r3, #0
 80061ac:	e010      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061ae:	4b51      	ldr	r3, [pc, #324]	@ (80062f4 <HAL_ADC_ConfigChannel+0x4c8>)
 80061b0:	e00e      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061b2:	4b4b      	ldr	r3, [pc, #300]	@ (80062e0 <HAL_ADC_ConfigChannel+0x4b4>)
 80061b4:	e00c      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061b6:	4b49      	ldr	r3, [pc, #292]	@ (80062dc <HAL_ADC_ConfigChannel+0x4b0>)
 80061b8:	e00a      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061ba:	4b4f      	ldr	r3, [pc, #316]	@ (80062f8 <HAL_ADC_ConfigChannel+0x4cc>)
 80061bc:	e008      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061be:	4b4f      	ldr	r3, [pc, #316]	@ (80062fc <HAL_ADC_ConfigChannel+0x4d0>)
 80061c0:	e006      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006300 <HAL_ADC_ConfigChannel+0x4d4>)
 80061c4:	e004      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006304 <HAL_ADC_ConfigChannel+0x4d8>)
 80061c8:	e002      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x3a4>
 80061ce:	2300      	movs	r3, #0
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f7ff f856 	bl	8005284 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f280 80fc 	bge.w	80063da <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a36      	ldr	r2, [pc, #216]	@ (80062c0 <HAL_ADC_ConfigChannel+0x494>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_ADC_ConfigChannel+0x3ca>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a45      	ldr	r2, [pc, #276]	@ (8006308 <HAL_ADC_ConfigChannel+0x4dc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d101      	bne.n	80061fa <HAL_ADC_ConfigChannel+0x3ce>
 80061f6:	4b45      	ldr	r3, [pc, #276]	@ (800630c <HAL_ADC_ConfigChannel+0x4e0>)
 80061f8:	e000      	b.n	80061fc <HAL_ADC_ConfigChannel+0x3d0>
 80061fa:	4b45      	ldr	r3, [pc, #276]	@ (8006310 <HAL_ADC_ConfigChannel+0x4e4>)
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff f833 	bl	8005268 <LL_ADC_GetCommonPathInternalCh>
 8006202:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a2d      	ldr	r2, [pc, #180]	@ (80062c0 <HAL_ADC_ConfigChannel+0x494>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_ADC_ConfigChannel+0x3ec>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a3d      	ldr	r2, [pc, #244]	@ (8006308 <HAL_ADC_ConfigChannel+0x4dc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10e      	bne.n	8006236 <HAL_ADC_ConfigChannel+0x40a>
 8006218:	4829      	ldr	r0, [pc, #164]	@ (80062c0 <HAL_ADC_ConfigChannel+0x494>)
 800621a:	f7ff f9db 	bl	80055d4 <LL_ADC_IsEnabled>
 800621e:	4604      	mov	r4, r0
 8006220:	4839      	ldr	r0, [pc, #228]	@ (8006308 <HAL_ADC_ConfigChannel+0x4dc>)
 8006222:	f7ff f9d7 	bl	80055d4 <LL_ADC_IsEnabled>
 8006226:	4603      	mov	r3, r0
 8006228:	4323      	orrs	r3, r4
 800622a:	2b00      	cmp	r3, #0
 800622c:	bf0c      	ite	eq
 800622e:	2301      	moveq	r3, #1
 8006230:	2300      	movne	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	e008      	b.n	8006248 <HAL_ADC_ConfigChannel+0x41c>
 8006236:	4837      	ldr	r0, [pc, #220]	@ (8006314 <HAL_ADC_ConfigChannel+0x4e8>)
 8006238:	f7ff f9cc 	bl	80055d4 <LL_ADC_IsEnabled>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	bf0c      	ite	eq
 8006242:	2301      	moveq	r3, #1
 8006244:	2300      	movne	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80b3 	beq.w	80063b4 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a31      	ldr	r2, [pc, #196]	@ (8006318 <HAL_ADC_ConfigChannel+0x4ec>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d165      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x4f8>
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d160      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2b      	ldr	r2, [pc, #172]	@ (8006314 <HAL_ADC_ConfigChannel+0x4e8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	f040 80b6 	bne.w	80063da <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a13      	ldr	r2, [pc, #76]	@ (80062c0 <HAL_ADC_ConfigChannel+0x494>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_ADC_ConfigChannel+0x456>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a22      	ldr	r2, [pc, #136]	@ (8006308 <HAL_ADC_ConfigChannel+0x4dc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d101      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x45a>
 8006282:	4a22      	ldr	r2, [pc, #136]	@ (800630c <HAL_ADC_ConfigChannel+0x4e0>)
 8006284:	e000      	b.n	8006288 <HAL_ADC_ConfigChannel+0x45c>
 8006286:	4a22      	ldr	r2, [pc, #136]	@ (8006310 <HAL_ADC_ConfigChannel+0x4e4>)
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f7fe ffd6 	bl	8005242 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006296:	4b21      	ldr	r3, [pc, #132]	@ (800631c <HAL_ADC_ConfigChannel+0x4f0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	099b      	lsrs	r3, r3, #6
 800629c:	4a20      	ldr	r2, [pc, #128]	@ (8006320 <HAL_ADC_ConfigChannel+0x4f4>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	099b      	lsrs	r3, r3, #6
 80062a4:	3301      	adds	r3, #1
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80062aa:	e002      	b.n	80062b2 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1f9      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062b8:	e08f      	b.n	80063da <HAL_ADC_ConfigChannel+0x5ae>
 80062ba:	bf00      	nop
 80062bc:	47ff0000 	.word	0x47ff0000
 80062c0:	40022000 	.word	0x40022000
 80062c4:	04300002 	.word	0x04300002
 80062c8:	08600004 	.word	0x08600004
 80062cc:	0c900008 	.word	0x0c900008
 80062d0:	10c00010 	.word	0x10c00010
 80062d4:	14f00020 	.word	0x14f00020
 80062d8:	2a000400 	.word	0x2a000400
 80062dc:	2e300800 	.word	0x2e300800
 80062e0:	32601000 	.word	0x32601000
 80062e4:	43210000 	.word	0x43210000
 80062e8:	4b840000 	.word	0x4b840000
 80062ec:	4fb80000 	.word	0x4fb80000
 80062f0:	47520000 	.word	0x47520000
 80062f4:	36902000 	.word	0x36902000
 80062f8:	25b00200 	.word	0x25b00200
 80062fc:	21800100 	.word	0x21800100
 8006300:	1d500080 	.word	0x1d500080
 8006304:	19200040 	.word	0x19200040
 8006308:	40022100 	.word	0x40022100
 800630c:	40022300 	.word	0x40022300
 8006310:	58026300 	.word	0x58026300
 8006314:	58026000 	.word	0x58026000
 8006318:	cb840000 	.word	0xcb840000
 800631c:	24000018 	.word	0x24000018
 8006320:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a31      	ldr	r2, [pc, #196]	@ (80063f0 <HAL_ADC_ConfigChannel+0x5c4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d11e      	bne.n	800636c <HAL_ADC_ConfigChannel+0x540>
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d119      	bne.n	800636c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a2d      	ldr	r2, [pc, #180]	@ (80063f4 <HAL_ADC_ConfigChannel+0x5c8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d14b      	bne.n	80063da <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a2c      	ldr	r2, [pc, #176]	@ (80063f8 <HAL_ADC_ConfigChannel+0x5cc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_ADC_ConfigChannel+0x52a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a2a      	ldr	r2, [pc, #168]	@ (80063fc <HAL_ADC_ConfigChannel+0x5d0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d101      	bne.n	800635a <HAL_ADC_ConfigChannel+0x52e>
 8006356:	4a2a      	ldr	r2, [pc, #168]	@ (8006400 <HAL_ADC_ConfigChannel+0x5d4>)
 8006358:	e000      	b.n	800635c <HAL_ADC_ConfigChannel+0x530>
 800635a:	4a2a      	ldr	r2, [pc, #168]	@ (8006404 <HAL_ADC_ConfigChannel+0x5d8>)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f7fe ff6c 	bl	8005242 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800636a:	e036      	b.n	80063da <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a25      	ldr	r2, [pc, #148]	@ (8006408 <HAL_ADC_ConfigChannel+0x5dc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d131      	bne.n	80063da <HAL_ADC_ConfigChannel+0x5ae>
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d12c      	bne.n	80063da <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1b      	ldr	r2, [pc, #108]	@ (80063f4 <HAL_ADC_ConfigChannel+0x5c8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d127      	bne.n	80063da <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1a      	ldr	r2, [pc, #104]	@ (80063f8 <HAL_ADC_ConfigChannel+0x5cc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_ADC_ConfigChannel+0x572>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <HAL_ADC_ConfigChannel+0x5d0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x576>
 800639e:	4a18      	ldr	r2, [pc, #96]	@ (8006400 <HAL_ADC_ConfigChannel+0x5d4>)
 80063a0:	e000      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x578>
 80063a2:	4a18      	ldr	r2, [pc, #96]	@ (8006404 <HAL_ADC_ConfigChannel+0x5d8>)
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063aa:	4619      	mov	r1, r3
 80063ac:	4610      	mov	r0, r2
 80063ae:	f7fe ff48 	bl	8005242 <LL_ADC_SetCommonPathInternalCh>
 80063b2:	e012      	b.n	80063da <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b8:	f043 0220 	orr.w	r2, r3, #32
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80063c6:	e008      	b.n	80063da <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80063e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3734      	adds	r7, #52	@ 0x34
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd90      	pop	{r4, r7, pc}
 80063ee:	bf00      	nop
 80063f0:	c7520000 	.word	0xc7520000
 80063f4:	58026000 	.word	0x58026000
 80063f8:	40022000 	.word	0x40022000
 80063fc:	40022100 	.word	0x40022100
 8006400:	40022300 	.word	0x40022300
 8006404:	58026300 	.word	0x58026300
 8006408:	cfb80000 	.word	0xcfb80000

0800640c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff f924 	bl	8005670 <LL_ADC_REG_IsConversionOngoing>
 8006428:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff f946 	bl	80056c0 <LL_ADC_INJ_IsConversionOngoing>
 8006434:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 8098 	beq.w	8006574 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d02a      	beq.n	80064a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	7d5b      	ldrb	r3, [r3, #21]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d126      	bne.n	80064a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	7d1b      	ldrb	r3, [r3, #20]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d122      	bne.n	80064a8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006462:	2301      	movs	r3, #1
 8006464:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006466:	e014      	b.n	8006492 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4a45      	ldr	r2, [pc, #276]	@ (8006580 <ADC_ConversionStop+0x174>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d90d      	bls.n	800648c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006474:	f043 0210 	orr.w	r2, r3, #16
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006480:	f043 0201 	orr.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e074      	b.n	8006576 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	3301      	adds	r3, #1
 8006490:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649c:	2b40      	cmp	r3, #64	@ 0x40
 800649e:	d1e3      	bne.n	8006468 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2240      	movs	r2, #64	@ 0x40
 80064a6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d014      	beq.n	80064d8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff f8dc 	bl	8005670 <LL_ADC_REG_IsConversionOngoing>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff f899 	bl	80055fa <LL_ADC_IsDisableOngoing>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff f8b8 	bl	8005648 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d014      	beq.n	8006508 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff f8ec 	bl	80056c0 <LL_ADC_INJ_IsConversionOngoing>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00c      	beq.n	8006508 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff f881 	bl	80055fa <LL_ADC_IsDisableOngoing>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff f8c8 	bl	8005698 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d005      	beq.n	800651a <ADC_ConversionStop+0x10e>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b03      	cmp	r3, #3
 8006512:	d105      	bne.n	8006520 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006514:	230c      	movs	r3, #12
 8006516:	617b      	str	r3, [r7, #20]
        break;
 8006518:	e005      	b.n	8006526 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800651a:	2308      	movs	r3, #8
 800651c:	617b      	str	r3, [r7, #20]
        break;
 800651e:	e002      	b.n	8006526 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006520:	2304      	movs	r3, #4
 8006522:	617b      	str	r3, [r7, #20]
        break;
 8006524:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006526:	f7fe fe3d 	bl	80051a4 <HAL_GetTick>
 800652a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800652c:	e01b      	b.n	8006566 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800652e:	f7fe fe39 	bl	80051a4 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b05      	cmp	r3, #5
 800653a:	d914      	bls.n	8006566 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	4013      	ands	r3, r2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00d      	beq.n	8006566 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800654e:	f043 0210 	orr.w	r2, r3, #16
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655a:	f043 0201 	orr.w	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e007      	b.n	8006576 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	4013      	ands	r3, r2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1dc      	bne.n	800652e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	000cdbff 	.word	0x000cdbff

08006584 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff f81f 	bl	80055d4 <LL_ADC_IsEnabled>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d16e      	bne.n	800667a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	4b38      	ldr	r3, [pc, #224]	@ (8006684 <ADC_Enable+0x100>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00d      	beq.n	80065c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ae:	f043 0210 	orr.w	r2, r3, #16
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ba:	f043 0201 	orr.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e05a      	b.n	800667c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe ffda 	bl	8005584 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80065d0:	f7fe fde8 	bl	80051a4 <HAL_GetTick>
 80065d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a2b      	ldr	r2, [pc, #172]	@ (8006688 <ADC_Enable+0x104>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <ADC_Enable+0x66>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a29      	ldr	r2, [pc, #164]	@ (800668c <ADC_Enable+0x108>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d101      	bne.n	80065ee <ADC_Enable+0x6a>
 80065ea:	4b29      	ldr	r3, [pc, #164]	@ (8006690 <ADC_Enable+0x10c>)
 80065ec:	e000      	b.n	80065f0 <ADC_Enable+0x6c>
 80065ee:	4b29      	ldr	r3, [pc, #164]	@ (8006694 <ADC_Enable+0x110>)
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe ff5d 	bl	80054b0 <LL_ADC_GetMultimode>
 80065f6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a23      	ldr	r2, [pc, #140]	@ (800668c <ADC_Enable+0x108>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d002      	beq.n	8006608 <ADC_Enable+0x84>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	e000      	b.n	800660a <ADC_Enable+0x86>
 8006608:	4b1f      	ldr	r3, [pc, #124]	@ (8006688 <ADC_Enable+0x104>)
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6812      	ldr	r2, [r2, #0]
 800660e:	4293      	cmp	r3, r2
 8006610:	d02c      	beq.n	800666c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d130      	bne.n	800667a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006618:	e028      	b.n	800666c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe ffd8 	bl	80055d4 <LL_ADC_IsEnabled>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe ffa8 	bl	8005584 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006634:	f7fe fdb6 	bl	80051a4 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d914      	bls.n	800666c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b01      	cmp	r3, #1
 800664e:	d00d      	beq.n	800666c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006654:	f043 0210 	orr.w	r2, r3, #16
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006660:	f043 0201 	orr.w	r2, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e007      	b.n	800667c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b01      	cmp	r3, #1
 8006678:	d1cf      	bne.n	800661a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	8000003f 	.word	0x8000003f
 8006688:	40022000 	.word	0x40022000
 800668c:	40022100 	.word	0x40022100
 8006690:	40022300 	.word	0x40022300
 8006694:	58026300 	.word	0x58026300

08006698 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe ffa8 	bl	80055fa <LL_ADC_IsDisableOngoing>
 80066aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe ff8f 	bl	80055d4 <LL_ADC_IsEnabled>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d047      	beq.n	800674c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d144      	bne.n	800674c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 030d 	and.w	r3, r3, #13
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d10c      	bne.n	80066ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe ff69 	bl	80055ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2203      	movs	r2, #3
 80066e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80066e2:	f7fe fd5f 	bl	80051a4 <HAL_GetTick>
 80066e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80066e8:	e029      	b.n	800673e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ee:	f043 0210 	orr.w	r2, r3, #16
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fa:	f043 0201 	orr.w	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e023      	b.n	800674e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006706:	f7fe fd4d 	bl	80051a4 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d914      	bls.n	800673e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00d      	beq.n	800673e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006726:	f043 0210 	orr.w	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006732:	f043 0201 	orr.w	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e007      	b.n	800674e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1dc      	bne.n	8006706 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a7a      	ldr	r2, [pc, #488]	@ (8006950 <ADC_ConfigureBoostMode+0x1f8>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <ADC_ConfigureBoostMode+0x1c>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a79      	ldr	r2, [pc, #484]	@ (8006954 <ADC_ConfigureBoostMode+0x1fc>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d109      	bne.n	8006788 <ADC_ConfigureBoostMode+0x30>
 8006774:	4b78      	ldr	r3, [pc, #480]	@ (8006958 <ADC_ConfigureBoostMode+0x200>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	e008      	b.n	800679a <ADC_ConfigureBoostMode+0x42>
 8006788:	4b74      	ldr	r3, [pc, #464]	@ (800695c <ADC_ConfigureBoostMode+0x204>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf14      	ite	ne
 8006794:	2301      	movne	r3, #1
 8006796:	2300      	moveq	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01c      	beq.n	80067d8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800679e:	f004 fb3d 	bl	800ae1c <HAL_RCC_GetHCLKFreq>
 80067a2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067ac:	d010      	beq.n	80067d0 <ADC_ConfigureBoostMode+0x78>
 80067ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067b2:	d873      	bhi.n	800689c <ADC_ConfigureBoostMode+0x144>
 80067b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b8:	d002      	beq.n	80067c0 <ADC_ConfigureBoostMode+0x68>
 80067ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067be:	d16d      	bne.n	800689c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	0c1b      	lsrs	r3, r3, #16
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	60fb      	str	r3, [r7, #12]
        break;
 80067ce:	e068      	b.n	80068a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	089b      	lsrs	r3, r3, #2
 80067d4:	60fb      	str	r3, [r7, #12]
        break;
 80067d6:	e064      	b.n	80068a2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80067d8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80067dc:	f04f 0100 	mov.w	r1, #0
 80067e0:	f005 fd82 	bl	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80067e4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80067ee:	d051      	beq.n	8006894 <ADC_ConfigureBoostMode+0x13c>
 80067f0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80067f4:	d854      	bhi.n	80068a0 <ADC_ConfigureBoostMode+0x148>
 80067f6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80067fa:	d047      	beq.n	800688c <ADC_ConfigureBoostMode+0x134>
 80067fc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006800:	d84e      	bhi.n	80068a0 <ADC_ConfigureBoostMode+0x148>
 8006802:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006806:	d03d      	beq.n	8006884 <ADC_ConfigureBoostMode+0x12c>
 8006808:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800680c:	d848      	bhi.n	80068a0 <ADC_ConfigureBoostMode+0x148>
 800680e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006812:	d033      	beq.n	800687c <ADC_ConfigureBoostMode+0x124>
 8006814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006818:	d842      	bhi.n	80068a0 <ADC_ConfigureBoostMode+0x148>
 800681a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800681e:	d029      	beq.n	8006874 <ADC_ConfigureBoostMode+0x11c>
 8006820:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006824:	d83c      	bhi.n	80068a0 <ADC_ConfigureBoostMode+0x148>
 8006826:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800682a:	d01a      	beq.n	8006862 <ADC_ConfigureBoostMode+0x10a>
 800682c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006830:	d836      	bhi.n	80068a0 <ADC_ConfigureBoostMode+0x148>
 8006832:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006836:	d014      	beq.n	8006862 <ADC_ConfigureBoostMode+0x10a>
 8006838:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800683c:	d830      	bhi.n	80068a0 <ADC_ConfigureBoostMode+0x148>
 800683e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006842:	d00e      	beq.n	8006862 <ADC_ConfigureBoostMode+0x10a>
 8006844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006848:	d82a      	bhi.n	80068a0 <ADC_ConfigureBoostMode+0x148>
 800684a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800684e:	d008      	beq.n	8006862 <ADC_ConfigureBoostMode+0x10a>
 8006850:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006854:	d824      	bhi.n	80068a0 <ADC_ConfigureBoostMode+0x148>
 8006856:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800685a:	d002      	beq.n	8006862 <ADC_ConfigureBoostMode+0x10a>
 800685c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006860:	d11e      	bne.n	80068a0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	0c9b      	lsrs	r3, r3, #18
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	60fb      	str	r3, [r7, #12]
        break;
 8006872:	e016      	b.n	80068a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	091b      	lsrs	r3, r3, #4
 8006878:	60fb      	str	r3, [r7, #12]
        break;
 800687a:	e012      	b.n	80068a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	60fb      	str	r3, [r7, #12]
        break;
 8006882:	e00e      	b.n	80068a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	60fb      	str	r3, [r7, #12]
        break;
 800688a:	e00a      	b.n	80068a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	09db      	lsrs	r3, r3, #7
 8006890:	60fb      	str	r3, [r7, #12]
        break;
 8006892:	e006      	b.n	80068a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	60fb      	str	r3, [r7, #12]
        break;
 800689a:	e002      	b.n	80068a2 <ADC_ConfigureBoostMode+0x14a>
        break;
 800689c:	bf00      	nop
 800689e:	e000      	b.n	80068a2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80068a0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80068a2:	f7fe fcaf 	bl	8005204 <HAL_GetREVID>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d815      	bhi.n	80068dc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006960 <ADC_ConfigureBoostMode+0x208>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d908      	bls.n	80068ca <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068c6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80068c8:	e03e      	b.n	8006948 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068d8:	609a      	str	r2, [r3, #8]
}
 80068da:	e035      	b.n	8006948 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006964 <ADC_ConfigureBoostMode+0x20c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d808      	bhi.n	80068fc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80068f8:	609a      	str	r2, [r3, #8]
}
 80068fa:	e025      	b.n	8006948 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006968 <ADC_ConfigureBoostMode+0x210>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d80a      	bhi.n	800691a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	e016      	b.n	8006948 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a13      	ldr	r2, [pc, #76]	@ (800696c <ADC_ConfigureBoostMode+0x214>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d80a      	bhi.n	8006938 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006934:	609a      	str	r2, [r3, #8]
}
 8006936:	e007      	b.n	8006948 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006946:	609a      	str	r2, [r3, #8]
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40022000 	.word	0x40022000
 8006954:	40022100 	.word	0x40022100
 8006958:	40022300 	.word	0x40022300
 800695c:	58026300 	.word	0x58026300
 8006960:	01312d00 	.word	0x01312d00
 8006964:	005f5e10 	.word	0x005f5e10
 8006968:	00bebc20 	.word	0x00bebc20
 800696c:	017d7840 	.word	0x017d7840

08006970 <LL_ADC_IsEnabled>:
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <LL_ADC_IsEnabled+0x18>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <LL_ADC_IsEnabled+0x1a>
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <LL_ADC_REG_IsConversionOngoing>:
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d101      	bne.n	80069ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80069bc:	b590      	push	{r4, r7, lr}
 80069be:	b09f      	sub	sp, #124	@ 0x7c
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e0be      	b.n	8006b58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80069e2:	2300      	movs	r3, #0
 80069e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a5c      	ldr	r2, [pc, #368]	@ (8006b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d102      	bne.n	80069fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80069f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	e001      	b.n	80069fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80069fa:	2300      	movs	r3, #0
 80069fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10b      	bne.n	8006a1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a08:	f043 0220 	orr.w	r2, r3, #32
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e09d      	b.n	8006b58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff ffb9 	bl	8006996 <LL_ADC_REG_IsConversionOngoing>
 8006a24:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff ffb3 	bl	8006996 <LL_ADC_REG_IsConversionOngoing>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d17f      	bne.n	8006b36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d17c      	bne.n	8006b36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a47      	ldr	r2, [pc, #284]	@ (8006b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a46      	ldr	r2, [pc, #280]	@ (8006b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006a50:	4b45      	ldr	r3, [pc, #276]	@ (8006b68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006a52:	e000      	b.n	8006a56 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006a54:	4b45      	ldr	r3, [pc, #276]	@ (8006b6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006a56:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d039      	beq.n	8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a70:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a3a      	ldr	r2, [pc, #232]	@ (8006b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d004      	beq.n	8006a86 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a38      	ldr	r2, [pc, #224]	@ (8006b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d10e      	bne.n	8006aa4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006a86:	4836      	ldr	r0, [pc, #216]	@ (8006b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a88:	f7ff ff72 	bl	8006970 <LL_ADC_IsEnabled>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	4835      	ldr	r0, [pc, #212]	@ (8006b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a90:	f7ff ff6e 	bl	8006970 <LL_ADC_IsEnabled>
 8006a94:	4603      	mov	r3, r0
 8006a96:	4323      	orrs	r3, r4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	bf0c      	ite	eq
 8006a9c:	2301      	moveq	r3, #1
 8006a9e:	2300      	movne	r3, #0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	e008      	b.n	8006ab6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006aa4:	4832      	ldr	r0, [pc, #200]	@ (8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006aa6:	f7ff ff63 	bl	8006970 <LL_ADC_IsEnabled>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf0c      	ite	eq
 8006ab0:	2301      	moveq	r3, #1
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d047      	beq.n	8006b4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	4b2d      	ldr	r3, [pc, #180]	@ (8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	6811      	ldr	r1, [r2, #0]
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	6892      	ldr	r2, [r2, #8]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	431a      	orrs	r2, r3
 8006ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ad2:	e03a      	b.n	8006b4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ade:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d004      	beq.n	8006af4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1d      	ldr	r2, [pc, #116]	@ (8006b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d10e      	bne.n	8006b12 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006af4:	481a      	ldr	r0, [pc, #104]	@ (8006b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006af6:	f7ff ff3b 	bl	8006970 <LL_ADC_IsEnabled>
 8006afa:	4604      	mov	r4, r0
 8006afc:	4819      	ldr	r0, [pc, #100]	@ (8006b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006afe:	f7ff ff37 	bl	8006970 <LL_ADC_IsEnabled>
 8006b02:	4603      	mov	r3, r0
 8006b04:	4323      	orrs	r3, r4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bf0c      	ite	eq
 8006b0a:	2301      	moveq	r3, #1
 8006b0c:	2300      	movne	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	e008      	b.n	8006b24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006b12:	4817      	ldr	r0, [pc, #92]	@ (8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006b14:	f7ff ff2c 	bl	8006970 <LL_ADC_IsEnabled>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bf0c      	ite	eq
 8006b1e:	2301      	moveq	r3, #1
 8006b20:	2300      	movne	r3, #0
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d010      	beq.n	8006b4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	4b11      	ldr	r3, [pc, #68]	@ (8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b32:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b34:	e009      	b.n	8006b4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3a:	f043 0220 	orr.w	r2, r3, #32
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8006b48:	e000      	b.n	8006b4c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b4a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006b54:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	377c      	adds	r7, #124	@ 0x7c
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd90      	pop	{r4, r7, pc}
 8006b60:	40022000 	.word	0x40022000
 8006b64:	40022100 	.word	0x40022100
 8006b68:	40022300 	.word	0x40022300
 8006b6c:	58026300 	.word	0x58026300
 8006b70:	58026000 	.word	0x58026000
 8006b74:	fffff0e0 	.word	0xfffff0e0

08006b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b88:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006b94:	4013      	ands	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ba0:	4b06      	ldr	r3, [pc, #24]	@ (8006bbc <__NVIC_SetPriorityGrouping+0x44>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ba6:	4a04      	ldr	r2, [pc, #16]	@ (8006bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	60d3      	str	r3, [r2, #12]
}
 8006bac:	bf00      	nop
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	e000ed00 	.word	0xe000ed00
 8006bbc:	05fa0000 	.word	0x05fa0000

08006bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bc4:	4b04      	ldr	r3, [pc, #16]	@ (8006bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	0a1b      	lsrs	r3, r3, #8
 8006bca:	f003 0307 	and.w	r3, r3, #7
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	e000ed00 	.word	0xe000ed00

08006bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	db0b      	blt.n	8006c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	f003 021f 	and.w	r2, r3, #31
 8006bf4:	4907      	ldr	r1, [pc, #28]	@ (8006c14 <__NVIC_EnableIRQ+0x38>)
 8006bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8006c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	e000e100 	.word	0xe000e100

08006c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6039      	str	r1, [r7, #0]
 8006c22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	db0a      	blt.n	8006c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	490c      	ldr	r1, [pc, #48]	@ (8006c64 <__NVIC_SetPriority+0x4c>)
 8006c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c36:	0112      	lsls	r2, r2, #4
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c40:	e00a      	b.n	8006c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	4908      	ldr	r1, [pc, #32]	@ (8006c68 <__NVIC_SetPriority+0x50>)
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	3b04      	subs	r3, #4
 8006c50:	0112      	lsls	r2, r2, #4
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	440b      	add	r3, r1
 8006c56:	761a      	strb	r2, [r3, #24]
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	e000e100 	.word	0xe000e100
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b089      	sub	sp, #36	@ 0x24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f1c3 0307 	rsb	r3, r3, #7
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	bf28      	it	cs
 8006c8a:	2304      	movcs	r3, #4
 8006c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	3304      	adds	r3, #4
 8006c92:	2b06      	cmp	r3, #6
 8006c94:	d902      	bls.n	8006c9c <NVIC_EncodePriority+0x30>
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	3b03      	subs	r3, #3
 8006c9a:	e000      	b.n	8006c9e <NVIC_EncodePriority+0x32>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	43da      	mvns	r2, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	401a      	ands	r2, r3
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbe:	43d9      	mvns	r1, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cc4:	4313      	orrs	r3, r2
         );
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3724      	adds	r7, #36	@ 0x24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ce4:	d301      	bcc.n	8006cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e00f      	b.n	8006d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cea:	4a0a      	ldr	r2, [pc, #40]	@ (8006d14 <SysTick_Config+0x40>)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cf2:	210f      	movs	r1, #15
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	f7ff ff8e 	bl	8006c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cfc:	4b05      	ldr	r3, [pc, #20]	@ (8006d14 <SysTick_Config+0x40>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d02:	4b04      	ldr	r3, [pc, #16]	@ (8006d14 <SysTick_Config+0x40>)
 8006d04:	2207      	movs	r2, #7
 8006d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	e000e010 	.word	0xe000e010

08006d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff ff29 	bl	8006b78 <__NVIC_SetPriorityGrouping>
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	4603      	mov	r3, r0
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d3c:	f7ff ff40 	bl	8006bc0 <__NVIC_GetPriorityGrouping>
 8006d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	6978      	ldr	r0, [r7, #20]
 8006d48:	f7ff ff90 	bl	8006c6c <NVIC_EncodePriority>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff ff5f 	bl	8006c18 <__NVIC_SetPriority>
}
 8006d5a:	bf00      	nop
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	4603      	mov	r3, r0
 8006d6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff ff33 	bl	8006bdc <__NVIC_EnableIRQ>
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff ffa4 	bl	8006cd4 <SysTick_Config>
 8006d8c:	4603      	mov	r3, r0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006d9c:	f3bf 8f5f 	dmb	sy
}
 8006da0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006da2:	4b07      	ldr	r3, [pc, #28]	@ (8006dc0 <HAL_MPU_Disable+0x28>)
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	4a06      	ldr	r2, [pc, #24]	@ (8006dc0 <HAL_MPU_Disable+0x28>)
 8006da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006dae:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <HAL_MPU_Disable+0x2c>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	605a      	str	r2, [r3, #4]
}
 8006db4:	bf00      	nop
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	e000ed00 	.word	0xe000ed00
 8006dc4:	e000ed90 	.word	0xe000ed90

08006dc8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8006e00 <HAL_MPU_Enable+0x38>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006dda:	4b0a      	ldr	r3, [pc, #40]	@ (8006e04 <HAL_MPU_Enable+0x3c>)
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	4a09      	ldr	r2, [pc, #36]	@ (8006e04 <HAL_MPU_Enable+0x3c>)
 8006de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006de6:	f3bf 8f4f 	dsb	sy
}
 8006dea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006dec:	f3bf 8f6f 	isb	sy
}
 8006df0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	e000ed90 	.word	0xe000ed90
 8006e04:	e000ed00 	.word	0xe000ed00

08006e08 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	785a      	ldrb	r2, [r3, #1]
 8006e14:	4b1b      	ldr	r3, [pc, #108]	@ (8006e84 <HAL_MPU_ConfigRegion+0x7c>)
 8006e16:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006e18:	4b1a      	ldr	r3, [pc, #104]	@ (8006e84 <HAL_MPU_ConfigRegion+0x7c>)
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	4a19      	ldr	r2, [pc, #100]	@ (8006e84 <HAL_MPU_ConfigRegion+0x7c>)
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006e24:	4a17      	ldr	r2, [pc, #92]	@ (8006e84 <HAL_MPU_ConfigRegion+0x7c>)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7b1b      	ldrb	r3, [r3, #12]
 8006e30:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7adb      	ldrb	r3, [r3, #11]
 8006e36:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7a9b      	ldrb	r3, [r3, #10]
 8006e3e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	7b5b      	ldrb	r3, [r3, #13]
 8006e46:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006e48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7b9b      	ldrb	r3, [r3, #14]
 8006e4e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006e50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7bdb      	ldrb	r3, [r3, #15]
 8006e56:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006e58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7a5b      	ldrb	r3, [r3, #9]
 8006e5e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7a1b      	ldrb	r3, [r3, #8]
 8006e66:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006e68:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e70:	4a04      	ldr	r2, [pc, #16]	@ (8006e84 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e72:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e74:	6113      	str	r3, [r2, #16]
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	e000ed90 	.word	0xe000ed90

08006e88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006e90:	f7fe f988 	bl	80051a4 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e316      	b.n	80074ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a66      	ldr	r2, [pc, #408]	@ (8007040 <HAL_DMA_Init+0x1b8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d04a      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a65      	ldr	r2, [pc, #404]	@ (8007044 <HAL_DMA_Init+0x1bc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d045      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a63      	ldr	r2, [pc, #396]	@ (8007048 <HAL_DMA_Init+0x1c0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d040      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a62      	ldr	r2, [pc, #392]	@ (800704c <HAL_DMA_Init+0x1c4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d03b      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a60      	ldr	r2, [pc, #384]	@ (8007050 <HAL_DMA_Init+0x1c8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d036      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a5f      	ldr	r2, [pc, #380]	@ (8007054 <HAL_DMA_Init+0x1cc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d031      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8007058 <HAL_DMA_Init+0x1d0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d02c      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a5c      	ldr	r2, [pc, #368]	@ (800705c <HAL_DMA_Init+0x1d4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d027      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a5a      	ldr	r2, [pc, #360]	@ (8007060 <HAL_DMA_Init+0x1d8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d022      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a59      	ldr	r2, [pc, #356]	@ (8007064 <HAL_DMA_Init+0x1dc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d01d      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a57      	ldr	r2, [pc, #348]	@ (8007068 <HAL_DMA_Init+0x1e0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d018      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a56      	ldr	r2, [pc, #344]	@ (800706c <HAL_DMA_Init+0x1e4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d013      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a54      	ldr	r2, [pc, #336]	@ (8007070 <HAL_DMA_Init+0x1e8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00e      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a53      	ldr	r2, [pc, #332]	@ (8007074 <HAL_DMA_Init+0x1ec>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d009      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a51      	ldr	r2, [pc, #324]	@ (8007078 <HAL_DMA_Init+0x1f0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d004      	beq.n	8006f40 <HAL_DMA_Init+0xb8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a50      	ldr	r2, [pc, #320]	@ (800707c <HAL_DMA_Init+0x1f4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d101      	bne.n	8006f44 <HAL_DMA_Init+0xbc>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <HAL_DMA_Init+0xbe>
 8006f44:	2300      	movs	r3, #0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 813b 	beq.w	80071c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a37      	ldr	r2, [pc, #220]	@ (8007040 <HAL_DMA_Init+0x1b8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d04a      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a36      	ldr	r2, [pc, #216]	@ (8007044 <HAL_DMA_Init+0x1bc>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d045      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a34      	ldr	r2, [pc, #208]	@ (8007048 <HAL_DMA_Init+0x1c0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d040      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a33      	ldr	r2, [pc, #204]	@ (800704c <HAL_DMA_Init+0x1c4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d03b      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a31      	ldr	r2, [pc, #196]	@ (8007050 <HAL_DMA_Init+0x1c8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d036      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a30      	ldr	r2, [pc, #192]	@ (8007054 <HAL_DMA_Init+0x1cc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d031      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007058 <HAL_DMA_Init+0x1d0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d02c      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800705c <HAL_DMA_Init+0x1d4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d027      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8007060 <HAL_DMA_Init+0x1d8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d022      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2a      	ldr	r2, [pc, #168]	@ (8007064 <HAL_DMA_Init+0x1dc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d01d      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a28      	ldr	r2, [pc, #160]	@ (8007068 <HAL_DMA_Init+0x1e0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a27      	ldr	r2, [pc, #156]	@ (800706c <HAL_DMA_Init+0x1e4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d013      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	@ (8007070 <HAL_DMA_Init+0x1e8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a24      	ldr	r2, [pc, #144]	@ (8007074 <HAL_DMA_Init+0x1ec>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a22      	ldr	r2, [pc, #136]	@ (8007078 <HAL_DMA_Init+0x1f0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <HAL_DMA_Init+0x174>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a21      	ldr	r2, [pc, #132]	@ (800707c <HAL_DMA_Init+0x1f4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d108      	bne.n	800700e <HAL_DMA_Init+0x186>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0201 	bic.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e007      	b.n	800701e <HAL_DMA_Init+0x196>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0201 	bic.w	r2, r2, #1
 800701c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800701e:	e02f      	b.n	8007080 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007020:	f7fe f8c0 	bl	80051a4 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b05      	cmp	r3, #5
 800702c:	d928      	bls.n	8007080 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2203      	movs	r2, #3
 8007038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e246      	b.n	80074ce <HAL_DMA_Init+0x646>
 8007040:	40020010 	.word	0x40020010
 8007044:	40020028 	.word	0x40020028
 8007048:	40020040 	.word	0x40020040
 800704c:	40020058 	.word	0x40020058
 8007050:	40020070 	.word	0x40020070
 8007054:	40020088 	.word	0x40020088
 8007058:	400200a0 	.word	0x400200a0
 800705c:	400200b8 	.word	0x400200b8
 8007060:	40020410 	.word	0x40020410
 8007064:	40020428 	.word	0x40020428
 8007068:	40020440 	.word	0x40020440
 800706c:	40020458 	.word	0x40020458
 8007070:	40020470 	.word	0x40020470
 8007074:	40020488 	.word	0x40020488
 8007078:	400204a0 	.word	0x400204a0
 800707c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1c8      	bne.n	8007020 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4b83      	ldr	r3, [pc, #524]	@ (80072a8 <HAL_DMA_Init+0x420>)
 800709a:	4013      	ands	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80070a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d107      	bne.n	80070e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070dc:	4313      	orrs	r3, r2
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80070e4:	4b71      	ldr	r3, [pc, #452]	@ (80072ac <HAL_DMA_Init+0x424>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	4b71      	ldr	r3, [pc, #452]	@ (80072b0 <HAL_DMA_Init+0x428>)
 80070ea:	4013      	ands	r3, r2
 80070ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070f0:	d328      	bcc.n	8007144 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b28      	cmp	r3, #40	@ 0x28
 80070f8:	d903      	bls.n	8007102 <HAL_DMA_Init+0x27a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007100:	d917      	bls.n	8007132 <HAL_DMA_Init+0x2aa>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b3e      	cmp	r3, #62	@ 0x3e
 8007108:	d903      	bls.n	8007112 <HAL_DMA_Init+0x28a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b42      	cmp	r3, #66	@ 0x42
 8007110:	d90f      	bls.n	8007132 <HAL_DMA_Init+0x2aa>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b46      	cmp	r3, #70	@ 0x46
 8007118:	d903      	bls.n	8007122 <HAL_DMA_Init+0x29a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b48      	cmp	r3, #72	@ 0x48
 8007120:	d907      	bls.n	8007132 <HAL_DMA_Init+0x2aa>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b4e      	cmp	r3, #78	@ 0x4e
 8007128:	d905      	bls.n	8007136 <HAL_DMA_Init+0x2ae>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b52      	cmp	r3, #82	@ 0x52
 8007130:	d801      	bhi.n	8007136 <HAL_DMA_Init+0x2ae>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <HAL_DMA_Init+0x2b0>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007142:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f023 0307 	bic.w	r3, r3, #7
 800715a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716a:	2b04      	cmp	r3, #4
 800716c:	d117      	bne.n	800719e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00e      	beq.n	800719e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f002 fb33 	bl	80097ec <DMA_CheckFifoParam>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2240      	movs	r2, #64	@ 0x40
 8007190:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e197      	b.n	80074ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 fa6e 	bl	8009688 <DMA_CalcBaseAndBitshift>
 80071ac:	4603      	mov	r3, r0
 80071ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	223f      	movs	r2, #63	@ 0x3f
 80071ba:	409a      	lsls	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	609a      	str	r2, [r3, #8]
 80071c0:	e0cd      	b.n	800735e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a3b      	ldr	r2, [pc, #236]	@ (80072b4 <HAL_DMA_Init+0x42c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d022      	beq.n	8007212 <HAL_DMA_Init+0x38a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a39      	ldr	r2, [pc, #228]	@ (80072b8 <HAL_DMA_Init+0x430>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01d      	beq.n	8007212 <HAL_DMA_Init+0x38a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a38      	ldr	r2, [pc, #224]	@ (80072bc <HAL_DMA_Init+0x434>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d018      	beq.n	8007212 <HAL_DMA_Init+0x38a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a36      	ldr	r2, [pc, #216]	@ (80072c0 <HAL_DMA_Init+0x438>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <HAL_DMA_Init+0x38a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a35      	ldr	r2, [pc, #212]	@ (80072c4 <HAL_DMA_Init+0x43c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <HAL_DMA_Init+0x38a>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a33      	ldr	r2, [pc, #204]	@ (80072c8 <HAL_DMA_Init+0x440>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_DMA_Init+0x38a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a32      	ldr	r2, [pc, #200]	@ (80072cc <HAL_DMA_Init+0x444>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_DMA_Init+0x38a>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a30      	ldr	r2, [pc, #192]	@ (80072d0 <HAL_DMA_Init+0x448>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d101      	bne.n	8007216 <HAL_DMA_Init+0x38e>
 8007212:	2301      	movs	r3, #1
 8007214:	e000      	b.n	8007218 <HAL_DMA_Init+0x390>
 8007216:	2300      	movs	r3, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8097 	beq.w	800734c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a24      	ldr	r2, [pc, #144]	@ (80072b4 <HAL_DMA_Init+0x42c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d021      	beq.n	800726c <HAL_DMA_Init+0x3e4>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a22      	ldr	r2, [pc, #136]	@ (80072b8 <HAL_DMA_Init+0x430>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01c      	beq.n	800726c <HAL_DMA_Init+0x3e4>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a21      	ldr	r2, [pc, #132]	@ (80072bc <HAL_DMA_Init+0x434>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d017      	beq.n	800726c <HAL_DMA_Init+0x3e4>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1f      	ldr	r2, [pc, #124]	@ (80072c0 <HAL_DMA_Init+0x438>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d012      	beq.n	800726c <HAL_DMA_Init+0x3e4>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1e      	ldr	r2, [pc, #120]	@ (80072c4 <HAL_DMA_Init+0x43c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00d      	beq.n	800726c <HAL_DMA_Init+0x3e4>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1c      	ldr	r2, [pc, #112]	@ (80072c8 <HAL_DMA_Init+0x440>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d008      	beq.n	800726c <HAL_DMA_Init+0x3e4>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1b      	ldr	r2, [pc, #108]	@ (80072cc <HAL_DMA_Init+0x444>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <HAL_DMA_Init+0x3e4>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a19      	ldr	r2, [pc, #100]	@ (80072d0 <HAL_DMA_Init+0x448>)
 800726a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4b13      	ldr	r3, [pc, #76]	@ (80072d4 <HAL_DMA_Init+0x44c>)
 8007288:	4013      	ands	r3, r2
 800728a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b40      	cmp	r3, #64	@ 0x40
 8007292:	d021      	beq.n	80072d8 <HAL_DMA_Init+0x450>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b80      	cmp	r3, #128	@ 0x80
 800729a:	d102      	bne.n	80072a2 <HAL_DMA_Init+0x41a>
 800729c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80072a0:	e01b      	b.n	80072da <HAL_DMA_Init+0x452>
 80072a2:	2300      	movs	r3, #0
 80072a4:	e019      	b.n	80072da <HAL_DMA_Init+0x452>
 80072a6:	bf00      	nop
 80072a8:	fe10803f 	.word	0xfe10803f
 80072ac:	5c001000 	.word	0x5c001000
 80072b0:	ffff0000 	.word	0xffff0000
 80072b4:	58025408 	.word	0x58025408
 80072b8:	5802541c 	.word	0x5802541c
 80072bc:	58025430 	.word	0x58025430
 80072c0:	58025444 	.word	0x58025444
 80072c4:	58025458 	.word	0x58025458
 80072c8:	5802546c 	.word	0x5802546c
 80072cc:	58025480 	.word	0x58025480
 80072d0:	58025494 	.word	0x58025494
 80072d4:	fffe000f 	.word	0xfffe000f
 80072d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	68d2      	ldr	r2, [r2, #12]
 80072de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80072e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80072e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80072f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80072f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007300:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007308:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	4b6e      	ldr	r3, [pc, #440]	@ (80074d8 <HAL_DMA_Init+0x650>)
 8007320:	4413      	add	r3, r2
 8007322:	4a6e      	ldr	r2, [pc, #440]	@ (80074dc <HAL_DMA_Init+0x654>)
 8007324:	fba2 2303 	umull	r2, r3, r2, r3
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	009a      	lsls	r2, r3, #2
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f002 f9a9 	bl	8009688 <DMA_CalcBaseAndBitshift>
 8007336:	4603      	mov	r3, r0
 8007338:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800733e:	f003 031f 	and.w	r3, r3, #31
 8007342:	2201      	movs	r2, #1
 8007344:	409a      	lsls	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	605a      	str	r2, [r3, #4]
 800734a:	e008      	b.n	800735e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2240      	movs	r2, #64	@ 0x40
 8007350:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2203      	movs	r2, #3
 8007356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e0b7      	b.n	80074ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a5f      	ldr	r2, [pc, #380]	@ (80074e0 <HAL_DMA_Init+0x658>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d072      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a5d      	ldr	r2, [pc, #372]	@ (80074e4 <HAL_DMA_Init+0x65c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d06d      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a5c      	ldr	r2, [pc, #368]	@ (80074e8 <HAL_DMA_Init+0x660>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d068      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a5a      	ldr	r2, [pc, #360]	@ (80074ec <HAL_DMA_Init+0x664>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d063      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a59      	ldr	r2, [pc, #356]	@ (80074f0 <HAL_DMA_Init+0x668>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d05e      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a57      	ldr	r2, [pc, #348]	@ (80074f4 <HAL_DMA_Init+0x66c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d059      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a56      	ldr	r2, [pc, #344]	@ (80074f8 <HAL_DMA_Init+0x670>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d054      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a54      	ldr	r2, [pc, #336]	@ (80074fc <HAL_DMA_Init+0x674>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d04f      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a53      	ldr	r2, [pc, #332]	@ (8007500 <HAL_DMA_Init+0x678>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d04a      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a51      	ldr	r2, [pc, #324]	@ (8007504 <HAL_DMA_Init+0x67c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d045      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a50      	ldr	r2, [pc, #320]	@ (8007508 <HAL_DMA_Init+0x680>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d040      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a4e      	ldr	r2, [pc, #312]	@ (800750c <HAL_DMA_Init+0x684>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d03b      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a4d      	ldr	r2, [pc, #308]	@ (8007510 <HAL_DMA_Init+0x688>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d036      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a4b      	ldr	r2, [pc, #300]	@ (8007514 <HAL_DMA_Init+0x68c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d031      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a4a      	ldr	r2, [pc, #296]	@ (8007518 <HAL_DMA_Init+0x690>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d02c      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a48      	ldr	r2, [pc, #288]	@ (800751c <HAL_DMA_Init+0x694>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d027      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a47      	ldr	r2, [pc, #284]	@ (8007520 <HAL_DMA_Init+0x698>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d022      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a45      	ldr	r2, [pc, #276]	@ (8007524 <HAL_DMA_Init+0x69c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d01d      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a44      	ldr	r2, [pc, #272]	@ (8007528 <HAL_DMA_Init+0x6a0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d018      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a42      	ldr	r2, [pc, #264]	@ (800752c <HAL_DMA_Init+0x6a4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d013      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a41      	ldr	r2, [pc, #260]	@ (8007530 <HAL_DMA_Init+0x6a8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d00e      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a3f      	ldr	r2, [pc, #252]	@ (8007534 <HAL_DMA_Init+0x6ac>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d009      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a3e      	ldr	r2, [pc, #248]	@ (8007538 <HAL_DMA_Init+0x6b0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d004      	beq.n	800744e <HAL_DMA_Init+0x5c6>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a3c      	ldr	r2, [pc, #240]	@ (800753c <HAL_DMA_Init+0x6b4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d101      	bne.n	8007452 <HAL_DMA_Init+0x5ca>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <HAL_DMA_Init+0x5cc>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d032      	beq.n	80074be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f002 fa43 	bl	80098e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b80      	cmp	r3, #128	@ 0x80
 8007464:	d102      	bne.n	800746c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007480:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d010      	beq.n	80074ac <HAL_DMA_Init+0x624>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b08      	cmp	r3, #8
 8007490:	d80c      	bhi.n	80074ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f002 fac0 	bl	8009a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80074a8:	605a      	str	r2, [r3, #4]
 80074aa:	e008      	b.n	80074be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	a7fdabf8 	.word	0xa7fdabf8
 80074dc:	cccccccd 	.word	0xcccccccd
 80074e0:	40020010 	.word	0x40020010
 80074e4:	40020028 	.word	0x40020028
 80074e8:	40020040 	.word	0x40020040
 80074ec:	40020058 	.word	0x40020058
 80074f0:	40020070 	.word	0x40020070
 80074f4:	40020088 	.word	0x40020088
 80074f8:	400200a0 	.word	0x400200a0
 80074fc:	400200b8 	.word	0x400200b8
 8007500:	40020410 	.word	0x40020410
 8007504:	40020428 	.word	0x40020428
 8007508:	40020440 	.word	0x40020440
 800750c:	40020458 	.word	0x40020458
 8007510:	40020470 	.word	0x40020470
 8007514:	40020488 	.word	0x40020488
 8007518:	400204a0 	.word	0x400204a0
 800751c:	400204b8 	.word	0x400204b8
 8007520:	58025408 	.word	0x58025408
 8007524:	5802541c 	.word	0x5802541c
 8007528:	58025430 	.word	0x58025430
 800752c:	58025444 	.word	0x58025444
 8007530:	58025458 	.word	0x58025458
 8007534:	5802546c 	.word	0x5802546c
 8007538:	58025480 	.word	0x58025480
 800753c:	58025494 	.word	0x58025494

08007540 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e226      	b.n	80079aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_DMA_Start_IT+0x2a>
 8007566:	2302      	movs	r3, #2
 8007568:	e21f      	b.n	80079aa <HAL_DMA_Start_IT+0x46a>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b01      	cmp	r3, #1
 800757c:	f040 820a 	bne.w	8007994 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a68      	ldr	r2, [pc, #416]	@ (8007734 <HAL_DMA_Start_IT+0x1f4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d04a      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a66      	ldr	r2, [pc, #408]	@ (8007738 <HAL_DMA_Start_IT+0x1f8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d045      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a65      	ldr	r2, [pc, #404]	@ (800773c <HAL_DMA_Start_IT+0x1fc>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d040      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a63      	ldr	r2, [pc, #396]	@ (8007740 <HAL_DMA_Start_IT+0x200>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d03b      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a62      	ldr	r2, [pc, #392]	@ (8007744 <HAL_DMA_Start_IT+0x204>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d036      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a60      	ldr	r2, [pc, #384]	@ (8007748 <HAL_DMA_Start_IT+0x208>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d031      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a5f      	ldr	r2, [pc, #380]	@ (800774c <HAL_DMA_Start_IT+0x20c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d02c      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007750 <HAL_DMA_Start_IT+0x210>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d027      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a5c      	ldr	r2, [pc, #368]	@ (8007754 <HAL_DMA_Start_IT+0x214>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d022      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a5a      	ldr	r2, [pc, #360]	@ (8007758 <HAL_DMA_Start_IT+0x218>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d01d      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a59      	ldr	r2, [pc, #356]	@ (800775c <HAL_DMA_Start_IT+0x21c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d018      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a57      	ldr	r2, [pc, #348]	@ (8007760 <HAL_DMA_Start_IT+0x220>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d013      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a56      	ldr	r2, [pc, #344]	@ (8007764 <HAL_DMA_Start_IT+0x224>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d00e      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a54      	ldr	r2, [pc, #336]	@ (8007768 <HAL_DMA_Start_IT+0x228>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d009      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a53      	ldr	r2, [pc, #332]	@ (800776c <HAL_DMA_Start_IT+0x22c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d004      	beq.n	800762e <HAL_DMA_Start_IT+0xee>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a51      	ldr	r2, [pc, #324]	@ (8007770 <HAL_DMA_Start_IT+0x230>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d108      	bne.n	8007640 <HAL_DMA_Start_IT+0x100>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0201 	bic.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	e007      	b.n	8007650 <HAL_DMA_Start_IT+0x110>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0201 	bic.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f001 fe6a 	bl	8009330 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a34      	ldr	r2, [pc, #208]	@ (8007734 <HAL_DMA_Start_IT+0x1f4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d04a      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a33      	ldr	r2, [pc, #204]	@ (8007738 <HAL_DMA_Start_IT+0x1f8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d045      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a31      	ldr	r2, [pc, #196]	@ (800773c <HAL_DMA_Start_IT+0x1fc>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d040      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a30      	ldr	r2, [pc, #192]	@ (8007740 <HAL_DMA_Start_IT+0x200>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d03b      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a2e      	ldr	r2, [pc, #184]	@ (8007744 <HAL_DMA_Start_IT+0x204>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d036      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a2d      	ldr	r2, [pc, #180]	@ (8007748 <HAL_DMA_Start_IT+0x208>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d031      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a2b      	ldr	r2, [pc, #172]	@ (800774c <HAL_DMA_Start_IT+0x20c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d02c      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007750 <HAL_DMA_Start_IT+0x210>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d027      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a28      	ldr	r2, [pc, #160]	@ (8007754 <HAL_DMA_Start_IT+0x214>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d022      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a27      	ldr	r2, [pc, #156]	@ (8007758 <HAL_DMA_Start_IT+0x218>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01d      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a25      	ldr	r2, [pc, #148]	@ (800775c <HAL_DMA_Start_IT+0x21c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d018      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a24      	ldr	r2, [pc, #144]	@ (8007760 <HAL_DMA_Start_IT+0x220>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d013      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a22      	ldr	r2, [pc, #136]	@ (8007764 <HAL_DMA_Start_IT+0x224>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00e      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a21      	ldr	r2, [pc, #132]	@ (8007768 <HAL_DMA_Start_IT+0x228>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d009      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a1f      	ldr	r2, [pc, #124]	@ (800776c <HAL_DMA_Start_IT+0x22c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d004      	beq.n	80076fc <HAL_DMA_Start_IT+0x1bc>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007770 <HAL_DMA_Start_IT+0x230>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d101      	bne.n	8007700 <HAL_DMA_Start_IT+0x1c0>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <HAL_DMA_Start_IT+0x1c2>
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d036      	beq.n	8007774 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f023 021e 	bic.w	r2, r3, #30
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0216 	orr.w	r2, r2, #22
 8007718:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d03e      	beq.n	80077a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0208 	orr.w	r2, r2, #8
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	e035      	b.n	80077a0 <HAL_DMA_Start_IT+0x260>
 8007734:	40020010 	.word	0x40020010
 8007738:	40020028 	.word	0x40020028
 800773c:	40020040 	.word	0x40020040
 8007740:	40020058 	.word	0x40020058
 8007744:	40020070 	.word	0x40020070
 8007748:	40020088 	.word	0x40020088
 800774c:	400200a0 	.word	0x400200a0
 8007750:	400200b8 	.word	0x400200b8
 8007754:	40020410 	.word	0x40020410
 8007758:	40020428 	.word	0x40020428
 800775c:	40020440 	.word	0x40020440
 8007760:	40020458 	.word	0x40020458
 8007764:	40020470 	.word	0x40020470
 8007768:	40020488 	.word	0x40020488
 800776c:	400204a0 	.word	0x400204a0
 8007770:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f023 020e 	bic.w	r2, r3, #14
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 020a 	orr.w	r2, r2, #10
 8007786:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0204 	orr.w	r2, r2, #4
 800779e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a83      	ldr	r2, [pc, #524]	@ (80079b4 <HAL_DMA_Start_IT+0x474>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d072      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a82      	ldr	r2, [pc, #520]	@ (80079b8 <HAL_DMA_Start_IT+0x478>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d06d      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a80      	ldr	r2, [pc, #512]	@ (80079bc <HAL_DMA_Start_IT+0x47c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d068      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a7f      	ldr	r2, [pc, #508]	@ (80079c0 <HAL_DMA_Start_IT+0x480>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d063      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a7d      	ldr	r2, [pc, #500]	@ (80079c4 <HAL_DMA_Start_IT+0x484>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d05e      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a7c      	ldr	r2, [pc, #496]	@ (80079c8 <HAL_DMA_Start_IT+0x488>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d059      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a7a      	ldr	r2, [pc, #488]	@ (80079cc <HAL_DMA_Start_IT+0x48c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d054      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a79      	ldr	r2, [pc, #484]	@ (80079d0 <HAL_DMA_Start_IT+0x490>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d04f      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a77      	ldr	r2, [pc, #476]	@ (80079d4 <HAL_DMA_Start_IT+0x494>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d04a      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a76      	ldr	r2, [pc, #472]	@ (80079d8 <HAL_DMA_Start_IT+0x498>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d045      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a74      	ldr	r2, [pc, #464]	@ (80079dc <HAL_DMA_Start_IT+0x49c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d040      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a73      	ldr	r2, [pc, #460]	@ (80079e0 <HAL_DMA_Start_IT+0x4a0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d03b      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a71      	ldr	r2, [pc, #452]	@ (80079e4 <HAL_DMA_Start_IT+0x4a4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d036      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a70      	ldr	r2, [pc, #448]	@ (80079e8 <HAL_DMA_Start_IT+0x4a8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d031      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a6e      	ldr	r2, [pc, #440]	@ (80079ec <HAL_DMA_Start_IT+0x4ac>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d02c      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a6d      	ldr	r2, [pc, #436]	@ (80079f0 <HAL_DMA_Start_IT+0x4b0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d027      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a6b      	ldr	r2, [pc, #428]	@ (80079f4 <HAL_DMA_Start_IT+0x4b4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d022      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a6a      	ldr	r2, [pc, #424]	@ (80079f8 <HAL_DMA_Start_IT+0x4b8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d01d      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a68      	ldr	r2, [pc, #416]	@ (80079fc <HAL_DMA_Start_IT+0x4bc>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d018      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a67      	ldr	r2, [pc, #412]	@ (8007a00 <HAL_DMA_Start_IT+0x4c0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d013      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a65      	ldr	r2, [pc, #404]	@ (8007a04 <HAL_DMA_Start_IT+0x4c4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00e      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a64      	ldr	r2, [pc, #400]	@ (8007a08 <HAL_DMA_Start_IT+0x4c8>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d009      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a62      	ldr	r2, [pc, #392]	@ (8007a0c <HAL_DMA_Start_IT+0x4cc>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d004      	beq.n	8007890 <HAL_DMA_Start_IT+0x350>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a61      	ldr	r2, [pc, #388]	@ (8007a10 <HAL_DMA_Start_IT+0x4d0>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d101      	bne.n	8007894 <HAL_DMA_Start_IT+0x354>
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <HAL_DMA_Start_IT+0x356>
 8007894:	2300      	movs	r3, #0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01a      	beq.n	80078d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a37      	ldr	r2, [pc, #220]	@ (80079b4 <HAL_DMA_Start_IT+0x474>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d04a      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a36      	ldr	r2, [pc, #216]	@ (80079b8 <HAL_DMA_Start_IT+0x478>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d045      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a34      	ldr	r2, [pc, #208]	@ (80079bc <HAL_DMA_Start_IT+0x47c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d040      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a33      	ldr	r2, [pc, #204]	@ (80079c0 <HAL_DMA_Start_IT+0x480>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d03b      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a31      	ldr	r2, [pc, #196]	@ (80079c4 <HAL_DMA_Start_IT+0x484>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d036      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a30      	ldr	r2, [pc, #192]	@ (80079c8 <HAL_DMA_Start_IT+0x488>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d031      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a2e      	ldr	r2, [pc, #184]	@ (80079cc <HAL_DMA_Start_IT+0x48c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d02c      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a2d      	ldr	r2, [pc, #180]	@ (80079d0 <HAL_DMA_Start_IT+0x490>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d027      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a2b      	ldr	r2, [pc, #172]	@ (80079d4 <HAL_DMA_Start_IT+0x494>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d022      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a2a      	ldr	r2, [pc, #168]	@ (80079d8 <HAL_DMA_Start_IT+0x498>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d01d      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a28      	ldr	r2, [pc, #160]	@ (80079dc <HAL_DMA_Start_IT+0x49c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d018      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a27      	ldr	r2, [pc, #156]	@ (80079e0 <HAL_DMA_Start_IT+0x4a0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d013      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a25      	ldr	r2, [pc, #148]	@ (80079e4 <HAL_DMA_Start_IT+0x4a4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00e      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a24      	ldr	r2, [pc, #144]	@ (80079e8 <HAL_DMA_Start_IT+0x4a8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d009      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a22      	ldr	r2, [pc, #136]	@ (80079ec <HAL_DMA_Start_IT+0x4ac>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d004      	beq.n	8007970 <HAL_DMA_Start_IT+0x430>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a21      	ldr	r2, [pc, #132]	@ (80079f0 <HAL_DMA_Start_IT+0x4b0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d108      	bne.n	8007982 <HAL_DMA_Start_IT+0x442>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0201 	orr.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	e012      	b.n	80079a8 <HAL_DMA_Start_IT+0x468>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f042 0201 	orr.w	r2, r2, #1
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	e009      	b.n	80079a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800799a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40020010 	.word	0x40020010
 80079b8:	40020028 	.word	0x40020028
 80079bc:	40020040 	.word	0x40020040
 80079c0:	40020058 	.word	0x40020058
 80079c4:	40020070 	.word	0x40020070
 80079c8:	40020088 	.word	0x40020088
 80079cc:	400200a0 	.word	0x400200a0
 80079d0:	400200b8 	.word	0x400200b8
 80079d4:	40020410 	.word	0x40020410
 80079d8:	40020428 	.word	0x40020428
 80079dc:	40020440 	.word	0x40020440
 80079e0:	40020458 	.word	0x40020458
 80079e4:	40020470 	.word	0x40020470
 80079e8:	40020488 	.word	0x40020488
 80079ec:	400204a0 	.word	0x400204a0
 80079f0:	400204b8 	.word	0x400204b8
 80079f4:	58025408 	.word	0x58025408
 80079f8:	5802541c 	.word	0x5802541c
 80079fc:	58025430 	.word	0x58025430
 8007a00:	58025444 	.word	0x58025444
 8007a04:	58025458 	.word	0x58025458
 8007a08:	5802546c 	.word	0x5802546c
 8007a0c:	58025480 	.word	0x58025480
 8007a10:	58025494 	.word	0x58025494

08007a14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007a1c:	f7fd fbc2 	bl	80051a4 <HAL_GetTick>
 8007a20:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e2dc      	b.n	8007fe6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d008      	beq.n	8007a4a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2280      	movs	r2, #128	@ 0x80
 8007a3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e2cd      	b.n	8007fe6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a76      	ldr	r2, [pc, #472]	@ (8007c28 <HAL_DMA_Abort+0x214>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d04a      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a74      	ldr	r2, [pc, #464]	@ (8007c2c <HAL_DMA_Abort+0x218>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d045      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a73      	ldr	r2, [pc, #460]	@ (8007c30 <HAL_DMA_Abort+0x21c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d040      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a71      	ldr	r2, [pc, #452]	@ (8007c34 <HAL_DMA_Abort+0x220>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d03b      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a70      	ldr	r2, [pc, #448]	@ (8007c38 <HAL_DMA_Abort+0x224>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d036      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a6e      	ldr	r2, [pc, #440]	@ (8007c3c <HAL_DMA_Abort+0x228>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d031      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a6d      	ldr	r2, [pc, #436]	@ (8007c40 <HAL_DMA_Abort+0x22c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d02c      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a6b      	ldr	r2, [pc, #428]	@ (8007c44 <HAL_DMA_Abort+0x230>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d027      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a6a      	ldr	r2, [pc, #424]	@ (8007c48 <HAL_DMA_Abort+0x234>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d022      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a68      	ldr	r2, [pc, #416]	@ (8007c4c <HAL_DMA_Abort+0x238>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d01d      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a67      	ldr	r2, [pc, #412]	@ (8007c50 <HAL_DMA_Abort+0x23c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d018      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a65      	ldr	r2, [pc, #404]	@ (8007c54 <HAL_DMA_Abort+0x240>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d013      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a64      	ldr	r2, [pc, #400]	@ (8007c58 <HAL_DMA_Abort+0x244>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00e      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a62      	ldr	r2, [pc, #392]	@ (8007c5c <HAL_DMA_Abort+0x248>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d009      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a61      	ldr	r2, [pc, #388]	@ (8007c60 <HAL_DMA_Abort+0x24c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d004      	beq.n	8007aea <HAL_DMA_Abort+0xd6>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a5f      	ldr	r2, [pc, #380]	@ (8007c64 <HAL_DMA_Abort+0x250>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d101      	bne.n	8007aee <HAL_DMA_Abort+0xda>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <HAL_DMA_Abort+0xdc>
 8007aee:	2300      	movs	r3, #0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d013      	beq.n	8007b1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 021e 	bic.w	r2, r2, #30
 8007b02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695a      	ldr	r2, [r3, #20]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	e00a      	b.n	8007b32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 020e 	bic.w	r2, r2, #14
 8007b2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a3c      	ldr	r2, [pc, #240]	@ (8007c28 <HAL_DMA_Abort+0x214>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d072      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a3a      	ldr	r2, [pc, #232]	@ (8007c2c <HAL_DMA_Abort+0x218>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d06d      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a39      	ldr	r2, [pc, #228]	@ (8007c30 <HAL_DMA_Abort+0x21c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d068      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a37      	ldr	r2, [pc, #220]	@ (8007c34 <HAL_DMA_Abort+0x220>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d063      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a36      	ldr	r2, [pc, #216]	@ (8007c38 <HAL_DMA_Abort+0x224>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d05e      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a34      	ldr	r2, [pc, #208]	@ (8007c3c <HAL_DMA_Abort+0x228>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d059      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a33      	ldr	r2, [pc, #204]	@ (8007c40 <HAL_DMA_Abort+0x22c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d054      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a31      	ldr	r2, [pc, #196]	@ (8007c44 <HAL_DMA_Abort+0x230>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d04f      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a30      	ldr	r2, [pc, #192]	@ (8007c48 <HAL_DMA_Abort+0x234>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d04a      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2e      	ldr	r2, [pc, #184]	@ (8007c4c <HAL_DMA_Abort+0x238>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d045      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8007c50 <HAL_DMA_Abort+0x23c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d040      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8007c54 <HAL_DMA_Abort+0x240>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d03b      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2a      	ldr	r2, [pc, #168]	@ (8007c58 <HAL_DMA_Abort+0x244>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d036      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a28      	ldr	r2, [pc, #160]	@ (8007c5c <HAL_DMA_Abort+0x248>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d031      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a27      	ldr	r2, [pc, #156]	@ (8007c60 <HAL_DMA_Abort+0x24c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d02c      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a25      	ldr	r2, [pc, #148]	@ (8007c64 <HAL_DMA_Abort+0x250>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d027      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a24      	ldr	r2, [pc, #144]	@ (8007c68 <HAL_DMA_Abort+0x254>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d022      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a22      	ldr	r2, [pc, #136]	@ (8007c6c <HAL_DMA_Abort+0x258>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d01d      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a21      	ldr	r2, [pc, #132]	@ (8007c70 <HAL_DMA_Abort+0x25c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d018      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8007c74 <HAL_DMA_Abort+0x260>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d013      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8007c78 <HAL_DMA_Abort+0x264>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00e      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1c      	ldr	r2, [pc, #112]	@ (8007c7c <HAL_DMA_Abort+0x268>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d009      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a1b      	ldr	r2, [pc, #108]	@ (8007c80 <HAL_DMA_Abort+0x26c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d004      	beq.n	8007c22 <HAL_DMA_Abort+0x20e>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a19      	ldr	r2, [pc, #100]	@ (8007c84 <HAL_DMA_Abort+0x270>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d132      	bne.n	8007c88 <HAL_DMA_Abort+0x274>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e031      	b.n	8007c8a <HAL_DMA_Abort+0x276>
 8007c26:	bf00      	nop
 8007c28:	40020010 	.word	0x40020010
 8007c2c:	40020028 	.word	0x40020028
 8007c30:	40020040 	.word	0x40020040
 8007c34:	40020058 	.word	0x40020058
 8007c38:	40020070 	.word	0x40020070
 8007c3c:	40020088 	.word	0x40020088
 8007c40:	400200a0 	.word	0x400200a0
 8007c44:	400200b8 	.word	0x400200b8
 8007c48:	40020410 	.word	0x40020410
 8007c4c:	40020428 	.word	0x40020428
 8007c50:	40020440 	.word	0x40020440
 8007c54:	40020458 	.word	0x40020458
 8007c58:	40020470 	.word	0x40020470
 8007c5c:	40020488 	.word	0x40020488
 8007c60:	400204a0 	.word	0x400204a0
 8007c64:	400204b8 	.word	0x400204b8
 8007c68:	58025408 	.word	0x58025408
 8007c6c:	5802541c 	.word	0x5802541c
 8007c70:	58025430 	.word	0x58025430
 8007c74:	58025444 	.word	0x58025444
 8007c78:	58025458 	.word	0x58025458
 8007c7c:	5802546c 	.word	0x5802546c
 8007c80:	58025480 	.word	0x58025480
 8007c84:	58025494 	.word	0x58025494
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a6d      	ldr	r2, [pc, #436]	@ (8007e58 <HAL_DMA_Abort+0x444>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d04a      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a6b      	ldr	r2, [pc, #428]	@ (8007e5c <HAL_DMA_Abort+0x448>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d045      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a6a      	ldr	r2, [pc, #424]	@ (8007e60 <HAL_DMA_Abort+0x44c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d040      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a68      	ldr	r2, [pc, #416]	@ (8007e64 <HAL_DMA_Abort+0x450>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d03b      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a67      	ldr	r2, [pc, #412]	@ (8007e68 <HAL_DMA_Abort+0x454>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d036      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a65      	ldr	r2, [pc, #404]	@ (8007e6c <HAL_DMA_Abort+0x458>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d031      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a64      	ldr	r2, [pc, #400]	@ (8007e70 <HAL_DMA_Abort+0x45c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d02c      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a62      	ldr	r2, [pc, #392]	@ (8007e74 <HAL_DMA_Abort+0x460>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d027      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a61      	ldr	r2, [pc, #388]	@ (8007e78 <HAL_DMA_Abort+0x464>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d022      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a5f      	ldr	r2, [pc, #380]	@ (8007e7c <HAL_DMA_Abort+0x468>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01d      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a5e      	ldr	r2, [pc, #376]	@ (8007e80 <HAL_DMA_Abort+0x46c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d018      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a5c      	ldr	r2, [pc, #368]	@ (8007e84 <HAL_DMA_Abort+0x470>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d013      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8007e88 <HAL_DMA_Abort+0x474>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00e      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a59      	ldr	r2, [pc, #356]	@ (8007e8c <HAL_DMA_Abort+0x478>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d009      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a58      	ldr	r2, [pc, #352]	@ (8007e90 <HAL_DMA_Abort+0x47c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d004      	beq.n	8007d3e <HAL_DMA_Abort+0x32a>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a56      	ldr	r2, [pc, #344]	@ (8007e94 <HAL_DMA_Abort+0x480>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d108      	bne.n	8007d50 <HAL_DMA_Abort+0x33c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0201 	bic.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e007      	b.n	8007d60 <HAL_DMA_Abort+0x34c>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0201 	bic.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007d60:	e013      	b.n	8007d8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d62:	f7fd fa1f 	bl	80051a4 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b05      	cmp	r3, #5
 8007d6e:	d90c      	bls.n	8007d8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2203      	movs	r2, #3
 8007d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e12d      	b.n	8007fe6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e5      	bne.n	8007d62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8007e58 <HAL_DMA_Abort+0x444>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d04a      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a2d      	ldr	r2, [pc, #180]	@ (8007e5c <HAL_DMA_Abort+0x448>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d045      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a2c      	ldr	r2, [pc, #176]	@ (8007e60 <HAL_DMA_Abort+0x44c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d040      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a2a      	ldr	r2, [pc, #168]	@ (8007e64 <HAL_DMA_Abort+0x450>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d03b      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a29      	ldr	r2, [pc, #164]	@ (8007e68 <HAL_DMA_Abort+0x454>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d036      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a27      	ldr	r2, [pc, #156]	@ (8007e6c <HAL_DMA_Abort+0x458>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d031      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a26      	ldr	r2, [pc, #152]	@ (8007e70 <HAL_DMA_Abort+0x45c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d02c      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a24      	ldr	r2, [pc, #144]	@ (8007e74 <HAL_DMA_Abort+0x460>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d027      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a23      	ldr	r2, [pc, #140]	@ (8007e78 <HAL_DMA_Abort+0x464>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d022      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a21      	ldr	r2, [pc, #132]	@ (8007e7c <HAL_DMA_Abort+0x468>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d01d      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a20      	ldr	r2, [pc, #128]	@ (8007e80 <HAL_DMA_Abort+0x46c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d018      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1e      	ldr	r2, [pc, #120]	@ (8007e84 <HAL_DMA_Abort+0x470>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d013      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a1d      	ldr	r2, [pc, #116]	@ (8007e88 <HAL_DMA_Abort+0x474>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00e      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007e8c <HAL_DMA_Abort+0x478>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d009      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a1a      	ldr	r2, [pc, #104]	@ (8007e90 <HAL_DMA_Abort+0x47c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d004      	beq.n	8007e36 <HAL_DMA_Abort+0x422>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a18      	ldr	r2, [pc, #96]	@ (8007e94 <HAL_DMA_Abort+0x480>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d101      	bne.n	8007e3a <HAL_DMA_Abort+0x426>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <HAL_DMA_Abort+0x428>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d02b      	beq.n	8007e98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e4a:	f003 031f 	and.w	r3, r3, #31
 8007e4e:	223f      	movs	r2, #63	@ 0x3f
 8007e50:	409a      	lsls	r2, r3
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	609a      	str	r2, [r3, #8]
 8007e56:	e02a      	b.n	8007eae <HAL_DMA_Abort+0x49a>
 8007e58:	40020010 	.word	0x40020010
 8007e5c:	40020028 	.word	0x40020028
 8007e60:	40020040 	.word	0x40020040
 8007e64:	40020058 	.word	0x40020058
 8007e68:	40020070 	.word	0x40020070
 8007e6c:	40020088 	.word	0x40020088
 8007e70:	400200a0 	.word	0x400200a0
 8007e74:	400200b8 	.word	0x400200b8
 8007e78:	40020410 	.word	0x40020410
 8007e7c:	40020428 	.word	0x40020428
 8007e80:	40020440 	.word	0x40020440
 8007e84:	40020458 	.word	0x40020458
 8007e88:	40020470 	.word	0x40020470
 8007e8c:	40020488 	.word	0x40020488
 8007e90:	400204a0 	.word	0x400204a0
 8007e94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	409a      	lsls	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a4f      	ldr	r2, [pc, #316]	@ (8007ff0 <HAL_DMA_Abort+0x5dc>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d072      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8007ff4 <HAL_DMA_Abort+0x5e0>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d06d      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a4c      	ldr	r2, [pc, #304]	@ (8007ff8 <HAL_DMA_Abort+0x5e4>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d068      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a4a      	ldr	r2, [pc, #296]	@ (8007ffc <HAL_DMA_Abort+0x5e8>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d063      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a49      	ldr	r2, [pc, #292]	@ (8008000 <HAL_DMA_Abort+0x5ec>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d05e      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a47      	ldr	r2, [pc, #284]	@ (8008004 <HAL_DMA_Abort+0x5f0>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d059      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a46      	ldr	r2, [pc, #280]	@ (8008008 <HAL_DMA_Abort+0x5f4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d054      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a44      	ldr	r2, [pc, #272]	@ (800800c <HAL_DMA_Abort+0x5f8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d04f      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a43      	ldr	r2, [pc, #268]	@ (8008010 <HAL_DMA_Abort+0x5fc>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d04a      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a41      	ldr	r2, [pc, #260]	@ (8008014 <HAL_DMA_Abort+0x600>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d045      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a40      	ldr	r2, [pc, #256]	@ (8008018 <HAL_DMA_Abort+0x604>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d040      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a3e      	ldr	r2, [pc, #248]	@ (800801c <HAL_DMA_Abort+0x608>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d03b      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8008020 <HAL_DMA_Abort+0x60c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d036      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a3b      	ldr	r2, [pc, #236]	@ (8008024 <HAL_DMA_Abort+0x610>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d031      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a3a      	ldr	r2, [pc, #232]	@ (8008028 <HAL_DMA_Abort+0x614>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d02c      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a38      	ldr	r2, [pc, #224]	@ (800802c <HAL_DMA_Abort+0x618>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d027      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a37      	ldr	r2, [pc, #220]	@ (8008030 <HAL_DMA_Abort+0x61c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d022      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a35      	ldr	r2, [pc, #212]	@ (8008034 <HAL_DMA_Abort+0x620>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d01d      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a34      	ldr	r2, [pc, #208]	@ (8008038 <HAL_DMA_Abort+0x624>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d018      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a32      	ldr	r2, [pc, #200]	@ (800803c <HAL_DMA_Abort+0x628>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d013      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a31      	ldr	r2, [pc, #196]	@ (8008040 <HAL_DMA_Abort+0x62c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00e      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a2f      	ldr	r2, [pc, #188]	@ (8008044 <HAL_DMA_Abort+0x630>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d009      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8008048 <HAL_DMA_Abort+0x634>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d004      	beq.n	8007f9e <HAL_DMA_Abort+0x58a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a2c      	ldr	r2, [pc, #176]	@ (800804c <HAL_DMA_Abort+0x638>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d101      	bne.n	8007fa2 <HAL_DMA_Abort+0x58e>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e000      	b.n	8007fa4 <HAL_DMA_Abort+0x590>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d015      	beq.n	8007fd4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007fb0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00c      	beq.n	8007fd4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007fc8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007fd2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40020010 	.word	0x40020010
 8007ff4:	40020028 	.word	0x40020028
 8007ff8:	40020040 	.word	0x40020040
 8007ffc:	40020058 	.word	0x40020058
 8008000:	40020070 	.word	0x40020070
 8008004:	40020088 	.word	0x40020088
 8008008:	400200a0 	.word	0x400200a0
 800800c:	400200b8 	.word	0x400200b8
 8008010:	40020410 	.word	0x40020410
 8008014:	40020428 	.word	0x40020428
 8008018:	40020440 	.word	0x40020440
 800801c:	40020458 	.word	0x40020458
 8008020:	40020470 	.word	0x40020470
 8008024:	40020488 	.word	0x40020488
 8008028:	400204a0 	.word	0x400204a0
 800802c:	400204b8 	.word	0x400204b8
 8008030:	58025408 	.word	0x58025408
 8008034:	5802541c 	.word	0x5802541c
 8008038:	58025430 	.word	0x58025430
 800803c:	58025444 	.word	0x58025444
 8008040:	58025458 	.word	0x58025458
 8008044:	5802546c 	.word	0x5802546c
 8008048:	58025480 	.word	0x58025480
 800804c:	58025494 	.word	0x58025494

08008050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e237      	b.n	80084d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d004      	beq.n	8008078 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2280      	movs	r2, #128	@ 0x80
 8008072:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e22c      	b.n	80084d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a5c      	ldr	r2, [pc, #368]	@ (80081f0 <HAL_DMA_Abort_IT+0x1a0>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d04a      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a5b      	ldr	r2, [pc, #364]	@ (80081f4 <HAL_DMA_Abort_IT+0x1a4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d045      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a59      	ldr	r2, [pc, #356]	@ (80081f8 <HAL_DMA_Abort_IT+0x1a8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d040      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a58      	ldr	r2, [pc, #352]	@ (80081fc <HAL_DMA_Abort_IT+0x1ac>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d03b      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a56      	ldr	r2, [pc, #344]	@ (8008200 <HAL_DMA_Abort_IT+0x1b0>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d036      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a55      	ldr	r2, [pc, #340]	@ (8008204 <HAL_DMA_Abort_IT+0x1b4>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d031      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a53      	ldr	r2, [pc, #332]	@ (8008208 <HAL_DMA_Abort_IT+0x1b8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d02c      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a52      	ldr	r2, [pc, #328]	@ (800820c <HAL_DMA_Abort_IT+0x1bc>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d027      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a50      	ldr	r2, [pc, #320]	@ (8008210 <HAL_DMA_Abort_IT+0x1c0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d022      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a4f      	ldr	r2, [pc, #316]	@ (8008214 <HAL_DMA_Abort_IT+0x1c4>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d01d      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a4d      	ldr	r2, [pc, #308]	@ (8008218 <HAL_DMA_Abort_IT+0x1c8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d018      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a4c      	ldr	r2, [pc, #304]	@ (800821c <HAL_DMA_Abort_IT+0x1cc>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d013      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a4a      	ldr	r2, [pc, #296]	@ (8008220 <HAL_DMA_Abort_IT+0x1d0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00e      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a49      	ldr	r2, [pc, #292]	@ (8008224 <HAL_DMA_Abort_IT+0x1d4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d009      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a47      	ldr	r2, [pc, #284]	@ (8008228 <HAL_DMA_Abort_IT+0x1d8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d004      	beq.n	8008118 <HAL_DMA_Abort_IT+0xc8>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a46      	ldr	r2, [pc, #280]	@ (800822c <HAL_DMA_Abort_IT+0x1dc>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d101      	bne.n	800811c <HAL_DMA_Abort_IT+0xcc>
 8008118:	2301      	movs	r3, #1
 800811a:	e000      	b.n	800811e <HAL_DMA_Abort_IT+0xce>
 800811c:	2300      	movs	r3, #0
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 8086 	beq.w	8008230 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2204      	movs	r2, #4
 8008128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a2f      	ldr	r2, [pc, #188]	@ (80081f0 <HAL_DMA_Abort_IT+0x1a0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d04a      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a2e      	ldr	r2, [pc, #184]	@ (80081f4 <HAL_DMA_Abort_IT+0x1a4>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d045      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a2c      	ldr	r2, [pc, #176]	@ (80081f8 <HAL_DMA_Abort_IT+0x1a8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d040      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a2b      	ldr	r2, [pc, #172]	@ (80081fc <HAL_DMA_Abort_IT+0x1ac>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d03b      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a29      	ldr	r2, [pc, #164]	@ (8008200 <HAL_DMA_Abort_IT+0x1b0>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d036      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a28      	ldr	r2, [pc, #160]	@ (8008204 <HAL_DMA_Abort_IT+0x1b4>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d031      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a26      	ldr	r2, [pc, #152]	@ (8008208 <HAL_DMA_Abort_IT+0x1b8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d02c      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a25      	ldr	r2, [pc, #148]	@ (800820c <HAL_DMA_Abort_IT+0x1bc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d027      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a23      	ldr	r2, [pc, #140]	@ (8008210 <HAL_DMA_Abort_IT+0x1c0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d022      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a22      	ldr	r2, [pc, #136]	@ (8008214 <HAL_DMA_Abort_IT+0x1c4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d01d      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a20      	ldr	r2, [pc, #128]	@ (8008218 <HAL_DMA_Abort_IT+0x1c8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d018      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1f      	ldr	r2, [pc, #124]	@ (800821c <HAL_DMA_Abort_IT+0x1cc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d013      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008220 <HAL_DMA_Abort_IT+0x1d0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00e      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a1c      	ldr	r2, [pc, #112]	@ (8008224 <HAL_DMA_Abort_IT+0x1d4>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d009      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008228 <HAL_DMA_Abort_IT+0x1d8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d004      	beq.n	80081cc <HAL_DMA_Abort_IT+0x17c>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a19      	ldr	r2, [pc, #100]	@ (800822c <HAL_DMA_Abort_IT+0x1dc>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d108      	bne.n	80081de <HAL_DMA_Abort_IT+0x18e>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0201 	bic.w	r2, r2, #1
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e178      	b.n	80084d0 <HAL_DMA_Abort_IT+0x480>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0201 	bic.w	r2, r2, #1
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	e16f      	b.n	80084d0 <HAL_DMA_Abort_IT+0x480>
 80081f0:	40020010 	.word	0x40020010
 80081f4:	40020028 	.word	0x40020028
 80081f8:	40020040 	.word	0x40020040
 80081fc:	40020058 	.word	0x40020058
 8008200:	40020070 	.word	0x40020070
 8008204:	40020088 	.word	0x40020088
 8008208:	400200a0 	.word	0x400200a0
 800820c:	400200b8 	.word	0x400200b8
 8008210:	40020410 	.word	0x40020410
 8008214:	40020428 	.word	0x40020428
 8008218:	40020440 	.word	0x40020440
 800821c:	40020458 	.word	0x40020458
 8008220:	40020470 	.word	0x40020470
 8008224:	40020488 	.word	0x40020488
 8008228:	400204a0 	.word	0x400204a0
 800822c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 020e 	bic.w	r2, r2, #14
 800823e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a6c      	ldr	r2, [pc, #432]	@ (80083f8 <HAL_DMA_Abort_IT+0x3a8>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d04a      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a6b      	ldr	r2, [pc, #428]	@ (80083fc <HAL_DMA_Abort_IT+0x3ac>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d045      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a69      	ldr	r2, [pc, #420]	@ (8008400 <HAL_DMA_Abort_IT+0x3b0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d040      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a68      	ldr	r2, [pc, #416]	@ (8008404 <HAL_DMA_Abort_IT+0x3b4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d03b      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a66      	ldr	r2, [pc, #408]	@ (8008408 <HAL_DMA_Abort_IT+0x3b8>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d036      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a65      	ldr	r2, [pc, #404]	@ (800840c <HAL_DMA_Abort_IT+0x3bc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d031      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a63      	ldr	r2, [pc, #396]	@ (8008410 <HAL_DMA_Abort_IT+0x3c0>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d02c      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a62      	ldr	r2, [pc, #392]	@ (8008414 <HAL_DMA_Abort_IT+0x3c4>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d027      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a60      	ldr	r2, [pc, #384]	@ (8008418 <HAL_DMA_Abort_IT+0x3c8>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d022      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a5f      	ldr	r2, [pc, #380]	@ (800841c <HAL_DMA_Abort_IT+0x3cc>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d01d      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a5d      	ldr	r2, [pc, #372]	@ (8008420 <HAL_DMA_Abort_IT+0x3d0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d018      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a5c      	ldr	r2, [pc, #368]	@ (8008424 <HAL_DMA_Abort_IT+0x3d4>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d013      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a5a      	ldr	r2, [pc, #360]	@ (8008428 <HAL_DMA_Abort_IT+0x3d8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00e      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a59      	ldr	r2, [pc, #356]	@ (800842c <HAL_DMA_Abort_IT+0x3dc>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d009      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a57      	ldr	r2, [pc, #348]	@ (8008430 <HAL_DMA_Abort_IT+0x3e0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d004      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x290>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a56      	ldr	r2, [pc, #344]	@ (8008434 <HAL_DMA_Abort_IT+0x3e4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d108      	bne.n	80082f2 <HAL_DMA_Abort_IT+0x2a2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 0201 	bic.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e007      	b.n	8008302 <HAL_DMA_Abort_IT+0x2b2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 0201 	bic.w	r2, r2, #1
 8008300:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a3c      	ldr	r2, [pc, #240]	@ (80083f8 <HAL_DMA_Abort_IT+0x3a8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d072      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a3a      	ldr	r2, [pc, #232]	@ (80083fc <HAL_DMA_Abort_IT+0x3ac>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d06d      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a39      	ldr	r2, [pc, #228]	@ (8008400 <HAL_DMA_Abort_IT+0x3b0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d068      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a37      	ldr	r2, [pc, #220]	@ (8008404 <HAL_DMA_Abort_IT+0x3b4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d063      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a36      	ldr	r2, [pc, #216]	@ (8008408 <HAL_DMA_Abort_IT+0x3b8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d05e      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a34      	ldr	r2, [pc, #208]	@ (800840c <HAL_DMA_Abort_IT+0x3bc>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d059      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a33      	ldr	r2, [pc, #204]	@ (8008410 <HAL_DMA_Abort_IT+0x3c0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d054      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a31      	ldr	r2, [pc, #196]	@ (8008414 <HAL_DMA_Abort_IT+0x3c4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d04f      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a30      	ldr	r2, [pc, #192]	@ (8008418 <HAL_DMA_Abort_IT+0x3c8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d04a      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a2e      	ldr	r2, [pc, #184]	@ (800841c <HAL_DMA_Abort_IT+0x3cc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d045      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a2d      	ldr	r2, [pc, #180]	@ (8008420 <HAL_DMA_Abort_IT+0x3d0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d040      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a2b      	ldr	r2, [pc, #172]	@ (8008424 <HAL_DMA_Abort_IT+0x3d4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d03b      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a2a      	ldr	r2, [pc, #168]	@ (8008428 <HAL_DMA_Abort_IT+0x3d8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d036      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a28      	ldr	r2, [pc, #160]	@ (800842c <HAL_DMA_Abort_IT+0x3dc>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d031      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a27      	ldr	r2, [pc, #156]	@ (8008430 <HAL_DMA_Abort_IT+0x3e0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d02c      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a25      	ldr	r2, [pc, #148]	@ (8008434 <HAL_DMA_Abort_IT+0x3e4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d027      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a24      	ldr	r2, [pc, #144]	@ (8008438 <HAL_DMA_Abort_IT+0x3e8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d022      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a22      	ldr	r2, [pc, #136]	@ (800843c <HAL_DMA_Abort_IT+0x3ec>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d01d      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a21      	ldr	r2, [pc, #132]	@ (8008440 <HAL_DMA_Abort_IT+0x3f0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d018      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a1f      	ldr	r2, [pc, #124]	@ (8008444 <HAL_DMA_Abort_IT+0x3f4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d013      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008448 <HAL_DMA_Abort_IT+0x3f8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00e      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1c      	ldr	r2, [pc, #112]	@ (800844c <HAL_DMA_Abort_IT+0x3fc>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d009      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008450 <HAL_DMA_Abort_IT+0x400>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d004      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x3a2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a19      	ldr	r2, [pc, #100]	@ (8008454 <HAL_DMA_Abort_IT+0x404>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d132      	bne.n	8008458 <HAL_DMA_Abort_IT+0x408>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e031      	b.n	800845a <HAL_DMA_Abort_IT+0x40a>
 80083f6:	bf00      	nop
 80083f8:	40020010 	.word	0x40020010
 80083fc:	40020028 	.word	0x40020028
 8008400:	40020040 	.word	0x40020040
 8008404:	40020058 	.word	0x40020058
 8008408:	40020070 	.word	0x40020070
 800840c:	40020088 	.word	0x40020088
 8008410:	400200a0 	.word	0x400200a0
 8008414:	400200b8 	.word	0x400200b8
 8008418:	40020410 	.word	0x40020410
 800841c:	40020428 	.word	0x40020428
 8008420:	40020440 	.word	0x40020440
 8008424:	40020458 	.word	0x40020458
 8008428:	40020470 	.word	0x40020470
 800842c:	40020488 	.word	0x40020488
 8008430:	400204a0 	.word	0x400204a0
 8008434:	400204b8 	.word	0x400204b8
 8008438:	58025408 	.word	0x58025408
 800843c:	5802541c 	.word	0x5802541c
 8008440:	58025430 	.word	0x58025430
 8008444:	58025444 	.word	0x58025444
 8008448:	58025458 	.word	0x58025458
 800844c:	5802546c 	.word	0x5802546c
 8008450:	58025480 	.word	0x58025480
 8008454:	58025494 	.word	0x58025494
 8008458:	2300      	movs	r3, #0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d028      	beq.n	80084b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008468:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800846c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008472:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008478:	f003 031f 	and.w	r3, r3, #31
 800847c:	2201      	movs	r2, #1
 800847e:	409a      	lsls	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800848c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00c      	beq.n	80084b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80084ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop

080084dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08a      	sub	sp, #40	@ 0x28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80084e8:	4b67      	ldr	r3, [pc, #412]	@ (8008688 <HAL_DMA_IRQHandler+0x1ac>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a67      	ldr	r2, [pc, #412]	@ (800868c <HAL_DMA_IRQHandler+0x1b0>)
 80084ee:	fba2 2303 	umull	r2, r3, r2, r3
 80084f2:	0a9b      	lsrs	r3, r3, #10
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008500:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a5f      	ldr	r2, [pc, #380]	@ (8008690 <HAL_DMA_IRQHandler+0x1b4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d04a      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a5d      	ldr	r2, [pc, #372]	@ (8008694 <HAL_DMA_IRQHandler+0x1b8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d045      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a5c      	ldr	r2, [pc, #368]	@ (8008698 <HAL_DMA_IRQHandler+0x1bc>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d040      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a5a      	ldr	r2, [pc, #360]	@ (800869c <HAL_DMA_IRQHandler+0x1c0>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d03b      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a59      	ldr	r2, [pc, #356]	@ (80086a0 <HAL_DMA_IRQHandler+0x1c4>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d036      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a57      	ldr	r2, [pc, #348]	@ (80086a4 <HAL_DMA_IRQHandler+0x1c8>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d031      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a56      	ldr	r2, [pc, #344]	@ (80086a8 <HAL_DMA_IRQHandler+0x1cc>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d02c      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a54      	ldr	r2, [pc, #336]	@ (80086ac <HAL_DMA_IRQHandler+0x1d0>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d027      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a53      	ldr	r2, [pc, #332]	@ (80086b0 <HAL_DMA_IRQHandler+0x1d4>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d022      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a51      	ldr	r2, [pc, #324]	@ (80086b4 <HAL_DMA_IRQHandler+0x1d8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d01d      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a50      	ldr	r2, [pc, #320]	@ (80086b8 <HAL_DMA_IRQHandler+0x1dc>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d018      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a4e      	ldr	r2, [pc, #312]	@ (80086bc <HAL_DMA_IRQHandler+0x1e0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d013      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a4d      	ldr	r2, [pc, #308]	@ (80086c0 <HAL_DMA_IRQHandler+0x1e4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00e      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a4b      	ldr	r2, [pc, #300]	@ (80086c4 <HAL_DMA_IRQHandler+0x1e8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d009      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a4a      	ldr	r2, [pc, #296]	@ (80086c8 <HAL_DMA_IRQHandler+0x1ec>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d004      	beq.n	80085ae <HAL_DMA_IRQHandler+0xd2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a48      	ldr	r2, [pc, #288]	@ (80086cc <HAL_DMA_IRQHandler+0x1f0>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d101      	bne.n	80085b2 <HAL_DMA_IRQHandler+0xd6>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <HAL_DMA_IRQHandler+0xd8>
 80085b2:	2300      	movs	r3, #0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 842b 	beq.w	8008e10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085be:	f003 031f 	and.w	r3, r3, #31
 80085c2:	2208      	movs	r2, #8
 80085c4:	409a      	lsls	r2, r3
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	4013      	ands	r3, r2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 80a2 	beq.w	8008714 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a2e      	ldr	r2, [pc, #184]	@ (8008690 <HAL_DMA_IRQHandler+0x1b4>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d04a      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a2d      	ldr	r2, [pc, #180]	@ (8008694 <HAL_DMA_IRQHandler+0x1b8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d045      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a2b      	ldr	r2, [pc, #172]	@ (8008698 <HAL_DMA_IRQHandler+0x1bc>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d040      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a2a      	ldr	r2, [pc, #168]	@ (800869c <HAL_DMA_IRQHandler+0x1c0>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d03b      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a28      	ldr	r2, [pc, #160]	@ (80086a0 <HAL_DMA_IRQHandler+0x1c4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d036      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a27      	ldr	r2, [pc, #156]	@ (80086a4 <HAL_DMA_IRQHandler+0x1c8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d031      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a25      	ldr	r2, [pc, #148]	@ (80086a8 <HAL_DMA_IRQHandler+0x1cc>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d02c      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a24      	ldr	r2, [pc, #144]	@ (80086ac <HAL_DMA_IRQHandler+0x1d0>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d027      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a22      	ldr	r2, [pc, #136]	@ (80086b0 <HAL_DMA_IRQHandler+0x1d4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d022      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a21      	ldr	r2, [pc, #132]	@ (80086b4 <HAL_DMA_IRQHandler+0x1d8>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d01d      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a1f      	ldr	r2, [pc, #124]	@ (80086b8 <HAL_DMA_IRQHandler+0x1dc>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d018      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1e      	ldr	r2, [pc, #120]	@ (80086bc <HAL_DMA_IRQHandler+0x1e0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d013      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a1c      	ldr	r2, [pc, #112]	@ (80086c0 <HAL_DMA_IRQHandler+0x1e4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00e      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a1b      	ldr	r2, [pc, #108]	@ (80086c4 <HAL_DMA_IRQHandler+0x1e8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d009      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a19      	ldr	r2, [pc, #100]	@ (80086c8 <HAL_DMA_IRQHandler+0x1ec>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d004      	beq.n	8008670 <HAL_DMA_IRQHandler+0x194>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a18      	ldr	r2, [pc, #96]	@ (80086cc <HAL_DMA_IRQHandler+0x1f0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d12f      	bne.n	80086d0 <HAL_DMA_IRQHandler+0x1f4>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0304 	and.w	r3, r3, #4
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	e02e      	b.n	80086e4 <HAL_DMA_IRQHandler+0x208>
 8008686:	bf00      	nop
 8008688:	24000018 	.word	0x24000018
 800868c:	1b4e81b5 	.word	0x1b4e81b5
 8008690:	40020010 	.word	0x40020010
 8008694:	40020028 	.word	0x40020028
 8008698:	40020040 	.word	0x40020040
 800869c:	40020058 	.word	0x40020058
 80086a0:	40020070 	.word	0x40020070
 80086a4:	40020088 	.word	0x40020088
 80086a8:	400200a0 	.word	0x400200a0
 80086ac:	400200b8 	.word	0x400200b8
 80086b0:	40020410 	.word	0x40020410
 80086b4:	40020428 	.word	0x40020428
 80086b8:	40020440 	.word	0x40020440
 80086bc:	40020458 	.word	0x40020458
 80086c0:	40020470 	.word	0x40020470
 80086c4:	40020488 	.word	0x40020488
 80086c8:	400204a0 	.word	0x400204a0
 80086cc:	400204b8 	.word	0x400204b8
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0308 	and.w	r3, r3, #8
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bf14      	ite	ne
 80086de:	2301      	movne	r3, #1
 80086e0:	2300      	moveq	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d015      	beq.n	8008714 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0204 	bic.w	r2, r2, #4
 80086f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086fc:	f003 031f 	and.w	r3, r3, #31
 8008700:	2208      	movs	r2, #8
 8008702:	409a      	lsls	r2, r3
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870c:	f043 0201 	orr.w	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	fa22 f303 	lsr.w	r3, r2, r3
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d06e      	beq.n	8008808 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a69      	ldr	r2, [pc, #420]	@ (80088d4 <HAL_DMA_IRQHandler+0x3f8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d04a      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a67      	ldr	r2, [pc, #412]	@ (80088d8 <HAL_DMA_IRQHandler+0x3fc>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d045      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a66      	ldr	r2, [pc, #408]	@ (80088dc <HAL_DMA_IRQHandler+0x400>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d040      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a64      	ldr	r2, [pc, #400]	@ (80088e0 <HAL_DMA_IRQHandler+0x404>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d03b      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a63      	ldr	r2, [pc, #396]	@ (80088e4 <HAL_DMA_IRQHandler+0x408>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d036      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a61      	ldr	r2, [pc, #388]	@ (80088e8 <HAL_DMA_IRQHandler+0x40c>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d031      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a60      	ldr	r2, [pc, #384]	@ (80088ec <HAL_DMA_IRQHandler+0x410>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d02c      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a5e      	ldr	r2, [pc, #376]	@ (80088f0 <HAL_DMA_IRQHandler+0x414>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d027      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a5d      	ldr	r2, [pc, #372]	@ (80088f4 <HAL_DMA_IRQHandler+0x418>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d022      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a5b      	ldr	r2, [pc, #364]	@ (80088f8 <HAL_DMA_IRQHandler+0x41c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d01d      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a5a      	ldr	r2, [pc, #360]	@ (80088fc <HAL_DMA_IRQHandler+0x420>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d018      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a58      	ldr	r2, [pc, #352]	@ (8008900 <HAL_DMA_IRQHandler+0x424>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d013      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a57      	ldr	r2, [pc, #348]	@ (8008904 <HAL_DMA_IRQHandler+0x428>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00e      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a55      	ldr	r2, [pc, #340]	@ (8008908 <HAL_DMA_IRQHandler+0x42c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d009      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a54      	ldr	r2, [pc, #336]	@ (800890c <HAL_DMA_IRQHandler+0x430>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d004      	beq.n	80087ca <HAL_DMA_IRQHandler+0x2ee>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a52      	ldr	r2, [pc, #328]	@ (8008910 <HAL_DMA_IRQHandler+0x434>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d10a      	bne.n	80087e0 <HAL_DMA_IRQHandler+0x304>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bf14      	ite	ne
 80087d8:	2301      	movne	r3, #1
 80087da:	2300      	moveq	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	e003      	b.n	80087e8 <HAL_DMA_IRQHandler+0x30c>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2300      	movs	r3, #0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00d      	beq.n	8008808 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087f0:	f003 031f 	and.w	r3, r3, #31
 80087f4:	2201      	movs	r2, #1
 80087f6:	409a      	lsls	r2, r3
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008800:	f043 0202 	orr.w	r2, r3, #2
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800880c:	f003 031f 	and.w	r3, r3, #31
 8008810:	2204      	movs	r2, #4
 8008812:	409a      	lsls	r2, r3
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	4013      	ands	r3, r2
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 808f 	beq.w	800893c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a2c      	ldr	r2, [pc, #176]	@ (80088d4 <HAL_DMA_IRQHandler+0x3f8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d04a      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a2a      	ldr	r2, [pc, #168]	@ (80088d8 <HAL_DMA_IRQHandler+0x3fc>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d045      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a29      	ldr	r2, [pc, #164]	@ (80088dc <HAL_DMA_IRQHandler+0x400>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d040      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a27      	ldr	r2, [pc, #156]	@ (80088e0 <HAL_DMA_IRQHandler+0x404>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d03b      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a26      	ldr	r2, [pc, #152]	@ (80088e4 <HAL_DMA_IRQHandler+0x408>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d036      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a24      	ldr	r2, [pc, #144]	@ (80088e8 <HAL_DMA_IRQHandler+0x40c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d031      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a23      	ldr	r2, [pc, #140]	@ (80088ec <HAL_DMA_IRQHandler+0x410>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d02c      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a21      	ldr	r2, [pc, #132]	@ (80088f0 <HAL_DMA_IRQHandler+0x414>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d027      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a20      	ldr	r2, [pc, #128]	@ (80088f4 <HAL_DMA_IRQHandler+0x418>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d022      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a1e      	ldr	r2, [pc, #120]	@ (80088f8 <HAL_DMA_IRQHandler+0x41c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d01d      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a1d      	ldr	r2, [pc, #116]	@ (80088fc <HAL_DMA_IRQHandler+0x420>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d018      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a1b      	ldr	r2, [pc, #108]	@ (8008900 <HAL_DMA_IRQHandler+0x424>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d013      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a1a      	ldr	r2, [pc, #104]	@ (8008904 <HAL_DMA_IRQHandler+0x428>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00e      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a18      	ldr	r2, [pc, #96]	@ (8008908 <HAL_DMA_IRQHandler+0x42c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d009      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a17      	ldr	r2, [pc, #92]	@ (800890c <HAL_DMA_IRQHandler+0x430>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d004      	beq.n	80088be <HAL_DMA_IRQHandler+0x3e2>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a15      	ldr	r2, [pc, #84]	@ (8008910 <HAL_DMA_IRQHandler+0x434>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d12a      	bne.n	8008914 <HAL_DMA_IRQHandler+0x438>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bf14      	ite	ne
 80088cc:	2301      	movne	r3, #1
 80088ce:	2300      	moveq	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	e023      	b.n	800891c <HAL_DMA_IRQHandler+0x440>
 80088d4:	40020010 	.word	0x40020010
 80088d8:	40020028 	.word	0x40020028
 80088dc:	40020040 	.word	0x40020040
 80088e0:	40020058 	.word	0x40020058
 80088e4:	40020070 	.word	0x40020070
 80088e8:	40020088 	.word	0x40020088
 80088ec:	400200a0 	.word	0x400200a0
 80088f0:	400200b8 	.word	0x400200b8
 80088f4:	40020410 	.word	0x40020410
 80088f8:	40020428 	.word	0x40020428
 80088fc:	40020440 	.word	0x40020440
 8008900:	40020458 	.word	0x40020458
 8008904:	40020470 	.word	0x40020470
 8008908:	40020488 	.word	0x40020488
 800890c:	400204a0 	.word	0x400204a0
 8008910:	400204b8 	.word	0x400204b8
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2300      	movs	r3, #0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00d      	beq.n	800893c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008924:	f003 031f 	and.w	r3, r3, #31
 8008928:	2204      	movs	r2, #4
 800892a:	409a      	lsls	r2, r3
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008934:	f043 0204 	orr.w	r2, r3, #4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008940:	f003 031f 	and.w	r3, r3, #31
 8008944:	2210      	movs	r2, #16
 8008946:	409a      	lsls	r2, r3
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	4013      	ands	r3, r2
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 80a6 	beq.w	8008a9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a85      	ldr	r2, [pc, #532]	@ (8008b6c <HAL_DMA_IRQHandler+0x690>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d04a      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a83      	ldr	r2, [pc, #524]	@ (8008b70 <HAL_DMA_IRQHandler+0x694>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d045      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a82      	ldr	r2, [pc, #520]	@ (8008b74 <HAL_DMA_IRQHandler+0x698>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d040      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a80      	ldr	r2, [pc, #512]	@ (8008b78 <HAL_DMA_IRQHandler+0x69c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d03b      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a7f      	ldr	r2, [pc, #508]	@ (8008b7c <HAL_DMA_IRQHandler+0x6a0>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d036      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a7d      	ldr	r2, [pc, #500]	@ (8008b80 <HAL_DMA_IRQHandler+0x6a4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d031      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a7c      	ldr	r2, [pc, #496]	@ (8008b84 <HAL_DMA_IRQHandler+0x6a8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d02c      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a7a      	ldr	r2, [pc, #488]	@ (8008b88 <HAL_DMA_IRQHandler+0x6ac>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d027      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a79      	ldr	r2, [pc, #484]	@ (8008b8c <HAL_DMA_IRQHandler+0x6b0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d022      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a77      	ldr	r2, [pc, #476]	@ (8008b90 <HAL_DMA_IRQHandler+0x6b4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d01d      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a76      	ldr	r2, [pc, #472]	@ (8008b94 <HAL_DMA_IRQHandler+0x6b8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d018      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a74      	ldr	r2, [pc, #464]	@ (8008b98 <HAL_DMA_IRQHandler+0x6bc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d013      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a73      	ldr	r2, [pc, #460]	@ (8008b9c <HAL_DMA_IRQHandler+0x6c0>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d00e      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a71      	ldr	r2, [pc, #452]	@ (8008ba0 <HAL_DMA_IRQHandler+0x6c4>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d009      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a70      	ldr	r2, [pc, #448]	@ (8008ba4 <HAL_DMA_IRQHandler+0x6c8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d004      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x516>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a6e      	ldr	r2, [pc, #440]	@ (8008ba8 <HAL_DMA_IRQHandler+0x6cc>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d10a      	bne.n	8008a08 <HAL_DMA_IRQHandler+0x52c>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0308 	and.w	r3, r3, #8
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	bf14      	ite	ne
 8008a00:	2301      	movne	r3, #1
 8008a02:	2300      	moveq	r3, #0
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	e009      	b.n	8008a1c <HAL_DMA_IRQHandler+0x540>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	bf14      	ite	ne
 8008a16:	2301      	movne	r3, #1
 8008a18:	2300      	moveq	r3, #0
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d03e      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	2210      	movs	r2, #16
 8008a2a:	409a      	lsls	r2, r3
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d018      	beq.n	8008a70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d108      	bne.n	8008a5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d024      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	4798      	blx	r3
 8008a5c:	e01f      	b.n	8008a9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d01b      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
 8008a6e:	e016      	b.n	8008a9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d107      	bne.n	8008a8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0208 	bic.w	r2, r2, #8
 8008a8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa2:	f003 031f 	and.w	r3, r3, #31
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	409a      	lsls	r2, r3
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	4013      	ands	r3, r2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 8110 	beq.w	8008cd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8008b6c <HAL_DMA_IRQHandler+0x690>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d04a      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8008b70 <HAL_DMA_IRQHandler+0x694>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d045      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a29      	ldr	r2, [pc, #164]	@ (8008b74 <HAL_DMA_IRQHandler+0x698>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d040      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a28      	ldr	r2, [pc, #160]	@ (8008b78 <HAL_DMA_IRQHandler+0x69c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d03b      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a26      	ldr	r2, [pc, #152]	@ (8008b7c <HAL_DMA_IRQHandler+0x6a0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d036      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a25      	ldr	r2, [pc, #148]	@ (8008b80 <HAL_DMA_IRQHandler+0x6a4>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d031      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a23      	ldr	r2, [pc, #140]	@ (8008b84 <HAL_DMA_IRQHandler+0x6a8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d02c      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a22      	ldr	r2, [pc, #136]	@ (8008b88 <HAL_DMA_IRQHandler+0x6ac>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d027      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a20      	ldr	r2, [pc, #128]	@ (8008b8c <HAL_DMA_IRQHandler+0x6b0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d022      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a1f      	ldr	r2, [pc, #124]	@ (8008b90 <HAL_DMA_IRQHandler+0x6b4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d01d      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008b94 <HAL_DMA_IRQHandler+0x6b8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d018      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a1c      	ldr	r2, [pc, #112]	@ (8008b98 <HAL_DMA_IRQHandler+0x6bc>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d013      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a1a      	ldr	r2, [pc, #104]	@ (8008b9c <HAL_DMA_IRQHandler+0x6c0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00e      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a19      	ldr	r2, [pc, #100]	@ (8008ba0 <HAL_DMA_IRQHandler+0x6c4>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d009      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a17      	ldr	r2, [pc, #92]	@ (8008ba4 <HAL_DMA_IRQHandler+0x6c8>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d004      	beq.n	8008b54 <HAL_DMA_IRQHandler+0x678>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a16      	ldr	r2, [pc, #88]	@ (8008ba8 <HAL_DMA_IRQHandler+0x6cc>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d12b      	bne.n	8008bac <HAL_DMA_IRQHandler+0x6d0>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0310 	and.w	r3, r3, #16
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bf14      	ite	ne
 8008b62:	2301      	movne	r3, #1
 8008b64:	2300      	moveq	r3, #0
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	e02a      	b.n	8008bc0 <HAL_DMA_IRQHandler+0x6e4>
 8008b6a:	bf00      	nop
 8008b6c:	40020010 	.word	0x40020010
 8008b70:	40020028 	.word	0x40020028
 8008b74:	40020040 	.word	0x40020040
 8008b78:	40020058 	.word	0x40020058
 8008b7c:	40020070 	.word	0x40020070
 8008b80:	40020088 	.word	0x40020088
 8008b84:	400200a0 	.word	0x400200a0
 8008b88:	400200b8 	.word	0x400200b8
 8008b8c:	40020410 	.word	0x40020410
 8008b90:	40020428 	.word	0x40020428
 8008b94:	40020440 	.word	0x40020440
 8008b98:	40020458 	.word	0x40020458
 8008b9c:	40020470 	.word	0x40020470
 8008ba0:	40020488 	.word	0x40020488
 8008ba4:	400204a0 	.word	0x400204a0
 8008ba8:	400204b8 	.word	0x400204b8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	bf14      	ite	ne
 8008bba:	2301      	movne	r3, #1
 8008bbc:	2300      	moveq	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 8087 	beq.w	8008cd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bca:	f003 031f 	and.w	r3, r3, #31
 8008bce:	2220      	movs	r2, #32
 8008bd0:	409a      	lsls	r2, r3
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d139      	bne.n	8008c56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 0216 	bic.w	r2, r2, #22
 8008bf0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	695a      	ldr	r2, [r3, #20]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <HAL_DMA_IRQHandler+0x736>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d007      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0208 	bic.w	r2, r2, #8
 8008c20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c26:	f003 031f 	and.w	r3, r3, #31
 8008c2a:	223f      	movs	r2, #63	@ 0x3f
 8008c2c:	409a      	lsls	r2, r3
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 834a 	beq.w	80092e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	4798      	blx	r3
          }
          return;
 8008c54:	e344      	b.n	80092e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d018      	beq.n	8008c96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d108      	bne.n	8008c84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d02c      	beq.n	8008cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
 8008c82:	e027      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d023      	beq.n	8008cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	4798      	blx	r3
 8008c94:	e01e      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10f      	bne.n	8008cc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0210 	bic.w	r2, r2, #16
 8008cb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 8306 	beq.w	80092ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 8088 	beq.w	8008dfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2204      	movs	r2, #4
 8008cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a7a      	ldr	r2, [pc, #488]	@ (8008ee4 <HAL_DMA_IRQHandler+0xa08>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d04a      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a79      	ldr	r2, [pc, #484]	@ (8008ee8 <HAL_DMA_IRQHandler+0xa0c>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d045      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a77      	ldr	r2, [pc, #476]	@ (8008eec <HAL_DMA_IRQHandler+0xa10>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d040      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a76      	ldr	r2, [pc, #472]	@ (8008ef0 <HAL_DMA_IRQHandler+0xa14>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d03b      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a74      	ldr	r2, [pc, #464]	@ (8008ef4 <HAL_DMA_IRQHandler+0xa18>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d036      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a73      	ldr	r2, [pc, #460]	@ (8008ef8 <HAL_DMA_IRQHandler+0xa1c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d031      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a71      	ldr	r2, [pc, #452]	@ (8008efc <HAL_DMA_IRQHandler+0xa20>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d02c      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a70      	ldr	r2, [pc, #448]	@ (8008f00 <HAL_DMA_IRQHandler+0xa24>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d027      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a6e      	ldr	r2, [pc, #440]	@ (8008f04 <HAL_DMA_IRQHandler+0xa28>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d022      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a6d      	ldr	r2, [pc, #436]	@ (8008f08 <HAL_DMA_IRQHandler+0xa2c>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d01d      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8008f0c <HAL_DMA_IRQHandler+0xa30>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d018      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a6a      	ldr	r2, [pc, #424]	@ (8008f10 <HAL_DMA_IRQHandler+0xa34>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d013      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a68      	ldr	r2, [pc, #416]	@ (8008f14 <HAL_DMA_IRQHandler+0xa38>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00e      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a67      	ldr	r2, [pc, #412]	@ (8008f18 <HAL_DMA_IRQHandler+0xa3c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d009      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a65      	ldr	r2, [pc, #404]	@ (8008f1c <HAL_DMA_IRQHandler+0xa40>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d004      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x8b8>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a64      	ldr	r2, [pc, #400]	@ (8008f20 <HAL_DMA_IRQHandler+0xa44>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d108      	bne.n	8008da6 <HAL_DMA_IRQHandler+0x8ca>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0201 	bic.w	r2, r2, #1
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e007      	b.n	8008db6 <HAL_DMA_IRQHandler+0x8da>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0201 	bic.w	r2, r2, #1
 8008db4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d307      	bcc.n	8008dd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f2      	bne.n	8008db6 <HAL_DMA_IRQHandler+0x8da>
 8008dd0:	e000      	b.n	8008dd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008dd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d004      	beq.n	8008dec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2203      	movs	r2, #3
 8008de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008dea:	e003      	b.n	8008df4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8272 	beq.w	80092ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
 8008e0e:	e26c      	b.n	80092ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a43      	ldr	r2, [pc, #268]	@ (8008f24 <HAL_DMA_IRQHandler+0xa48>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d022      	beq.n	8008e60 <HAL_DMA_IRQHandler+0x984>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a42      	ldr	r2, [pc, #264]	@ (8008f28 <HAL_DMA_IRQHandler+0xa4c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d01d      	beq.n	8008e60 <HAL_DMA_IRQHandler+0x984>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a40      	ldr	r2, [pc, #256]	@ (8008f2c <HAL_DMA_IRQHandler+0xa50>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d018      	beq.n	8008e60 <HAL_DMA_IRQHandler+0x984>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a3f      	ldr	r2, [pc, #252]	@ (8008f30 <HAL_DMA_IRQHandler+0xa54>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d013      	beq.n	8008e60 <HAL_DMA_IRQHandler+0x984>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a3d      	ldr	r2, [pc, #244]	@ (8008f34 <HAL_DMA_IRQHandler+0xa58>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00e      	beq.n	8008e60 <HAL_DMA_IRQHandler+0x984>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a3c      	ldr	r2, [pc, #240]	@ (8008f38 <HAL_DMA_IRQHandler+0xa5c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d009      	beq.n	8008e60 <HAL_DMA_IRQHandler+0x984>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a3a      	ldr	r2, [pc, #232]	@ (8008f3c <HAL_DMA_IRQHandler+0xa60>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d004      	beq.n	8008e60 <HAL_DMA_IRQHandler+0x984>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a39      	ldr	r2, [pc, #228]	@ (8008f40 <HAL_DMA_IRQHandler+0xa64>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d101      	bne.n	8008e64 <HAL_DMA_IRQHandler+0x988>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e000      	b.n	8008e66 <HAL_DMA_IRQHandler+0x98a>
 8008e64:	2300      	movs	r3, #0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 823f 	beq.w	80092ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e78:	f003 031f 	and.w	r3, r3, #31
 8008e7c:	2204      	movs	r2, #4
 8008e7e:	409a      	lsls	r2, r3
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	4013      	ands	r3, r2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 80cd 	beq.w	8009024 <HAL_DMA_IRQHandler+0xb48>
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 80c7 	beq.w	8009024 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e9a:	f003 031f 	and.w	r3, r3, #31
 8008e9e:	2204      	movs	r2, #4
 8008ea0:	409a      	lsls	r2, r3
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d049      	beq.n	8008f44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 8210 	beq.w	80092e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ecc:	e20a      	b.n	80092e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 8206 	beq.w	80092e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ee0:	e200      	b.n	80092e4 <HAL_DMA_IRQHandler+0xe08>
 8008ee2:	bf00      	nop
 8008ee4:	40020010 	.word	0x40020010
 8008ee8:	40020028 	.word	0x40020028
 8008eec:	40020040 	.word	0x40020040
 8008ef0:	40020058 	.word	0x40020058
 8008ef4:	40020070 	.word	0x40020070
 8008ef8:	40020088 	.word	0x40020088
 8008efc:	400200a0 	.word	0x400200a0
 8008f00:	400200b8 	.word	0x400200b8
 8008f04:	40020410 	.word	0x40020410
 8008f08:	40020428 	.word	0x40020428
 8008f0c:	40020440 	.word	0x40020440
 8008f10:	40020458 	.word	0x40020458
 8008f14:	40020470 	.word	0x40020470
 8008f18:	40020488 	.word	0x40020488
 8008f1c:	400204a0 	.word	0x400204a0
 8008f20:	400204b8 	.word	0x400204b8
 8008f24:	58025408 	.word	0x58025408
 8008f28:	5802541c 	.word	0x5802541c
 8008f2c:	58025430 	.word	0x58025430
 8008f30:	58025444 	.word	0x58025444
 8008f34:	58025458 	.word	0x58025458
 8008f38:	5802546c 	.word	0x5802546c
 8008f3c:	58025480 	.word	0x58025480
 8008f40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d160      	bne.n	8009010 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a7f      	ldr	r2, [pc, #508]	@ (8009150 <HAL_DMA_IRQHandler+0xc74>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d04a      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a7d      	ldr	r2, [pc, #500]	@ (8009154 <HAL_DMA_IRQHandler+0xc78>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d045      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a7c      	ldr	r2, [pc, #496]	@ (8009158 <HAL_DMA_IRQHandler+0xc7c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d040      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a7a      	ldr	r2, [pc, #488]	@ (800915c <HAL_DMA_IRQHandler+0xc80>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d03b      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a79      	ldr	r2, [pc, #484]	@ (8009160 <HAL_DMA_IRQHandler+0xc84>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d036      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a77      	ldr	r2, [pc, #476]	@ (8009164 <HAL_DMA_IRQHandler+0xc88>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d031      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a76      	ldr	r2, [pc, #472]	@ (8009168 <HAL_DMA_IRQHandler+0xc8c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d02c      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a74      	ldr	r2, [pc, #464]	@ (800916c <HAL_DMA_IRQHandler+0xc90>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d027      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a73      	ldr	r2, [pc, #460]	@ (8009170 <HAL_DMA_IRQHandler+0xc94>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d022      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a71      	ldr	r2, [pc, #452]	@ (8009174 <HAL_DMA_IRQHandler+0xc98>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d01d      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a70      	ldr	r2, [pc, #448]	@ (8009178 <HAL_DMA_IRQHandler+0xc9c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d018      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800917c <HAL_DMA_IRQHandler+0xca0>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d013      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a6d      	ldr	r2, [pc, #436]	@ (8009180 <HAL_DMA_IRQHandler+0xca4>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00e      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a6b      	ldr	r2, [pc, #428]	@ (8009184 <HAL_DMA_IRQHandler+0xca8>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d009      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a6a      	ldr	r2, [pc, #424]	@ (8009188 <HAL_DMA_IRQHandler+0xcac>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d004      	beq.n	8008fee <HAL_DMA_IRQHandler+0xb12>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a68      	ldr	r2, [pc, #416]	@ (800918c <HAL_DMA_IRQHandler+0xcb0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d108      	bne.n	8009000 <HAL_DMA_IRQHandler+0xb24>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f022 0208 	bic.w	r2, r2, #8
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	e007      	b.n	8009010 <HAL_DMA_IRQHandler+0xb34>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f022 0204 	bic.w	r2, r2, #4
 800900e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 8165 	beq.w	80092e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009022:	e15f      	b.n	80092e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009028:	f003 031f 	and.w	r3, r3, #31
 800902c:	2202      	movs	r2, #2
 800902e:	409a      	lsls	r2, r3
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	4013      	ands	r3, r2
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80c5 	beq.w	80091c4 <HAL_DMA_IRQHandler+0xce8>
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 80bf 	beq.w	80091c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800904a:	f003 031f 	and.w	r3, r3, #31
 800904e:	2202      	movs	r2, #2
 8009050:	409a      	lsls	r2, r3
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d018      	beq.n	8009092 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d109      	bne.n	800907e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 813a 	beq.w	80092e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800907c:	e134      	b.n	80092e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 8130 	beq.w	80092e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009090:	e12a      	b.n	80092e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f003 0320 	and.w	r3, r3, #32
 8009098:	2b00      	cmp	r3, #0
 800909a:	f040 8089 	bne.w	80091b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a2b      	ldr	r2, [pc, #172]	@ (8009150 <HAL_DMA_IRQHandler+0xc74>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d04a      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a29      	ldr	r2, [pc, #164]	@ (8009154 <HAL_DMA_IRQHandler+0xc78>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d045      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a28      	ldr	r2, [pc, #160]	@ (8009158 <HAL_DMA_IRQHandler+0xc7c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d040      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a26      	ldr	r2, [pc, #152]	@ (800915c <HAL_DMA_IRQHandler+0xc80>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d03b      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a25      	ldr	r2, [pc, #148]	@ (8009160 <HAL_DMA_IRQHandler+0xc84>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d036      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a23      	ldr	r2, [pc, #140]	@ (8009164 <HAL_DMA_IRQHandler+0xc88>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d031      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a22      	ldr	r2, [pc, #136]	@ (8009168 <HAL_DMA_IRQHandler+0xc8c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d02c      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a20      	ldr	r2, [pc, #128]	@ (800916c <HAL_DMA_IRQHandler+0xc90>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d027      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009170 <HAL_DMA_IRQHandler+0xc94>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d022      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009174 <HAL_DMA_IRQHandler+0xc98>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d01d      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a1c      	ldr	r2, [pc, #112]	@ (8009178 <HAL_DMA_IRQHandler+0xc9c>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d018      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a1a      	ldr	r2, [pc, #104]	@ (800917c <HAL_DMA_IRQHandler+0xca0>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d013      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a19      	ldr	r2, [pc, #100]	@ (8009180 <HAL_DMA_IRQHandler+0xca4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00e      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a17      	ldr	r2, [pc, #92]	@ (8009184 <HAL_DMA_IRQHandler+0xca8>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d009      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a16      	ldr	r2, [pc, #88]	@ (8009188 <HAL_DMA_IRQHandler+0xcac>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d004      	beq.n	800913e <HAL_DMA_IRQHandler+0xc62>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a14      	ldr	r2, [pc, #80]	@ (800918c <HAL_DMA_IRQHandler+0xcb0>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d128      	bne.n	8009190 <HAL_DMA_IRQHandler+0xcb4>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0214 	bic.w	r2, r2, #20
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e027      	b.n	80091a0 <HAL_DMA_IRQHandler+0xcc4>
 8009150:	40020010 	.word	0x40020010
 8009154:	40020028 	.word	0x40020028
 8009158:	40020040 	.word	0x40020040
 800915c:	40020058 	.word	0x40020058
 8009160:	40020070 	.word	0x40020070
 8009164:	40020088 	.word	0x40020088
 8009168:	400200a0 	.word	0x400200a0
 800916c:	400200b8 	.word	0x400200b8
 8009170:	40020410 	.word	0x40020410
 8009174:	40020428 	.word	0x40020428
 8009178:	40020440 	.word	0x40020440
 800917c:	40020458 	.word	0x40020458
 8009180:	40020470 	.word	0x40020470
 8009184:	40020488 	.word	0x40020488
 8009188:	400204a0 	.word	0x400204a0
 800918c:	400204b8 	.word	0x400204b8
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 020a 	bic.w	r2, r2, #10
 800919e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8097 	beq.w	80092e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091c2:	e091      	b.n	80092e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091c8:	f003 031f 	and.w	r3, r3, #31
 80091cc:	2208      	movs	r2, #8
 80091ce:	409a      	lsls	r2, r3
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8088 	beq.w	80092ea <HAL_DMA_IRQHandler+0xe0e>
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 8082 	beq.w	80092ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a41      	ldr	r2, [pc, #260]	@ (80092f0 <HAL_DMA_IRQHandler+0xe14>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d04a      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a3f      	ldr	r2, [pc, #252]	@ (80092f4 <HAL_DMA_IRQHandler+0xe18>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d045      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a3e      	ldr	r2, [pc, #248]	@ (80092f8 <HAL_DMA_IRQHandler+0xe1c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d040      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a3c      	ldr	r2, [pc, #240]	@ (80092fc <HAL_DMA_IRQHandler+0xe20>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d03b      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a3b      	ldr	r2, [pc, #236]	@ (8009300 <HAL_DMA_IRQHandler+0xe24>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d036      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a39      	ldr	r2, [pc, #228]	@ (8009304 <HAL_DMA_IRQHandler+0xe28>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d031      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a38      	ldr	r2, [pc, #224]	@ (8009308 <HAL_DMA_IRQHandler+0xe2c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d02c      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a36      	ldr	r2, [pc, #216]	@ (800930c <HAL_DMA_IRQHandler+0xe30>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d027      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a35      	ldr	r2, [pc, #212]	@ (8009310 <HAL_DMA_IRQHandler+0xe34>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d022      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a33      	ldr	r2, [pc, #204]	@ (8009314 <HAL_DMA_IRQHandler+0xe38>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d01d      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a32      	ldr	r2, [pc, #200]	@ (8009318 <HAL_DMA_IRQHandler+0xe3c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d018      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a30      	ldr	r2, [pc, #192]	@ (800931c <HAL_DMA_IRQHandler+0xe40>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d013      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a2f      	ldr	r2, [pc, #188]	@ (8009320 <HAL_DMA_IRQHandler+0xe44>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00e      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a2d      	ldr	r2, [pc, #180]	@ (8009324 <HAL_DMA_IRQHandler+0xe48>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d009      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a2c      	ldr	r2, [pc, #176]	@ (8009328 <HAL_DMA_IRQHandler+0xe4c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d004      	beq.n	8009286 <HAL_DMA_IRQHandler+0xdaa>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a2a      	ldr	r2, [pc, #168]	@ (800932c <HAL_DMA_IRQHandler+0xe50>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d108      	bne.n	8009298 <HAL_DMA_IRQHandler+0xdbc>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 021c 	bic.w	r2, r2, #28
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	e007      	b.n	80092a8 <HAL_DMA_IRQHandler+0xdcc>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 020e 	bic.w	r2, r2, #14
 80092a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ac:	f003 031f 	and.w	r3, r3, #31
 80092b0:	2201      	movs	r2, #1
 80092b2:	409a      	lsls	r2, r3
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
 80092de:	e004      	b.n	80092ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80092e0:	bf00      	nop
 80092e2:	e002      	b.n	80092ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092e4:	bf00      	nop
 80092e6:	e000      	b.n	80092ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80092ea:	3728      	adds	r7, #40	@ 0x28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	40020010 	.word	0x40020010
 80092f4:	40020028 	.word	0x40020028
 80092f8:	40020040 	.word	0x40020040
 80092fc:	40020058 	.word	0x40020058
 8009300:	40020070 	.word	0x40020070
 8009304:	40020088 	.word	0x40020088
 8009308:	400200a0 	.word	0x400200a0
 800930c:	400200b8 	.word	0x400200b8
 8009310:	40020410 	.word	0x40020410
 8009314:	40020428 	.word	0x40020428
 8009318:	40020440 	.word	0x40020440
 800931c:	40020458 	.word	0x40020458
 8009320:	40020470 	.word	0x40020470
 8009324:	40020488 	.word	0x40020488
 8009328:	400204a0 	.word	0x400204a0
 800932c:	400204b8 	.word	0x400204b8

08009330 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009342:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009348:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a7f      	ldr	r2, [pc, #508]	@ (800954c <DMA_SetConfig+0x21c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d072      	beq.n	800943a <DMA_SetConfig+0x10a>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a7d      	ldr	r2, [pc, #500]	@ (8009550 <DMA_SetConfig+0x220>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d06d      	beq.n	800943a <DMA_SetConfig+0x10a>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a7c      	ldr	r2, [pc, #496]	@ (8009554 <DMA_SetConfig+0x224>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d068      	beq.n	800943a <DMA_SetConfig+0x10a>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a7a      	ldr	r2, [pc, #488]	@ (8009558 <DMA_SetConfig+0x228>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d063      	beq.n	800943a <DMA_SetConfig+0x10a>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a79      	ldr	r2, [pc, #484]	@ (800955c <DMA_SetConfig+0x22c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d05e      	beq.n	800943a <DMA_SetConfig+0x10a>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a77      	ldr	r2, [pc, #476]	@ (8009560 <DMA_SetConfig+0x230>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d059      	beq.n	800943a <DMA_SetConfig+0x10a>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a76      	ldr	r2, [pc, #472]	@ (8009564 <DMA_SetConfig+0x234>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d054      	beq.n	800943a <DMA_SetConfig+0x10a>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a74      	ldr	r2, [pc, #464]	@ (8009568 <DMA_SetConfig+0x238>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d04f      	beq.n	800943a <DMA_SetConfig+0x10a>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a73      	ldr	r2, [pc, #460]	@ (800956c <DMA_SetConfig+0x23c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d04a      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a71      	ldr	r2, [pc, #452]	@ (8009570 <DMA_SetConfig+0x240>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d045      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a70      	ldr	r2, [pc, #448]	@ (8009574 <DMA_SetConfig+0x244>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d040      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a6e      	ldr	r2, [pc, #440]	@ (8009578 <DMA_SetConfig+0x248>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d03b      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a6d      	ldr	r2, [pc, #436]	@ (800957c <DMA_SetConfig+0x24c>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d036      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a6b      	ldr	r2, [pc, #428]	@ (8009580 <DMA_SetConfig+0x250>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d031      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a6a      	ldr	r2, [pc, #424]	@ (8009584 <DMA_SetConfig+0x254>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d02c      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a68      	ldr	r2, [pc, #416]	@ (8009588 <DMA_SetConfig+0x258>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d027      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a67      	ldr	r2, [pc, #412]	@ (800958c <DMA_SetConfig+0x25c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d022      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a65      	ldr	r2, [pc, #404]	@ (8009590 <DMA_SetConfig+0x260>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d01d      	beq.n	800943a <DMA_SetConfig+0x10a>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a64      	ldr	r2, [pc, #400]	@ (8009594 <DMA_SetConfig+0x264>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d018      	beq.n	800943a <DMA_SetConfig+0x10a>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a62      	ldr	r2, [pc, #392]	@ (8009598 <DMA_SetConfig+0x268>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d013      	beq.n	800943a <DMA_SetConfig+0x10a>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a61      	ldr	r2, [pc, #388]	@ (800959c <DMA_SetConfig+0x26c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00e      	beq.n	800943a <DMA_SetConfig+0x10a>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a5f      	ldr	r2, [pc, #380]	@ (80095a0 <DMA_SetConfig+0x270>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d009      	beq.n	800943a <DMA_SetConfig+0x10a>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a5e      	ldr	r2, [pc, #376]	@ (80095a4 <DMA_SetConfig+0x274>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d004      	beq.n	800943a <DMA_SetConfig+0x10a>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a5c      	ldr	r2, [pc, #368]	@ (80095a8 <DMA_SetConfig+0x278>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d101      	bne.n	800943e <DMA_SetConfig+0x10e>
 800943a:	2301      	movs	r3, #1
 800943c:	e000      	b.n	8009440 <DMA_SetConfig+0x110>
 800943e:	2300      	movs	r3, #0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00d      	beq.n	8009460 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800944c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009452:	2b00      	cmp	r3, #0
 8009454:	d004      	beq.n	8009460 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800945e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a39      	ldr	r2, [pc, #228]	@ (800954c <DMA_SetConfig+0x21c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d04a      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a38      	ldr	r2, [pc, #224]	@ (8009550 <DMA_SetConfig+0x220>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d045      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a36      	ldr	r2, [pc, #216]	@ (8009554 <DMA_SetConfig+0x224>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d040      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a35      	ldr	r2, [pc, #212]	@ (8009558 <DMA_SetConfig+0x228>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d03b      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a33      	ldr	r2, [pc, #204]	@ (800955c <DMA_SetConfig+0x22c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d036      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a32      	ldr	r2, [pc, #200]	@ (8009560 <DMA_SetConfig+0x230>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d031      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a30      	ldr	r2, [pc, #192]	@ (8009564 <DMA_SetConfig+0x234>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d02c      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009568 <DMA_SetConfig+0x238>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d027      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a2d      	ldr	r2, [pc, #180]	@ (800956c <DMA_SetConfig+0x23c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d022      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a2c      	ldr	r2, [pc, #176]	@ (8009570 <DMA_SetConfig+0x240>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d01d      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a2a      	ldr	r2, [pc, #168]	@ (8009574 <DMA_SetConfig+0x244>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d018      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a29      	ldr	r2, [pc, #164]	@ (8009578 <DMA_SetConfig+0x248>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d013      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a27      	ldr	r2, [pc, #156]	@ (800957c <DMA_SetConfig+0x24c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00e      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a26      	ldr	r2, [pc, #152]	@ (8009580 <DMA_SetConfig+0x250>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d009      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a24      	ldr	r2, [pc, #144]	@ (8009584 <DMA_SetConfig+0x254>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d004      	beq.n	8009500 <DMA_SetConfig+0x1d0>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a23      	ldr	r2, [pc, #140]	@ (8009588 <DMA_SetConfig+0x258>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d101      	bne.n	8009504 <DMA_SetConfig+0x1d4>
 8009500:	2301      	movs	r3, #1
 8009502:	e000      	b.n	8009506 <DMA_SetConfig+0x1d6>
 8009504:	2300      	movs	r3, #0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d059      	beq.n	80095be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800950e:	f003 031f 	and.w	r3, r3, #31
 8009512:	223f      	movs	r2, #63	@ 0x3f
 8009514:	409a      	lsls	r2, r3
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009528:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	2b40      	cmp	r3, #64	@ 0x40
 8009538:	d138      	bne.n	80095ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800954a:	e086      	b.n	800965a <DMA_SetConfig+0x32a>
 800954c:	40020010 	.word	0x40020010
 8009550:	40020028 	.word	0x40020028
 8009554:	40020040 	.word	0x40020040
 8009558:	40020058 	.word	0x40020058
 800955c:	40020070 	.word	0x40020070
 8009560:	40020088 	.word	0x40020088
 8009564:	400200a0 	.word	0x400200a0
 8009568:	400200b8 	.word	0x400200b8
 800956c:	40020410 	.word	0x40020410
 8009570:	40020428 	.word	0x40020428
 8009574:	40020440 	.word	0x40020440
 8009578:	40020458 	.word	0x40020458
 800957c:	40020470 	.word	0x40020470
 8009580:	40020488 	.word	0x40020488
 8009584:	400204a0 	.word	0x400204a0
 8009588:	400204b8 	.word	0x400204b8
 800958c:	58025408 	.word	0x58025408
 8009590:	5802541c 	.word	0x5802541c
 8009594:	58025430 	.word	0x58025430
 8009598:	58025444 	.word	0x58025444
 800959c:	58025458 	.word	0x58025458
 80095a0:	5802546c 	.word	0x5802546c
 80095a4:	58025480 	.word	0x58025480
 80095a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	60da      	str	r2, [r3, #12]
}
 80095bc:	e04d      	b.n	800965a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a29      	ldr	r2, [pc, #164]	@ (8009668 <DMA_SetConfig+0x338>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d022      	beq.n	800960e <DMA_SetConfig+0x2de>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a27      	ldr	r2, [pc, #156]	@ (800966c <DMA_SetConfig+0x33c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d01d      	beq.n	800960e <DMA_SetConfig+0x2de>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a26      	ldr	r2, [pc, #152]	@ (8009670 <DMA_SetConfig+0x340>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d018      	beq.n	800960e <DMA_SetConfig+0x2de>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a24      	ldr	r2, [pc, #144]	@ (8009674 <DMA_SetConfig+0x344>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d013      	beq.n	800960e <DMA_SetConfig+0x2de>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a23      	ldr	r2, [pc, #140]	@ (8009678 <DMA_SetConfig+0x348>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d00e      	beq.n	800960e <DMA_SetConfig+0x2de>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a21      	ldr	r2, [pc, #132]	@ (800967c <DMA_SetConfig+0x34c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d009      	beq.n	800960e <DMA_SetConfig+0x2de>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a20      	ldr	r2, [pc, #128]	@ (8009680 <DMA_SetConfig+0x350>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d004      	beq.n	800960e <DMA_SetConfig+0x2de>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a1e      	ldr	r2, [pc, #120]	@ (8009684 <DMA_SetConfig+0x354>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d101      	bne.n	8009612 <DMA_SetConfig+0x2e2>
 800960e:	2301      	movs	r3, #1
 8009610:	e000      	b.n	8009614 <DMA_SetConfig+0x2e4>
 8009612:	2300      	movs	r3, #0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d020      	beq.n	800965a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800961c:	f003 031f 	and.w	r3, r3, #31
 8009620:	2201      	movs	r2, #1
 8009622:	409a      	lsls	r2, r3
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	2b40      	cmp	r3, #64	@ 0x40
 8009636:	d108      	bne.n	800964a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	60da      	str	r2, [r3, #12]
}
 8009648:	e007      	b.n	800965a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	60da      	str	r2, [r3, #12]
}
 800965a:	bf00      	nop
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	58025408 	.word	0x58025408
 800966c:	5802541c 	.word	0x5802541c
 8009670:	58025430 	.word	0x58025430
 8009674:	58025444 	.word	0x58025444
 8009678:	58025458 	.word	0x58025458
 800967c:	5802546c 	.word	0x5802546c
 8009680:	58025480 	.word	0x58025480
 8009684:	58025494 	.word	0x58025494

08009688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a42      	ldr	r2, [pc, #264]	@ (80097a0 <DMA_CalcBaseAndBitshift+0x118>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d04a      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a41      	ldr	r2, [pc, #260]	@ (80097a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d045      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a3f      	ldr	r2, [pc, #252]	@ (80097a8 <DMA_CalcBaseAndBitshift+0x120>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d040      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a3e      	ldr	r2, [pc, #248]	@ (80097ac <DMA_CalcBaseAndBitshift+0x124>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d03b      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a3c      	ldr	r2, [pc, #240]	@ (80097b0 <DMA_CalcBaseAndBitshift+0x128>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d036      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a3b      	ldr	r2, [pc, #236]	@ (80097b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d031      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a39      	ldr	r2, [pc, #228]	@ (80097b8 <DMA_CalcBaseAndBitshift+0x130>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d02c      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a38      	ldr	r2, [pc, #224]	@ (80097bc <DMA_CalcBaseAndBitshift+0x134>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d027      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a36      	ldr	r2, [pc, #216]	@ (80097c0 <DMA_CalcBaseAndBitshift+0x138>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d022      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a35      	ldr	r2, [pc, #212]	@ (80097c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d01d      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a33      	ldr	r2, [pc, #204]	@ (80097c8 <DMA_CalcBaseAndBitshift+0x140>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d018      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a32      	ldr	r2, [pc, #200]	@ (80097cc <DMA_CalcBaseAndBitshift+0x144>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d013      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a30      	ldr	r2, [pc, #192]	@ (80097d0 <DMA_CalcBaseAndBitshift+0x148>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00e      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a2f      	ldr	r2, [pc, #188]	@ (80097d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d009      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a2d      	ldr	r2, [pc, #180]	@ (80097d8 <DMA_CalcBaseAndBitshift+0x150>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d004      	beq.n	8009730 <DMA_CalcBaseAndBitshift+0xa8>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a2c      	ldr	r2, [pc, #176]	@ (80097dc <DMA_CalcBaseAndBitshift+0x154>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d101      	bne.n	8009734 <DMA_CalcBaseAndBitshift+0xac>
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <DMA_CalcBaseAndBitshift+0xae>
 8009734:	2300      	movs	r3, #0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d024      	beq.n	8009784 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	3b10      	subs	r3, #16
 8009742:	4a27      	ldr	r2, [pc, #156]	@ (80097e0 <DMA_CalcBaseAndBitshift+0x158>)
 8009744:	fba2 2303 	umull	r2, r3, r2, r3
 8009748:	091b      	lsrs	r3, r3, #4
 800974a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	4a24      	ldr	r2, [pc, #144]	@ (80097e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8009754:	5cd3      	ldrb	r3, [r2, r3]
 8009756:	461a      	mov	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b03      	cmp	r3, #3
 8009760:	d908      	bls.n	8009774 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	4b1f      	ldr	r3, [pc, #124]	@ (80097e8 <DMA_CalcBaseAndBitshift+0x160>)
 800976a:	4013      	ands	r3, r2
 800976c:	1d1a      	adds	r2, r3, #4
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	659a      	str	r2, [r3, #88]	@ 0x58
 8009772:	e00d      	b.n	8009790 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	4b1b      	ldr	r3, [pc, #108]	@ (80097e8 <DMA_CalcBaseAndBitshift+0x160>)
 800977c:	4013      	ands	r3, r2
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	6593      	str	r3, [r2, #88]	@ 0x58
 8009782:	e005      	b.n	8009790 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	40020010 	.word	0x40020010
 80097a4:	40020028 	.word	0x40020028
 80097a8:	40020040 	.word	0x40020040
 80097ac:	40020058 	.word	0x40020058
 80097b0:	40020070 	.word	0x40020070
 80097b4:	40020088 	.word	0x40020088
 80097b8:	400200a0 	.word	0x400200a0
 80097bc:	400200b8 	.word	0x400200b8
 80097c0:	40020410 	.word	0x40020410
 80097c4:	40020428 	.word	0x40020428
 80097c8:	40020440 	.word	0x40020440
 80097cc:	40020458 	.word	0x40020458
 80097d0:	40020470 	.word	0x40020470
 80097d4:	40020488 	.word	0x40020488
 80097d8:	400204a0 	.word	0x400204a0
 80097dc:	400204b8 	.word	0x400204b8
 80097e0:	aaaaaaab 	.word	0xaaaaaaab
 80097e4:	08015f20 	.word	0x08015f20
 80097e8:	fffffc00 	.word	0xfffffc00

080097ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d120      	bne.n	8009842 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	2b03      	cmp	r3, #3
 8009806:	d858      	bhi.n	80098ba <DMA_CheckFifoParam+0xce>
 8009808:	a201      	add	r2, pc, #4	@ (adr r2, 8009810 <DMA_CheckFifoParam+0x24>)
 800980a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980e:	bf00      	nop
 8009810:	08009821 	.word	0x08009821
 8009814:	08009833 	.word	0x08009833
 8009818:	08009821 	.word	0x08009821
 800981c:	080098bb 	.word	0x080098bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d048      	beq.n	80098be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009830:	e045      	b.n	80098be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009836:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800983a:	d142      	bne.n	80098c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009840:	e03f      	b.n	80098c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800984a:	d123      	bne.n	8009894 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009850:	2b03      	cmp	r3, #3
 8009852:	d838      	bhi.n	80098c6 <DMA_CheckFifoParam+0xda>
 8009854:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <DMA_CheckFifoParam+0x70>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	0800986d 	.word	0x0800986d
 8009860:	08009873 	.word	0x08009873
 8009864:	0800986d 	.word	0x0800986d
 8009868:	08009885 	.word	0x08009885
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	73fb      	strb	r3, [r7, #15]
        break;
 8009870:	e030      	b.n	80098d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009876:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d025      	beq.n	80098ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009882:	e022      	b.n	80098ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800988c:	d11f      	bne.n	80098ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009892:	e01c      	b.n	80098ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009898:	2b02      	cmp	r3, #2
 800989a:	d902      	bls.n	80098a2 <DMA_CheckFifoParam+0xb6>
 800989c:	2b03      	cmp	r3, #3
 800989e:	d003      	beq.n	80098a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80098a0:	e018      	b.n	80098d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	73fb      	strb	r3, [r7, #15]
        break;
 80098a6:	e015      	b.n	80098d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00e      	beq.n	80098d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	73fb      	strb	r3, [r7, #15]
    break;
 80098b8:	e00b      	b.n	80098d2 <DMA_CheckFifoParam+0xe6>
        break;
 80098ba:	bf00      	nop
 80098bc:	e00a      	b.n	80098d4 <DMA_CheckFifoParam+0xe8>
        break;
 80098be:	bf00      	nop
 80098c0:	e008      	b.n	80098d4 <DMA_CheckFifoParam+0xe8>
        break;
 80098c2:	bf00      	nop
 80098c4:	e006      	b.n	80098d4 <DMA_CheckFifoParam+0xe8>
        break;
 80098c6:	bf00      	nop
 80098c8:	e004      	b.n	80098d4 <DMA_CheckFifoParam+0xe8>
        break;
 80098ca:	bf00      	nop
 80098cc:	e002      	b.n	80098d4 <DMA_CheckFifoParam+0xe8>
        break;
 80098ce:	bf00      	nop
 80098d0:	e000      	b.n	80098d4 <DMA_CheckFifoParam+0xe8>
    break;
 80098d2:	bf00      	nop
    }
  }

  return status;
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop

080098e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a38      	ldr	r2, [pc, #224]	@ (80099d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d022      	beq.n	8009942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a36      	ldr	r2, [pc, #216]	@ (80099dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d01d      	beq.n	8009942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a35      	ldr	r2, [pc, #212]	@ (80099e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d018      	beq.n	8009942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a33      	ldr	r2, [pc, #204]	@ (80099e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d013      	beq.n	8009942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a32      	ldr	r2, [pc, #200]	@ (80099e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00e      	beq.n	8009942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a30      	ldr	r2, [pc, #192]	@ (80099ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d009      	beq.n	8009942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a2f      	ldr	r2, [pc, #188]	@ (80099f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d004      	beq.n	8009942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a2d      	ldr	r2, [pc, #180]	@ (80099f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d101      	bne.n	8009946 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009942:	2301      	movs	r3, #1
 8009944:	e000      	b.n	8009948 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009946:	2300      	movs	r3, #0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d01a      	beq.n	8009982 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	3b08      	subs	r3, #8
 8009954:	4a28      	ldr	r2, [pc, #160]	@ (80099f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009956:	fba2 2303 	umull	r2, r3, r2, r3
 800995a:	091b      	lsrs	r3, r3, #4
 800995c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4b26      	ldr	r3, [pc, #152]	@ (80099fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	461a      	mov	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a24      	ldr	r2, [pc, #144]	@ (8009a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009970:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f003 031f 	and.w	r3, r3, #31
 8009978:	2201      	movs	r2, #1
 800997a:	409a      	lsls	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009980:	e024      	b.n	80099cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	3b10      	subs	r3, #16
 800998a:	4a1e      	ldr	r2, [pc, #120]	@ (8009a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800998c:	fba2 2303 	umull	r2, r3, r2, r3
 8009990:	091b      	lsrs	r3, r3, #4
 8009992:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4a1c      	ldr	r2, [pc, #112]	@ (8009a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d806      	bhi.n	80099aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	4a1b      	ldr	r2, [pc, #108]	@ (8009a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d902      	bls.n	80099aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3308      	adds	r3, #8
 80099a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	4b18      	ldr	r3, [pc, #96]	@ (8009a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	461a      	mov	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a16      	ldr	r2, [pc, #88]	@ (8009a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80099bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f003 031f 	and.w	r3, r3, #31
 80099c4:	2201      	movs	r2, #1
 80099c6:	409a      	lsls	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80099cc:	bf00      	nop
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	58025408 	.word	0x58025408
 80099dc:	5802541c 	.word	0x5802541c
 80099e0:	58025430 	.word	0x58025430
 80099e4:	58025444 	.word	0x58025444
 80099e8:	58025458 	.word	0x58025458
 80099ec:	5802546c 	.word	0x5802546c
 80099f0:	58025480 	.word	0x58025480
 80099f4:	58025494 	.word	0x58025494
 80099f8:	cccccccd 	.word	0xcccccccd
 80099fc:	16009600 	.word	0x16009600
 8009a00:	58025880 	.word	0x58025880
 8009a04:	aaaaaaab 	.word	0xaaaaaaab
 8009a08:	400204b8 	.word	0x400204b8
 8009a0c:	4002040f 	.word	0x4002040f
 8009a10:	10008200 	.word	0x10008200
 8009a14:	40020880 	.word	0x40020880

08009a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d04a      	beq.n	8009ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d847      	bhi.n	8009ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a25      	ldr	r2, [pc, #148]	@ (8009ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d022      	beq.n	8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a24      	ldr	r2, [pc, #144]	@ (8009ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d01d      	beq.n	8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a22      	ldr	r2, [pc, #136]	@ (8009ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d018      	beq.n	8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a21      	ldr	r2, [pc, #132]	@ (8009adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d013      	beq.n	8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a1f      	ldr	r2, [pc, #124]	@ (8009ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d00e      	beq.n	8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d009      	beq.n	8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a1c      	ldr	r2, [pc, #112]	@ (8009ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d004      	beq.n	8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8009aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d101      	bne.n	8009a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009a84:	2301      	movs	r3, #1
 8009a86:	e000      	b.n	8009a8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	4b17      	ldr	r3, [pc, #92]	@ (8009af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	461a      	mov	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a15      	ldr	r2, [pc, #84]	@ (8009af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009aa0:	671a      	str	r2, [r3, #112]	@ 0x70
 8009aa2:	e009      	b.n	8009ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	4b14      	ldr	r3, [pc, #80]	@ (8009af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	461a      	mov	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a11      	ldr	r2, [pc, #68]	@ (8009afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009ab6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3b01      	subs	r3, #1
 8009abc:	2201      	movs	r2, #1
 8009abe:	409a      	lsls	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009ac4:	bf00      	nop
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	58025408 	.word	0x58025408
 8009ad4:	5802541c 	.word	0x5802541c
 8009ad8:	58025430 	.word	0x58025430
 8009adc:	58025444 	.word	0x58025444
 8009ae0:	58025458 	.word	0x58025458
 8009ae4:	5802546c 	.word	0x5802546c
 8009ae8:	58025480 	.word	0x58025480
 8009aec:	58025494 	.word	0x58025494
 8009af0:	1600963f 	.word	0x1600963f
 8009af4:	58025940 	.word	0x58025940
 8009af8:	1000823f 	.word	0x1000823f
 8009afc:	40020940 	.word	0x40020940

08009b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b089      	sub	sp, #36	@ 0x24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009b0e:	4b89      	ldr	r3, [pc, #548]	@ (8009d34 <HAL_GPIO_Init+0x234>)
 8009b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009b12:	e194      	b.n	8009e3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	2101      	movs	r1, #1
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b20:	4013      	ands	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 8186 	beq.w	8009e38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d005      	beq.n	8009b44 <HAL_GPIO_Init+0x44>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f003 0303 	and.w	r3, r3, #3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d130      	bne.n	8009ba6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	2203      	movs	r2, #3
 8009b50:	fa02 f303 	lsl.w	r3, r2, r3
 8009b54:	43db      	mvns	r3, r3
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	68da      	ldr	r2, [r3, #12]
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	fa02 f303 	lsl.w	r3, r2, r3
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	69ba      	ldr	r2, [r7, #24]
 8009b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b82:	43db      	mvns	r3, r3
 8009b84:	69ba      	ldr	r2, [r7, #24]
 8009b86:	4013      	ands	r3, r2
 8009b88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	091b      	lsrs	r3, r3, #4
 8009b90:	f003 0201 	and.w	r2, r3, #1
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d017      	beq.n	8009be2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	2203      	movs	r2, #3
 8009bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc2:	43db      	mvns	r3, r3
 8009bc4:	69ba      	ldr	r2, [r7, #24]
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d123      	bne.n	8009c36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	08da      	lsrs	r2, r3, #3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3208      	adds	r2, #8
 8009bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	f003 0307 	and.w	r3, r3, #7
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	220f      	movs	r2, #15
 8009c06:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0a:	43db      	mvns	r3, r3
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	691a      	ldr	r2, [r3, #16]
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c22:	69ba      	ldr	r2, [r7, #24]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	08da      	lsrs	r2, r3, #3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3208      	adds	r2, #8
 8009c30:	69b9      	ldr	r1, [r7, #24]
 8009c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	2203      	movs	r2, #3
 8009c42:	fa02 f303 	lsl.w	r3, r2, r3
 8009c46:	43db      	mvns	r3, r3
 8009c48:	69ba      	ldr	r2, [r7, #24]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f003 0203 	and.w	r2, r3, #3
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 80e0 	beq.w	8009e38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c78:	4b2f      	ldr	r3, [pc, #188]	@ (8009d38 <HAL_GPIO_Init+0x238>)
 8009c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8009d38 <HAL_GPIO_Init+0x238>)
 8009c80:	f043 0302 	orr.w	r3, r3, #2
 8009c84:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009c88:	4b2b      	ldr	r3, [pc, #172]	@ (8009d38 <HAL_GPIO_Init+0x238>)
 8009c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c96:	4a29      	ldr	r2, [pc, #164]	@ (8009d3c <HAL_GPIO_Init+0x23c>)
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	089b      	lsrs	r3, r3, #2
 8009c9c:	3302      	adds	r3, #2
 8009c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	220f      	movs	r2, #15
 8009cae:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb2:	43db      	mvns	r3, r3
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a20      	ldr	r2, [pc, #128]	@ (8009d40 <HAL_GPIO_Init+0x240>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d052      	beq.n	8009d68 <HAL_GPIO_Init+0x268>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8009d44 <HAL_GPIO_Init+0x244>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d031      	beq.n	8009d2e <HAL_GPIO_Init+0x22e>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8009d48 <HAL_GPIO_Init+0x248>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d02b      	beq.n	8009d2a <HAL_GPIO_Init+0x22a>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8009d4c <HAL_GPIO_Init+0x24c>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d025      	beq.n	8009d26 <HAL_GPIO_Init+0x226>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8009d50 <HAL_GPIO_Init+0x250>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d01f      	beq.n	8009d22 <HAL_GPIO_Init+0x222>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8009d54 <HAL_GPIO_Init+0x254>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d019      	beq.n	8009d1e <HAL_GPIO_Init+0x21e>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a1a      	ldr	r2, [pc, #104]	@ (8009d58 <HAL_GPIO_Init+0x258>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d013      	beq.n	8009d1a <HAL_GPIO_Init+0x21a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a19      	ldr	r2, [pc, #100]	@ (8009d5c <HAL_GPIO_Init+0x25c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00d      	beq.n	8009d16 <HAL_GPIO_Init+0x216>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a18      	ldr	r2, [pc, #96]	@ (8009d60 <HAL_GPIO_Init+0x260>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d007      	beq.n	8009d12 <HAL_GPIO_Init+0x212>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a17      	ldr	r2, [pc, #92]	@ (8009d64 <HAL_GPIO_Init+0x264>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d101      	bne.n	8009d0e <HAL_GPIO_Init+0x20e>
 8009d0a:	2309      	movs	r3, #9
 8009d0c:	e02d      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d0e:	230a      	movs	r3, #10
 8009d10:	e02b      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d12:	2308      	movs	r3, #8
 8009d14:	e029      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d16:	2307      	movs	r3, #7
 8009d18:	e027      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d1a:	2306      	movs	r3, #6
 8009d1c:	e025      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d1e:	2305      	movs	r3, #5
 8009d20:	e023      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d22:	2304      	movs	r3, #4
 8009d24:	e021      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d26:	2303      	movs	r3, #3
 8009d28:	e01f      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e01d      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e01b      	b.n	8009d6a <HAL_GPIO_Init+0x26a>
 8009d32:	bf00      	nop
 8009d34:	58000080 	.word	0x58000080
 8009d38:	58024400 	.word	0x58024400
 8009d3c:	58000400 	.word	0x58000400
 8009d40:	58020000 	.word	0x58020000
 8009d44:	58020400 	.word	0x58020400
 8009d48:	58020800 	.word	0x58020800
 8009d4c:	58020c00 	.word	0x58020c00
 8009d50:	58021000 	.word	0x58021000
 8009d54:	58021400 	.word	0x58021400
 8009d58:	58021800 	.word	0x58021800
 8009d5c:	58021c00 	.word	0x58021c00
 8009d60:	58022000 	.word	0x58022000
 8009d64:	58022400 	.word	0x58022400
 8009d68:	2300      	movs	r3, #0
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	f002 0203 	and.w	r2, r2, #3
 8009d70:	0092      	lsls	r2, r2, #2
 8009d72:	4093      	lsls	r3, r2
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d7a:	4938      	ldr	r1, [pc, #224]	@ (8009e5c <HAL_GPIO_Init+0x35c>)
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	089b      	lsrs	r3, r3, #2
 8009d80:	3302      	adds	r3, #2
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	43db      	mvns	r3, r3
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	4013      	ands	r3, r2
 8009d98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009dae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009ddc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	43db      	mvns	r3, r3
 8009dee:	69ba      	ldr	r2, [r7, #24]
 8009df0:	4013      	ands	r3, r2
 8009df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009e00:	69ba      	ldr	r2, [r7, #24]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	43db      	mvns	r3, r3
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	fa22 f303 	lsr.w	r3, r2, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f47f ae63 	bne.w	8009b14 <HAL_GPIO_Init+0x14>
  }
}
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	3724      	adds	r7, #36	@ 0x24
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	58000400 	.word	0x58000400

08009e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	807b      	strh	r3, [r7, #2]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e70:	787b      	ldrb	r3, [r7, #1]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e76:	887a      	ldrh	r2, [r7, #2]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009e7c:	e003      	b.n	8009e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e7e:	887b      	ldrh	r3, [r7, #2]
 8009e80:	041a      	lsls	r2, r3, #16
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	619a      	str	r2, [r3, #24]
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
	...

08009e94 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e9c:	4b19      	ldr	r3, [pc, #100]	@ (8009f04 <HAL_PWREx_ConfigSupply+0x70>)
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b04      	cmp	r3, #4
 8009ea6:	d00a      	beq.n	8009ebe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009ea8:	4b16      	ldr	r3, [pc, #88]	@ (8009f04 <HAL_PWREx_ConfigSupply+0x70>)
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f003 0307 	and.w	r3, r3, #7
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d001      	beq.n	8009eba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e01f      	b.n	8009efa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e01d      	b.n	8009efa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009ebe:	4b11      	ldr	r3, [pc, #68]	@ (8009f04 <HAL_PWREx_ConfigSupply+0x70>)
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f023 0207 	bic.w	r2, r3, #7
 8009ec6:	490f      	ldr	r1, [pc, #60]	@ (8009f04 <HAL_PWREx_ConfigSupply+0x70>)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ece:	f7fb f969 	bl	80051a4 <HAL_GetTick>
 8009ed2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ed4:	e009      	b.n	8009eea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ed6:	f7fb f965 	bl	80051a4 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ee4:	d901      	bls.n	8009eea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e007      	b.n	8009efa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009eea:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <HAL_PWREx_ConfigSupply+0x70>)
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ef6:	d1ee      	bne.n	8009ed6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	58024800 	.word	0x58024800

08009f08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08c      	sub	sp, #48	@ 0x30
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d102      	bne.n	8009f1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	f000 bc48 	b.w	800a7ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 8088 	beq.w	800a03a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f2a:	4b99      	ldr	r3, [pc, #612]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f34:	4b96      	ldr	r3, [pc, #600]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3c:	2b10      	cmp	r3, #16
 8009f3e:	d007      	beq.n	8009f50 <HAL_RCC_OscConfig+0x48>
 8009f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f42:	2b18      	cmp	r3, #24
 8009f44:	d111      	bne.n	8009f6a <HAL_RCC_OscConfig+0x62>
 8009f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d10c      	bne.n	8009f6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f50:	4b8f      	ldr	r3, [pc, #572]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d06d      	beq.n	800a038 <HAL_RCC_OscConfig+0x130>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d169      	bne.n	800a038 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	f000 bc21 	b.w	800a7ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f72:	d106      	bne.n	8009f82 <HAL_RCC_OscConfig+0x7a>
 8009f74:	4b86      	ldr	r3, [pc, #536]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a85      	ldr	r2, [pc, #532]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	e02e      	b.n	8009fe0 <HAL_RCC_OscConfig+0xd8>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10c      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x9c>
 8009f8a:	4b81      	ldr	r3, [pc, #516]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a80      	ldr	r2, [pc, #512]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	4b7e      	ldr	r3, [pc, #504]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a7d      	ldr	r2, [pc, #500]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	e01d      	b.n	8009fe0 <HAL_RCC_OscConfig+0xd8>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fac:	d10c      	bne.n	8009fc8 <HAL_RCC_OscConfig+0xc0>
 8009fae:	4b78      	ldr	r3, [pc, #480]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a77      	ldr	r2, [pc, #476]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	4b75      	ldr	r3, [pc, #468]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a74      	ldr	r2, [pc, #464]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	e00b      	b.n	8009fe0 <HAL_RCC_OscConfig+0xd8>
 8009fc8:	4b71      	ldr	r3, [pc, #452]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a70      	ldr	r2, [pc, #448]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	4b6e      	ldr	r3, [pc, #440]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a6d      	ldr	r2, [pc, #436]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 8009fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d013      	beq.n	800a010 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe8:	f7fb f8dc 	bl	80051a4 <HAL_GetTick>
 8009fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ff0:	f7fb f8d8 	bl	80051a4 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b64      	cmp	r3, #100	@ 0x64
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e3d4      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a002:	4b63      	ldr	r3, [pc, #396]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0f0      	beq.n	8009ff0 <HAL_RCC_OscConfig+0xe8>
 800a00e:	e014      	b.n	800a03a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7fb f8c8 	bl	80051a4 <HAL_GetTick>
 800a014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a018:	f7fb f8c4 	bl	80051a4 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b64      	cmp	r3, #100	@ 0x64
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e3c0      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a02a:	4b59      	ldr	r3, [pc, #356]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f0      	bne.n	800a018 <HAL_RCC_OscConfig+0x110>
 800a036:	e000      	b.n	800a03a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 80ca 	beq.w	800a1dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a048:	4b51      	ldr	r3, [pc, #324]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a050:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a052:	4b4f      	ldr	r3, [pc, #316]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a056:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d007      	beq.n	800a06e <HAL_RCC_OscConfig+0x166>
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	2b18      	cmp	r3, #24
 800a062:	d156      	bne.n	800a112 <HAL_RCC_OscConfig+0x20a>
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d151      	bne.n	800a112 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a06e:	4b48      	ldr	r3, [pc, #288]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0304 	and.w	r3, r3, #4
 800a076:	2b00      	cmp	r3, #0
 800a078:	d005      	beq.n	800a086 <HAL_RCC_OscConfig+0x17e>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e392      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a086:	4b42      	ldr	r3, [pc, #264]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f023 0219 	bic.w	r2, r3, #25
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	493f      	ldr	r1, [pc, #252]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a094:	4313      	orrs	r3, r2
 800a096:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a098:	f7fb f884 	bl	80051a4 <HAL_GetTick>
 800a09c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a09e:	e008      	b.n	800a0b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0a0:	f7fb f880 	bl	80051a4 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d901      	bls.n	800a0b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e37c      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0b2:	4b37      	ldr	r3, [pc, #220]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0304 	and.w	r3, r3, #4
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0f0      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0be:	f7fb f8a1 	bl	8005204 <HAL_GetREVID>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d817      	bhi.n	800a0fc <HAL_RCC_OscConfig+0x1f4>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	2b40      	cmp	r3, #64	@ 0x40
 800a0d2:	d108      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x1de>
 800a0d4:	4b2e      	ldr	r3, [pc, #184]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a0dc:	4a2c      	ldr	r2, [pc, #176]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a0de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0e4:	e07a      	b.n	800a1dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	031b      	lsls	r3, r3, #12
 800a0f4:	4926      	ldr	r1, [pc, #152]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0fa:	e06f      	b.n	800a1dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0fc:	4b24      	ldr	r3, [pc, #144]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	061b      	lsls	r3, r3, #24
 800a10a:	4921      	ldr	r1, [pc, #132]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a110:	e064      	b.n	800a1dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d047      	beq.n	800a1aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a11a:	4b1d      	ldr	r3, [pc, #116]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f023 0219 	bic.w	r2, r3, #25
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	491a      	ldr	r1, [pc, #104]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a12c:	f7fb f83a 	bl	80051a4 <HAL_GetTick>
 800a130:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a132:	e008      	b.n	800a146 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a134:	f7fb f836 	bl	80051a4 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d901      	bls.n	800a146 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e332      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a146:	4b12      	ldr	r3, [pc, #72]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0f0      	beq.n	800a134 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a152:	f7fb f857 	bl	8005204 <HAL_GetREVID>
 800a156:	4603      	mov	r3, r0
 800a158:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d819      	bhi.n	800a194 <HAL_RCC_OscConfig+0x28c>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	2b40      	cmp	r3, #64	@ 0x40
 800a166:	d108      	bne.n	800a17a <HAL_RCC_OscConfig+0x272>
 800a168:	4b09      	ldr	r3, [pc, #36]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a170:	4a07      	ldr	r2, [pc, #28]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a176:	6053      	str	r3, [r2, #4]
 800a178:	e030      	b.n	800a1dc <HAL_RCC_OscConfig+0x2d4>
 800a17a:	4b05      	ldr	r3, [pc, #20]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	031b      	lsls	r3, r3, #12
 800a188:	4901      	ldr	r1, [pc, #4]	@ (800a190 <HAL_RCC_OscConfig+0x288>)
 800a18a:	4313      	orrs	r3, r2
 800a18c:	604b      	str	r3, [r1, #4]
 800a18e:	e025      	b.n	800a1dc <HAL_RCC_OscConfig+0x2d4>
 800a190:	58024400 	.word	0x58024400
 800a194:	4b9a      	ldr	r3, [pc, #616]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	061b      	lsls	r3, r3, #24
 800a1a2:	4997      	ldr	r1, [pc, #604]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	604b      	str	r3, [r1, #4]
 800a1a8:	e018      	b.n	800a1dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1aa:	4b95      	ldr	r3, [pc, #596]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a94      	ldr	r2, [pc, #592]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b6:	f7fa fff5 	bl	80051a4 <HAL_GetTick>
 800a1ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1bc:	e008      	b.n	800a1d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1be:	f7fa fff1 	bl	80051a4 <HAL_GetTick>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d901      	bls.n	800a1d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	e2ed      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1d0:	4b8b      	ldr	r3, [pc, #556]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1f0      	bne.n	800a1be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0310 	and.w	r3, r3, #16
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 80a9 	beq.w	800a33c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1ea:	4b85      	ldr	r3, [pc, #532]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1f4:	4b82      	ldr	r3, [pc, #520]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d007      	beq.n	800a210 <HAL_RCC_OscConfig+0x308>
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b18      	cmp	r3, #24
 800a204:	d13a      	bne.n	800a27c <HAL_RCC_OscConfig+0x374>
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d135      	bne.n	800a27c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a210:	4b7b      	ldr	r3, [pc, #492]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <HAL_RCC_OscConfig+0x320>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	2b80      	cmp	r3, #128	@ 0x80
 800a222:	d001      	beq.n	800a228 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e2c1      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a228:	f7fa ffec 	bl	8005204 <HAL_GetREVID>
 800a22c:	4603      	mov	r3, r0
 800a22e:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a232:	4293      	cmp	r3, r2
 800a234:	d817      	bhi.n	800a266 <HAL_RCC_OscConfig+0x35e>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	d108      	bne.n	800a250 <HAL_RCC_OscConfig+0x348>
 800a23e:	4b70      	ldr	r3, [pc, #448]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a246:	4a6e      	ldr	r2, [pc, #440]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a248:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a24c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a24e:	e075      	b.n	800a33c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a250:	4b6b      	ldr	r3, [pc, #428]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
 800a25c:	069b      	lsls	r3, r3, #26
 800a25e:	4968      	ldr	r1, [pc, #416]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a260:	4313      	orrs	r3, r2
 800a262:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a264:	e06a      	b.n	800a33c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a266:	4b66      	ldr	r3, [pc, #408]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	061b      	lsls	r3, r3, #24
 800a274:	4962      	ldr	r1, [pc, #392]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a276:	4313      	orrs	r3, r2
 800a278:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a27a:	e05f      	b.n	800a33c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	69db      	ldr	r3, [r3, #28]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d042      	beq.n	800a30a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a284:	4b5e      	ldr	r3, [pc, #376]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a5d      	ldr	r2, [pc, #372]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a28a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a28e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a290:	f7fa ff88 	bl	80051a4 <HAL_GetTick>
 800a294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a296:	e008      	b.n	800a2aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a298:	f7fa ff84 	bl	80051a4 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e280      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2aa:	4b55      	ldr	r3, [pc, #340]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0f0      	beq.n	800a298 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2b6:	f7fa ffa5 	bl	8005204 <HAL_GetREVID>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d817      	bhi.n	800a2f4 <HAL_RCC_OscConfig+0x3ec>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a1b      	ldr	r3, [r3, #32]
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	d108      	bne.n	800a2de <HAL_RCC_OscConfig+0x3d6>
 800a2cc:	4b4c      	ldr	r3, [pc, #304]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a2d4:	4a4a      	ldr	r2, [pc, #296]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a2d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2da:	6053      	str	r3, [r2, #4]
 800a2dc:	e02e      	b.n	800a33c <HAL_RCC_OscConfig+0x434>
 800a2de:	4b48      	ldr	r3, [pc, #288]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	069b      	lsls	r3, r3, #26
 800a2ec:	4944      	ldr	r1, [pc, #272]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	604b      	str	r3, [r1, #4]
 800a2f2:	e023      	b.n	800a33c <HAL_RCC_OscConfig+0x434>
 800a2f4:	4b42      	ldr	r3, [pc, #264]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	061b      	lsls	r3, r3, #24
 800a302:	493f      	ldr	r1, [pc, #252]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a304:	4313      	orrs	r3, r2
 800a306:	60cb      	str	r3, [r1, #12]
 800a308:	e018      	b.n	800a33c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a30a:	4b3d      	ldr	r3, [pc, #244]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a3c      	ldr	r2, [pc, #240]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a316:	f7fa ff45 	bl	80051a4 <HAL_GetTick>
 800a31a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a31c:	e008      	b.n	800a330 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a31e:	f7fa ff41 	bl	80051a4 <HAL_GetTick>
 800a322:	4602      	mov	r2, r0
 800a324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d901      	bls.n	800a330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e23d      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a330:	4b33      	ldr	r3, [pc, #204]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1f0      	bne.n	800a31e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0308 	and.w	r3, r3, #8
 800a344:	2b00      	cmp	r3, #0
 800a346:	d036      	beq.n	800a3b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d019      	beq.n	800a384 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a350:	4b2b      	ldr	r3, [pc, #172]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a354:	4a2a      	ldr	r2, [pc, #168]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a356:	f043 0301 	orr.w	r3, r3, #1
 800a35a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a35c:	f7fa ff22 	bl	80051a4 <HAL_GetTick>
 800a360:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a362:	e008      	b.n	800a376 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a364:	f7fa ff1e 	bl	80051a4 <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d901      	bls.n	800a376 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e21a      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a376:	4b22      	ldr	r3, [pc, #136]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0f0      	beq.n	800a364 <HAL_RCC_OscConfig+0x45c>
 800a382:	e018      	b.n	800a3b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a384:	4b1e      	ldr	r3, [pc, #120]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a388:	4a1d      	ldr	r2, [pc, #116]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a38a:	f023 0301 	bic.w	r3, r3, #1
 800a38e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a390:	f7fa ff08 	bl	80051a4 <HAL_GetTick>
 800a394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a396:	e008      	b.n	800a3aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a398:	f7fa ff04 	bl	80051a4 <HAL_GetTick>
 800a39c:	4602      	mov	r2, r0
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d901      	bls.n	800a3aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e200      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3aa:	4b15      	ldr	r3, [pc, #84]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a3ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1f0      	bne.n	800a398 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0320 	and.w	r3, r3, #32
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d039      	beq.n	800a436 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d01c      	beq.n	800a404 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a3d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a3d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3d6:	f7fa fee5 	bl	80051a4 <HAL_GetTick>
 800a3da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3dc:	e008      	b.n	800a3f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3de:	f7fa fee1 	bl	80051a4 <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d901      	bls.n	800a3f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e1dd      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3f0:	4b03      	ldr	r3, [pc, #12]	@ (800a400 <HAL_RCC_OscConfig+0x4f8>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d0f0      	beq.n	800a3de <HAL_RCC_OscConfig+0x4d6>
 800a3fc:	e01b      	b.n	800a436 <HAL_RCC_OscConfig+0x52e>
 800a3fe:	bf00      	nop
 800a400:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a404:	4b9b      	ldr	r3, [pc, #620]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a9a      	ldr	r2, [pc, #616]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a40a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a40e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a410:	f7fa fec8 	bl	80051a4 <HAL_GetTick>
 800a414:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a416:	e008      	b.n	800a42a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a418:	f7fa fec4 	bl	80051a4 <HAL_GetTick>
 800a41c:	4602      	mov	r2, r0
 800a41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	2b02      	cmp	r3, #2
 800a424:	d901      	bls.n	800a42a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e1c0      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a42a:	4b92      	ldr	r3, [pc, #584]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1f0      	bne.n	800a418 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0304 	and.w	r3, r3, #4
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 8081 	beq.w	800a546 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a444:	4b8c      	ldr	r3, [pc, #560]	@ (800a678 <HAL_RCC_OscConfig+0x770>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a8b      	ldr	r2, [pc, #556]	@ (800a678 <HAL_RCC_OscConfig+0x770>)
 800a44a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a44e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a450:	f7fa fea8 	bl	80051a4 <HAL_GetTick>
 800a454:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a456:	e008      	b.n	800a46a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a458:	f7fa fea4 	bl	80051a4 <HAL_GetTick>
 800a45c:	4602      	mov	r2, r0
 800a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2b64      	cmp	r3, #100	@ 0x64
 800a464:	d901      	bls.n	800a46a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e1a0      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a46a:	4b83      	ldr	r3, [pc, #524]	@ (800a678 <HAL_RCC_OscConfig+0x770>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0f0      	beq.n	800a458 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d106      	bne.n	800a48c <HAL_RCC_OscConfig+0x584>
 800a47e:	4b7d      	ldr	r3, [pc, #500]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a482:	4a7c      	ldr	r2, [pc, #496]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a484:	f043 0301 	orr.w	r3, r3, #1
 800a488:	6713      	str	r3, [r2, #112]	@ 0x70
 800a48a:	e02d      	b.n	800a4e8 <HAL_RCC_OscConfig+0x5e0>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10c      	bne.n	800a4ae <HAL_RCC_OscConfig+0x5a6>
 800a494:	4b77      	ldr	r3, [pc, #476]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a498:	4a76      	ldr	r2, [pc, #472]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a49a:	f023 0301 	bic.w	r3, r3, #1
 800a49e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4a0:	4b74      	ldr	r3, [pc, #464]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4a4:	4a73      	ldr	r2, [pc, #460]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4a6:	f023 0304 	bic.w	r3, r3, #4
 800a4aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4ac:	e01c      	b.n	800a4e8 <HAL_RCC_OscConfig+0x5e0>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	2b05      	cmp	r3, #5
 800a4b4:	d10c      	bne.n	800a4d0 <HAL_RCC_OscConfig+0x5c8>
 800a4b6:	4b6f      	ldr	r3, [pc, #444]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ba:	4a6e      	ldr	r2, [pc, #440]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4bc:	f043 0304 	orr.w	r3, r3, #4
 800a4c0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4c2:	4b6c      	ldr	r3, [pc, #432]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4c6:	4a6b      	ldr	r2, [pc, #428]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4c8:	f043 0301 	orr.w	r3, r3, #1
 800a4cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4ce:	e00b      	b.n	800a4e8 <HAL_RCC_OscConfig+0x5e0>
 800a4d0:	4b68      	ldr	r3, [pc, #416]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4d4:	4a67      	ldr	r2, [pc, #412]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4d6:	f023 0301 	bic.w	r3, r3, #1
 800a4da:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4dc:	4b65      	ldr	r3, [pc, #404]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4e0:	4a64      	ldr	r2, [pc, #400]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a4e2:	f023 0304 	bic.w	r3, r3, #4
 800a4e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d015      	beq.n	800a51c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4f0:	f7fa fe58 	bl	80051a4 <HAL_GetTick>
 800a4f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4f6:	e00a      	b.n	800a50e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4f8:	f7fa fe54 	bl	80051a4 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a506:	4293      	cmp	r3, r2
 800a508:	d901      	bls.n	800a50e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e14e      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a50e:	4b59      	ldr	r3, [pc, #356]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0ee      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x5f0>
 800a51a:	e014      	b.n	800a546 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a51c:	f7fa fe42 	bl	80051a4 <HAL_GetTick>
 800a520:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a522:	e00a      	b.n	800a53a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a524:	f7fa fe3e 	bl	80051a4 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a532:	4293      	cmp	r3, r2
 800a534:	d901      	bls.n	800a53a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e138      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a53a:	4b4e      	ldr	r3, [pc, #312]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a53c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1ee      	bne.n	800a524 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 812d 	beq.w	800a7aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a550:	4b48      	ldr	r3, [pc, #288]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a558:	2b18      	cmp	r3, #24
 800a55a:	f000 80bd 	beq.w	800a6d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a562:	2b02      	cmp	r3, #2
 800a564:	f040 809e 	bne.w	800a6a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a568:	4b42      	ldr	r3, [pc, #264]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a41      	ldr	r2, [pc, #260]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a56e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a574:	f7fa fe16 	bl	80051a4 <HAL_GetTick>
 800a578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a57a:	e008      	b.n	800a58e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a57c:	f7fa fe12 	bl	80051a4 <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	2b02      	cmp	r3, #2
 800a588:	d901      	bls.n	800a58e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e10e      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a58e:	4b39      	ldr	r3, [pc, #228]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1f0      	bne.n	800a57c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a59a:	4b36      	ldr	r3, [pc, #216]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a59c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a59e:	4b37      	ldr	r3, [pc, #220]	@ (800a67c <HAL_RCC_OscConfig+0x774>)
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a5aa:	0112      	lsls	r2, r2, #4
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	4931      	ldr	r1, [pc, #196]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	025b      	lsls	r3, r3, #9
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	431a      	orrs	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	041b      	lsls	r3, r3, #16
 800a5d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	061b      	lsls	r3, r3, #24
 800a5e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a5e4:	4923      	ldr	r1, [pc, #140]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a5ea:	4b22      	ldr	r3, [pc, #136]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ee:	4a21      	ldr	r2, [pc, #132]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a5f0:	f023 0301 	bic.w	r3, r3, #1
 800a5f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5f6:	4b1f      	ldr	r3, [pc, #124]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a5f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5fa:	4b21      	ldr	r3, [pc, #132]	@ (800a680 <HAL_RCC_OscConfig+0x778>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a602:	00d2      	lsls	r2, r2, #3
 800a604:	491b      	ldr	r1, [pc, #108]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a606:	4313      	orrs	r3, r2
 800a608:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a60a:	4b1a      	ldr	r3, [pc, #104]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60e:	f023 020c 	bic.w	r2, r3, #12
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a616:	4917      	ldr	r1, [pc, #92]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a61c:	4b15      	ldr	r3, [pc, #84]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a620:	f023 0202 	bic.w	r2, r3, #2
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a628:	4912      	ldr	r1, [pc, #72]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a62e:	4b11      	ldr	r3, [pc, #68]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a632:	4a10      	ldr	r2, [pc, #64]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a63a:	4b0e      	ldr	r3, [pc, #56]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63e:	4a0d      	ldr	r2, [pc, #52]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a644:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a646:	4b0b      	ldr	r3, [pc, #44]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a64a:	4a0a      	ldr	r2, [pc, #40]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a64c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a652:	4b08      	ldr	r3, [pc, #32]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a656:	4a07      	ldr	r2, [pc, #28]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a658:	f043 0301 	orr.w	r3, r3, #1
 800a65c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a65e:	4b05      	ldr	r3, [pc, #20]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a04      	ldr	r2, [pc, #16]	@ (800a674 <HAL_RCC_OscConfig+0x76c>)
 800a664:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a66a:	f7fa fd9b 	bl	80051a4 <HAL_GetTick>
 800a66e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a670:	e011      	b.n	800a696 <HAL_RCC_OscConfig+0x78e>
 800a672:	bf00      	nop
 800a674:	58024400 	.word	0x58024400
 800a678:	58024800 	.word	0x58024800
 800a67c:	fffffc0c 	.word	0xfffffc0c
 800a680:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a684:	f7fa fd8e 	bl	80051a4 <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d901      	bls.n	800a696 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e08a      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a696:	4b47      	ldr	r3, [pc, #284]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d0f0      	beq.n	800a684 <HAL_RCC_OscConfig+0x77c>
 800a6a2:	e082      	b.n	800a7aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6a4:	4b43      	ldr	r3, [pc, #268]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a42      	ldr	r2, [pc, #264]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a6aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b0:	f7fa fd78 	bl	80051a4 <HAL_GetTick>
 800a6b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6b6:	e008      	b.n	800a6ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6b8:	f7fa fd74 	bl	80051a4 <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d901      	bls.n	800a6ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e070      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6ca:	4b3a      	ldr	r3, [pc, #232]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1f0      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x7b0>
 800a6d6:	e068      	b.n	800a7aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6d8:	4b36      	ldr	r3, [pc, #216]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6de:	4b35      	ldr	r3, [pc, #212]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a6e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d031      	beq.n	800a750 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	f003 0203 	and.w	r2, r3, #3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d12a      	bne.n	800a750 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	091b      	lsrs	r3, r3, #4
 800a6fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a706:	429a      	cmp	r2, r3
 800a708:	d122      	bne.n	800a750 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a714:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a716:	429a      	cmp	r2, r3
 800a718:	d11a      	bne.n	800a750 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	0a5b      	lsrs	r3, r3, #9
 800a71e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a726:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a728:	429a      	cmp	r2, r3
 800a72a:	d111      	bne.n	800a750 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	0c1b      	lsrs	r3, r3, #16
 800a730:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a738:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d108      	bne.n	800a750 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	0e1b      	lsrs	r3, r3, #24
 800a742:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a74a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d001      	beq.n	800a754 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e02b      	b.n	800a7ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a754:	4b17      	ldr	r3, [pc, #92]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a758:	08db      	lsrs	r3, r3, #3
 800a75a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a75e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	429a      	cmp	r2, r3
 800a768:	d01f      	beq.n	800a7aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a76a:	4b12      	ldr	r3, [pc, #72]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a76e:	4a11      	ldr	r2, [pc, #68]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a770:	f023 0301 	bic.w	r3, r3, #1
 800a774:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a776:	f7fa fd15 	bl	80051a4 <HAL_GetTick>
 800a77a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a77c:	bf00      	nop
 800a77e:	f7fa fd11 	bl	80051a4 <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	4293      	cmp	r3, r2
 800a788:	d0f9      	beq.n	800a77e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a78a:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a78c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a78e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <HAL_RCC_OscConfig+0x8b0>)
 800a790:	4013      	ands	r3, r2
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a796:	00d2      	lsls	r2, r2, #3
 800a798:	4906      	ldr	r1, [pc, #24]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a79e:	4b05      	ldr	r3, [pc, #20]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a2:	4a04      	ldr	r2, [pc, #16]	@ (800a7b4 <HAL_RCC_OscConfig+0x8ac>)
 800a7a4:	f043 0301 	orr.w	r3, r3, #1
 800a7a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3730      	adds	r7, #48	@ 0x30
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	58024400 	.word	0x58024400
 800a7b8:	ffff0007 	.word	0xffff0007

0800a7bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e19c      	b.n	800ab0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7d0:	4b8a      	ldr	r3, [pc, #552]	@ (800a9fc <HAL_RCC_ClockConfig+0x240>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 030f 	and.w	r3, r3, #15
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d910      	bls.n	800a800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7de:	4b87      	ldr	r3, [pc, #540]	@ (800a9fc <HAL_RCC_ClockConfig+0x240>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f023 020f 	bic.w	r2, r3, #15
 800a7e6:	4985      	ldr	r1, [pc, #532]	@ (800a9fc <HAL_RCC_ClockConfig+0x240>)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7ee:	4b83      	ldr	r3, [pc, #524]	@ (800a9fc <HAL_RCC_ClockConfig+0x240>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 030f 	and.w	r3, r3, #15
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d001      	beq.n	800a800 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e184      	b.n	800ab0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 0304 	and.w	r3, r3, #4
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d010      	beq.n	800a82e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	691a      	ldr	r2, [r3, #16]
 800a810:	4b7b      	ldr	r3, [pc, #492]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a818:	429a      	cmp	r2, r3
 800a81a:	d908      	bls.n	800a82e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a81c:	4b78      	ldr	r3, [pc, #480]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	4975      	ldr	r1, [pc, #468]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0308 	and.w	r3, r3, #8
 800a836:	2b00      	cmp	r3, #0
 800a838:	d010      	beq.n	800a85c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	695a      	ldr	r2, [r3, #20]
 800a83e:	4b70      	ldr	r3, [pc, #448]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a846:	429a      	cmp	r2, r3
 800a848:	d908      	bls.n	800a85c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a84a:	4b6d      	ldr	r3, [pc, #436]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	496a      	ldr	r1, [pc, #424]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a858:	4313      	orrs	r3, r2
 800a85a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0310 	and.w	r3, r3, #16
 800a864:	2b00      	cmp	r3, #0
 800a866:	d010      	beq.n	800a88a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699a      	ldr	r2, [r3, #24]
 800a86c:	4b64      	ldr	r3, [pc, #400]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a874:	429a      	cmp	r2, r3
 800a876:	d908      	bls.n	800a88a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a878:	4b61      	ldr	r3, [pc, #388]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a87a:	69db      	ldr	r3, [r3, #28]
 800a87c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	495e      	ldr	r1, [pc, #376]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a886:	4313      	orrs	r3, r2
 800a888:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0320 	and.w	r3, r3, #32
 800a892:	2b00      	cmp	r3, #0
 800a894:	d010      	beq.n	800a8b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69da      	ldr	r2, [r3, #28]
 800a89a:	4b59      	ldr	r3, [pc, #356]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d908      	bls.n	800a8b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a8a6:	4b56      	ldr	r3, [pc, #344]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	4953      	ldr	r1, [pc, #332]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0302 	and.w	r3, r3, #2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d010      	beq.n	800a8e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	4b4d      	ldr	r3, [pc, #308]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	f003 030f 	and.w	r3, r3, #15
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d908      	bls.n	800a8e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8d4:	4b4a      	ldr	r3, [pc, #296]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	f023 020f 	bic.w	r2, r3, #15
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	4947      	ldr	r1, [pc, #284]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d055      	beq.n	800a99e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a8f2:	4b43      	ldr	r3, [pc, #268]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	4940      	ldr	r1, [pc, #256]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a900:	4313      	orrs	r3, r2
 800a902:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d107      	bne.n	800a91c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a90c:	4b3c      	ldr	r3, [pc, #240]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d121      	bne.n	800a95c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e0f6      	b.n	800ab0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2b03      	cmp	r3, #3
 800a922:	d107      	bne.n	800a934 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a924:	4b36      	ldr	r3, [pc, #216]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d115      	bne.n	800a95c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e0ea      	b.n	800ab0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d107      	bne.n	800a94c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a93c:	4b30      	ldr	r3, [pc, #192]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a944:	2b00      	cmp	r3, #0
 800a946:	d109      	bne.n	800a95c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e0de      	b.n	800ab0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a94c:	4b2c      	ldr	r3, [pc, #176]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e0d6      	b.n	800ab0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a95c:	4b28      	ldr	r3, [pc, #160]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	f023 0207 	bic.w	r2, r3, #7
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	4925      	ldr	r1, [pc, #148]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a96a:	4313      	orrs	r3, r2
 800a96c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a96e:	f7fa fc19 	bl	80051a4 <HAL_GetTick>
 800a972:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a974:	e00a      	b.n	800a98c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a976:	f7fa fc15 	bl	80051a4 <HAL_GetTick>
 800a97a:	4602      	mov	r2, r0
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a984:	4293      	cmp	r3, r2
 800a986:	d901      	bls.n	800a98c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a988:	2303      	movs	r3, #3
 800a98a:	e0be      	b.n	800ab0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a98c:	4b1c      	ldr	r3, [pc, #112]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d1eb      	bne.n	800a976 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d010      	beq.n	800a9cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	68da      	ldr	r2, [r3, #12]
 800a9ae:	4b14      	ldr	r3, [pc, #80]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	f003 030f 	and.w	r3, r3, #15
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d208      	bcs.n	800a9cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9ba:	4b11      	ldr	r3, [pc, #68]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	f023 020f 	bic.w	r2, r3, #15
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	490e      	ldr	r1, [pc, #56]	@ (800aa00 <HAL_RCC_ClockConfig+0x244>)
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a9fc <HAL_RCC_ClockConfig+0x240>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 030f 	and.w	r3, r3, #15
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d214      	bcs.n	800aa04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9da:	4b08      	ldr	r3, [pc, #32]	@ (800a9fc <HAL_RCC_ClockConfig+0x240>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f023 020f 	bic.w	r2, r3, #15
 800a9e2:	4906      	ldr	r1, [pc, #24]	@ (800a9fc <HAL_RCC_ClockConfig+0x240>)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9ea:	4b04      	ldr	r3, [pc, #16]	@ (800a9fc <HAL_RCC_ClockConfig+0x240>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 030f 	and.w	r3, r3, #15
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d005      	beq.n	800aa04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e086      	b.n	800ab0a <HAL_RCC_ClockConfig+0x34e>
 800a9fc:	52002000 	.word	0x52002000
 800aa00:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d010      	beq.n	800aa32 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691a      	ldr	r2, [r3, #16]
 800aa14:	4b3f      	ldr	r3, [pc, #252]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d208      	bcs.n	800aa32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa20:	4b3c      	ldr	r3, [pc, #240]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	4939      	ldr	r1, [pc, #228]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0308 	and.w	r3, r3, #8
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d010      	beq.n	800aa60 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	695a      	ldr	r2, [r3, #20]
 800aa42:	4b34      	ldr	r3, [pc, #208]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d208      	bcs.n	800aa60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa4e:	4b31      	ldr	r3, [pc, #196]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	492e      	ldr	r1, [pc, #184]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0310 	and.w	r3, r3, #16
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d010      	beq.n	800aa8e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699a      	ldr	r2, [r3, #24]
 800aa70:	4b28      	ldr	r3, [pc, #160]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aa72:	69db      	ldr	r3, [r3, #28]
 800aa74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d208      	bcs.n	800aa8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa7c:	4b25      	ldr	r3, [pc, #148]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	4922      	ldr	r1, [pc, #136]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d010      	beq.n	800aabc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	69da      	ldr	r2, [r3, #28]
 800aa9e:	4b1d      	ldr	r3, [pc, #116]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d208      	bcs.n	800aabc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aaaa:	4b1a      	ldr	r3, [pc, #104]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	4917      	ldr	r1, [pc, #92]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aab8:	4313      	orrs	r3, r2
 800aaba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aabc:	f000 f834 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800aac0:	4602      	mov	r2, r0
 800aac2:	4b14      	ldr	r3, [pc, #80]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	0a1b      	lsrs	r3, r3, #8
 800aac8:	f003 030f 	and.w	r3, r3, #15
 800aacc:	4912      	ldr	r1, [pc, #72]	@ (800ab18 <HAL_RCC_ClockConfig+0x35c>)
 800aace:	5ccb      	ldrb	r3, [r1, r3]
 800aad0:	f003 031f 	and.w	r3, r3, #31
 800aad4:	fa22 f303 	lsr.w	r3, r2, r3
 800aad8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aada:	4b0e      	ldr	r3, [pc, #56]	@ (800ab14 <HAL_RCC_ClockConfig+0x358>)
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	f003 030f 	and.w	r3, r3, #15
 800aae2:	4a0d      	ldr	r2, [pc, #52]	@ (800ab18 <HAL_RCC_ClockConfig+0x35c>)
 800aae4:	5cd3      	ldrb	r3, [r2, r3]
 800aae6:	f003 031f 	and.w	r3, r3, #31
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf0:	4a0a      	ldr	r2, [pc, #40]	@ (800ab1c <HAL_RCC_ClockConfig+0x360>)
 800aaf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aaf4:	4a0a      	ldr	r2, [pc, #40]	@ (800ab20 <HAL_RCC_ClockConfig+0x364>)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aafa:	4b0a      	ldr	r3, [pc, #40]	@ (800ab24 <HAL_RCC_ClockConfig+0x368>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fa fb06 	bl	8005110 <HAL_InitTick>
 800ab04:	4603      	mov	r3, r0
 800ab06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	58024400 	.word	0x58024400
 800ab18:	08015f10 	.word	0x08015f10
 800ab1c:	2400001c 	.word	0x2400001c
 800ab20:	24000018 	.word	0x24000018
 800ab24:	24000020 	.word	0x24000020

0800ab28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b089      	sub	sp, #36	@ 0x24
 800ab2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab2e:	4bb3      	ldr	r3, [pc, #716]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab36:	2b18      	cmp	r3, #24
 800ab38:	f200 8155 	bhi.w	800ade6 <HAL_RCC_GetSysClockFreq+0x2be>
 800ab3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ab3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab42:	bf00      	nop
 800ab44:	0800aba9 	.word	0x0800aba9
 800ab48:	0800ade7 	.word	0x0800ade7
 800ab4c:	0800ade7 	.word	0x0800ade7
 800ab50:	0800ade7 	.word	0x0800ade7
 800ab54:	0800ade7 	.word	0x0800ade7
 800ab58:	0800ade7 	.word	0x0800ade7
 800ab5c:	0800ade7 	.word	0x0800ade7
 800ab60:	0800ade7 	.word	0x0800ade7
 800ab64:	0800abcf 	.word	0x0800abcf
 800ab68:	0800ade7 	.word	0x0800ade7
 800ab6c:	0800ade7 	.word	0x0800ade7
 800ab70:	0800ade7 	.word	0x0800ade7
 800ab74:	0800ade7 	.word	0x0800ade7
 800ab78:	0800ade7 	.word	0x0800ade7
 800ab7c:	0800ade7 	.word	0x0800ade7
 800ab80:	0800ade7 	.word	0x0800ade7
 800ab84:	0800abd5 	.word	0x0800abd5
 800ab88:	0800ade7 	.word	0x0800ade7
 800ab8c:	0800ade7 	.word	0x0800ade7
 800ab90:	0800ade7 	.word	0x0800ade7
 800ab94:	0800ade7 	.word	0x0800ade7
 800ab98:	0800ade7 	.word	0x0800ade7
 800ab9c:	0800ade7 	.word	0x0800ade7
 800aba0:	0800ade7 	.word	0x0800ade7
 800aba4:	0800abdb 	.word	0x0800abdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aba8:	4b94      	ldr	r3, [pc, #592]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0320 	and.w	r3, r3, #32
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d009      	beq.n	800abc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abb4:	4b91      	ldr	r3, [pc, #580]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	08db      	lsrs	r3, r3, #3
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	4a90      	ldr	r2, [pc, #576]	@ (800ae00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abc0:	fa22 f303 	lsr.w	r3, r2, r3
 800abc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800abc6:	e111      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800abc8:	4b8d      	ldr	r3, [pc, #564]	@ (800ae00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abca:	61bb      	str	r3, [r7, #24]
      break;
 800abcc:	e10e      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800abce:	4b8d      	ldr	r3, [pc, #564]	@ (800ae04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800abd0:	61bb      	str	r3, [r7, #24]
      break;
 800abd2:	e10b      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800abd4:	4b8c      	ldr	r3, [pc, #560]	@ (800ae08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800abd6:	61bb      	str	r3, [r7, #24]
      break;
 800abd8:	e108      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abda:	4b88      	ldr	r3, [pc, #544]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abde:	f003 0303 	and.w	r3, r3, #3
 800abe2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800abe4:	4b85      	ldr	r3, [pc, #532]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe8:	091b      	lsrs	r3, r3, #4
 800abea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800abf0:	4b82      	ldr	r3, [pc, #520]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800abfa:	4b80      	ldr	r3, [pc, #512]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfe:	08db      	lsrs	r3, r3, #3
 800ac00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	fb02 f303 	mul.w	r3, r2, r3
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 80e1 	beq.w	800ade0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	f000 8083 	beq.w	800ad2c <HAL_RCC_GetSysClockFreq+0x204>
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	f200 80a1 	bhi.w	800ad70 <HAL_RCC_GetSysClockFreq+0x248>
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <HAL_RCC_GetSysClockFreq+0x114>
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d056      	beq.n	800ace8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ac3a:	e099      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac3c:	4b6f      	ldr	r3, [pc, #444]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0320 	and.w	r3, r3, #32
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d02d      	beq.n	800aca4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac48:	4b6c      	ldr	r3, [pc, #432]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	08db      	lsrs	r3, r3, #3
 800ac4e:	f003 0303 	and.w	r3, r3, #3
 800ac52:	4a6b      	ldr	r2, [pc, #428]	@ (800ae00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac54:	fa22 f303 	lsr.w	r3, r2, r3
 800ac58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	ee07 3a90 	vmov	s15, r3
 800ac60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac72:	4b62      	ldr	r3, [pc, #392]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac82:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac86:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800ae0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aca2:	e087      	b.n	800adb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800ae10 <HAL_RCC_GetSysClockFreq+0x2e8>
 800acb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb6:	4b51      	ldr	r3, [pc, #324]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc6:	ed97 6a02 	vldr	s12, [r7, #8]
 800acca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800ae0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800acce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ace6:	e065      	b.n	800adb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800ae14 <HAL_RCC_GetSysClockFreq+0x2ec>
 800acf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfa:	4b40      	ldr	r3, [pc, #256]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ae0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad2a:	e043      	b.n	800adb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ae18 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ad3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3e:	4b2f      	ldr	r3, [pc, #188]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad46:	ee07 3a90 	vmov	s15, r3
 800ad4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800ae0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad6e:	e021      	b.n	800adb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ae14 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad82:	4b1e      	ldr	r3, [pc, #120]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad92:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800ae0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ada6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800adb4:	4b11      	ldr	r3, [pc, #68]	@ (800adfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adb8:	0a5b      	lsrs	r3, r3, #9
 800adba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adbe:	3301      	adds	r3, #1
 800adc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	ee07 3a90 	vmov	s15, r3
 800adc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800adcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800add0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800add4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800add8:	ee17 3a90 	vmov	r3, s15
 800addc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800adde:	e005      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61bb      	str	r3, [r7, #24]
      break;
 800ade4:	e002      	b.n	800adec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ade6:	4b07      	ldr	r3, [pc, #28]	@ (800ae04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ade8:	61bb      	str	r3, [r7, #24]
      break;
 800adea:	bf00      	nop
  }

  return sysclockfreq;
 800adec:	69bb      	ldr	r3, [r7, #24]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3724      	adds	r7, #36	@ 0x24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	58024400 	.word	0x58024400
 800ae00:	03d09000 	.word	0x03d09000
 800ae04:	003d0900 	.word	0x003d0900
 800ae08:	017d7840 	.word	0x017d7840
 800ae0c:	46000000 	.word	0x46000000
 800ae10:	4c742400 	.word	0x4c742400
 800ae14:	4a742400 	.word	0x4a742400
 800ae18:	4bbebc20 	.word	0x4bbebc20

0800ae1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ae22:	f7ff fe81 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800ae26:	4602      	mov	r2, r0
 800ae28:	4b10      	ldr	r3, [pc, #64]	@ (800ae6c <HAL_RCC_GetHCLKFreq+0x50>)
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	0a1b      	lsrs	r3, r3, #8
 800ae2e:	f003 030f 	and.w	r3, r3, #15
 800ae32:	490f      	ldr	r1, [pc, #60]	@ (800ae70 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae34:	5ccb      	ldrb	r3, [r1, r3]
 800ae36:	f003 031f 	and.w	r3, r3, #31
 800ae3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae40:	4b0a      	ldr	r3, [pc, #40]	@ (800ae6c <HAL_RCC_GetHCLKFreq+0x50>)
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	f003 030f 	and.w	r3, r3, #15
 800ae48:	4a09      	ldr	r2, [pc, #36]	@ (800ae70 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae4a:	5cd3      	ldrb	r3, [r2, r3]
 800ae4c:	f003 031f 	and.w	r3, r3, #31
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	fa22 f303 	lsr.w	r3, r2, r3
 800ae56:	4a07      	ldr	r2, [pc, #28]	@ (800ae74 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae5a:	4a07      	ldr	r2, [pc, #28]	@ (800ae78 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae60:	4b04      	ldr	r3, [pc, #16]	@ (800ae74 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae62:	681b      	ldr	r3, [r3, #0]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	58024400 	.word	0x58024400
 800ae70:	08015f10 	.word	0x08015f10
 800ae74:	2400001c 	.word	0x2400001c
 800ae78:	24000018 	.word	0x24000018

0800ae7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ae80:	f7ff ffcc 	bl	800ae1c <HAL_RCC_GetHCLKFreq>
 800ae84:	4602      	mov	r2, r0
 800ae86:	4b06      	ldr	r3, [pc, #24]	@ (800aea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	091b      	lsrs	r3, r3, #4
 800ae8c:	f003 0307 	and.w	r3, r3, #7
 800ae90:	4904      	ldr	r1, [pc, #16]	@ (800aea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae92:	5ccb      	ldrb	r3, [r1, r3]
 800ae94:	f003 031f 	and.w	r3, r3, #31
 800ae98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	58024400 	.word	0x58024400
 800aea4:	08015f10 	.word	0x08015f10

0800aea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aeac:	f7ff ffb6 	bl	800ae1c <HAL_RCC_GetHCLKFreq>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	4b06      	ldr	r3, [pc, #24]	@ (800aecc <HAL_RCC_GetPCLK2Freq+0x24>)
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	0a1b      	lsrs	r3, r3, #8
 800aeb8:	f003 0307 	and.w	r3, r3, #7
 800aebc:	4904      	ldr	r1, [pc, #16]	@ (800aed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aebe:	5ccb      	ldrb	r3, [r1, r3]
 800aec0:	f003 031f 	and.w	r3, r3, #31
 800aec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	58024400 	.word	0x58024400
 800aed0:	08015f10 	.word	0x08015f10

0800aed4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aed8:	b0ca      	sub	sp, #296	@ 0x128
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aee0:	2300      	movs	r3, #0
 800aee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aee6:	2300      	movs	r3, #0
 800aee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800aef8:	2500      	movs	r5, #0
 800aefa:	ea54 0305 	orrs.w	r3, r4, r5
 800aefe:	d049      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800af00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800af0a:	d02f      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800af0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800af10:	d828      	bhi.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af16:	d01a      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800af18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af1c:	d822      	bhi.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800af22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af26:	d007      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800af28:	e01c      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af2a:	4bb8      	ldr	r3, [pc, #736]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2e:	4ab7      	ldr	r2, [pc, #732]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af36:	e01a      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af3c:	3308      	adds	r3, #8
 800af3e:	2102      	movs	r1, #2
 800af40:	4618      	mov	r0, r3
 800af42:	f002 fb61 	bl	800d608 <RCCEx_PLL2_Config>
 800af46:	4603      	mov	r3, r0
 800af48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af4c:	e00f      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af52:	3328      	adds	r3, #40	@ 0x28
 800af54:	2102      	movs	r1, #2
 800af56:	4618      	mov	r0, r3
 800af58:	f002 fc08 	bl	800d76c <RCCEx_PLL3_Config>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af62:	e004      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800af6a:	e000      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800af6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10a      	bne.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800af76:	4ba5      	ldr	r3, [pc, #660]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800af7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af84:	4aa1      	ldr	r2, [pc, #644]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af86:	430b      	orrs	r3, r1
 800af88:	6513      	str	r3, [r2, #80]	@ 0x50
 800af8a:	e003      	b.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800af94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800afa0:	f04f 0900 	mov.w	r9, #0
 800afa4:	ea58 0309 	orrs.w	r3, r8, r9
 800afa8:	d047      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800afaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afb0:	2b04      	cmp	r3, #4
 800afb2:	d82a      	bhi.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800afb4:	a201      	add	r2, pc, #4	@ (adr r2, 800afbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800afb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afba:	bf00      	nop
 800afbc:	0800afd1 	.word	0x0800afd1
 800afc0:	0800afdf 	.word	0x0800afdf
 800afc4:	0800aff5 	.word	0x0800aff5
 800afc8:	0800b013 	.word	0x0800b013
 800afcc:	0800b013 	.word	0x0800b013
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afd0:	4b8e      	ldr	r3, [pc, #568]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd4:	4a8d      	ldr	r2, [pc, #564]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800afda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afdc:	e01a      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afe2:	3308      	adds	r3, #8
 800afe4:	2100      	movs	r1, #0
 800afe6:	4618      	mov	r0, r3
 800afe8:	f002 fb0e 	bl	800d608 <RCCEx_PLL2_Config>
 800afec:	4603      	mov	r3, r0
 800afee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aff2:	e00f      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aff8:	3328      	adds	r3, #40	@ 0x28
 800affa:	2100      	movs	r1, #0
 800affc:	4618      	mov	r0, r3
 800affe:	f002 fbb5 	bl	800d76c <RCCEx_PLL3_Config>
 800b002:	4603      	mov	r3, r0
 800b004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b008:	e004      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b010:	e000      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b012:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10a      	bne.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b01c:	4b7b      	ldr	r3, [pc, #492]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b01e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b020:	f023 0107 	bic.w	r1, r3, #7
 800b024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b02a:	4a78      	ldr	r2, [pc, #480]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b02c:	430b      	orrs	r3, r1
 800b02e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b030:	e003      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b046:	f04f 0b00 	mov.w	fp, #0
 800b04a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b04e:	d04c      	beq.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b05a:	d030      	beq.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b05c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b060:	d829      	bhi.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b062:	2bc0      	cmp	r3, #192	@ 0xc0
 800b064:	d02d      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b066:	2bc0      	cmp	r3, #192	@ 0xc0
 800b068:	d825      	bhi.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b06a:	2b80      	cmp	r3, #128	@ 0x80
 800b06c:	d018      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b06e:	2b80      	cmp	r3, #128	@ 0x80
 800b070:	d821      	bhi.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d002      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b076:	2b40      	cmp	r3, #64	@ 0x40
 800b078:	d007      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b07a:	e01c      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b07c:	4b63      	ldr	r3, [pc, #396]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b080:	4a62      	ldr	r2, [pc, #392]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b088:	e01c      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b08e:	3308      	adds	r3, #8
 800b090:	2100      	movs	r1, #0
 800b092:	4618      	mov	r0, r3
 800b094:	f002 fab8 	bl	800d608 <RCCEx_PLL2_Config>
 800b098:	4603      	mov	r3, r0
 800b09a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b09e:	e011      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0a4:	3328      	adds	r3, #40	@ 0x28
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f002 fb5f 	bl	800d76c <RCCEx_PLL3_Config>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b0b4:	e006      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b0bc:	e002      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b0be:	bf00      	nop
 800b0c0:	e000      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b0c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10a      	bne.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b0cc:	4b4f      	ldr	r3, [pc, #316]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0da:	4a4c      	ldr	r2, [pc, #304]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	6513      	str	r3, [r2, #80]	@ 0x50
 800b0e0:	e003      	b.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b0f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800b100:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800b104:	460b      	mov	r3, r1
 800b106:	4313      	orrs	r3, r2
 800b108:	d053      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b10e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b112:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b116:	d035      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b118:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b11c:	d82e      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b11e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b122:	d031      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b124:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b128:	d828      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b12a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b12e:	d01a      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b134:	d822      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b13a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b13e:	d007      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b140:	e01c      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b142:	4b32      	ldr	r3, [pc, #200]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b146:	4a31      	ldr	r2, [pc, #196]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b14c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b14e:	e01c      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b154:	3308      	adds	r3, #8
 800b156:	2100      	movs	r1, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f002 fa55 	bl	800d608 <RCCEx_PLL2_Config>
 800b15e:	4603      	mov	r3, r0
 800b160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b164:	e011      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b16a:	3328      	adds	r3, #40	@ 0x28
 800b16c:	2100      	movs	r1, #0
 800b16e:	4618      	mov	r0, r3
 800b170:	f002 fafc 	bl	800d76c <RCCEx_PLL3_Config>
 800b174:	4603      	mov	r3, r0
 800b176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b17a:	e006      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b182:	e002      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b184:	bf00      	nop
 800b186:	e000      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b18a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10b      	bne.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b192:	4b1e      	ldr	r3, [pc, #120]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b196:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b19e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b1a2:	4a1a      	ldr	r2, [pc, #104]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1a4:	430b      	orrs	r3, r1
 800b1a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b1a8:	e003      	b.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b1be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b1c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	d056      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b1da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b1de:	d038      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b1e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b1e4:	d831      	bhi.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b1e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b1ea:	d034      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b1ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b1f0:	d82b      	bhi.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b1f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1f6:	d01d      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b1f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1fc:	d825      	bhi.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d006      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b206:	d00a      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b208:	e01f      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b20a:	bf00      	nop
 800b20c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b210:	4ba2      	ldr	r3, [pc, #648]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b214:	4aa1      	ldr	r2, [pc, #644]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b21a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b21c:	e01c      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b222:	3308      	adds	r3, #8
 800b224:	2100      	movs	r1, #0
 800b226:	4618      	mov	r0, r3
 800b228:	f002 f9ee 	bl	800d608 <RCCEx_PLL2_Config>
 800b22c:	4603      	mov	r3, r0
 800b22e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b232:	e011      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b238:	3328      	adds	r3, #40	@ 0x28
 800b23a:	2100      	movs	r1, #0
 800b23c:	4618      	mov	r0, r3
 800b23e:	f002 fa95 	bl	800d76c <RCCEx_PLL3_Config>
 800b242:	4603      	mov	r3, r0
 800b244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b248:	e006      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b250:	e002      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b252:	bf00      	nop
 800b254:	e000      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b256:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10b      	bne.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b260:	4b8e      	ldr	r3, [pc, #568]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b264:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b26c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b270:	4a8a      	ldr	r2, [pc, #552]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b272:	430b      	orrs	r3, r1
 800b274:	6593      	str	r3, [r2, #88]	@ 0x58
 800b276:	e003      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b27c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b288:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b28c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b290:	2300      	movs	r3, #0
 800b292:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b296:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b29a:	460b      	mov	r3, r1
 800b29c:	4313      	orrs	r3, r2
 800b29e:	d03a      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2a6:	2b30      	cmp	r3, #48	@ 0x30
 800b2a8:	d01f      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b2aa:	2b30      	cmp	r3, #48	@ 0x30
 800b2ac:	d819      	bhi.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b2ae:	2b20      	cmp	r3, #32
 800b2b0:	d00c      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b2b2:	2b20      	cmp	r3, #32
 800b2b4:	d815      	bhi.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d019      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b2ba:	2b10      	cmp	r3, #16
 800b2bc:	d111      	bne.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2be:	4b77      	ldr	r3, [pc, #476]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c2:	4a76      	ldr	r2, [pc, #472]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b2ca:	e011      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	2102      	movs	r1, #2
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f002 f997 	bl	800d608 <RCCEx_PLL2_Config>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b2e0:	e006      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b2e8:	e002      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b2ea:	bf00      	nop
 800b2ec:	e000      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b2ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b2f8:	4b68      	ldr	r3, [pc, #416]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b306:	4a65      	ldr	r2, [pc, #404]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b308:	430b      	orrs	r3, r1
 800b30a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b30c:	e003      	b.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b322:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b326:	2300      	movs	r3, #0
 800b328:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b32c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b330:	460b      	mov	r3, r1
 800b332:	4313      	orrs	r3, r2
 800b334:	d051      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b33a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b33c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b340:	d035      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b346:	d82e      	bhi.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b348:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b34c:	d031      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b34e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b352:	d828      	bhi.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b358:	d01a      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b35a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b35e:	d822      	bhi.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b368:	d007      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b36a:	e01c      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b36c:	4b4b      	ldr	r3, [pc, #300]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b370:	4a4a      	ldr	r2, [pc, #296]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b378:	e01c      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b37e:	3308      	adds	r3, #8
 800b380:	2100      	movs	r1, #0
 800b382:	4618      	mov	r0, r3
 800b384:	f002 f940 	bl	800d608 <RCCEx_PLL2_Config>
 800b388:	4603      	mov	r3, r0
 800b38a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b38e:	e011      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b394:	3328      	adds	r3, #40	@ 0x28
 800b396:	2100      	movs	r1, #0
 800b398:	4618      	mov	r0, r3
 800b39a:	f002 f9e7 	bl	800d76c <RCCEx_PLL3_Config>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3a4:	e006      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b3ac:	e002      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b3ae:	bf00      	nop
 800b3b0:	e000      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b3b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10a      	bne.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b3bc:	4b37      	ldr	r3, [pc, #220]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3ca:	4a34      	ldr	r2, [pc, #208]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	6513      	str	r3, [r2, #80]	@ 0x50
 800b3d0:	e003      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b3e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b3f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	d056      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b404:	d033      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b406:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b40a:	d82c      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b40c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b410:	d02f      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b416:	d826      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b418:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b41c:	d02b      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b41e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b422:	d820      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b428:	d012      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b42a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b42e:	d81a      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b430:	2b00      	cmp	r3, #0
 800b432:	d022      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b438:	d115      	bne.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b43e:	3308      	adds	r3, #8
 800b440:	2101      	movs	r1, #1
 800b442:	4618      	mov	r0, r3
 800b444:	f002 f8e0 	bl	800d608 <RCCEx_PLL2_Config>
 800b448:	4603      	mov	r3, r0
 800b44a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b44e:	e015      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b454:	3328      	adds	r3, #40	@ 0x28
 800b456:	2101      	movs	r1, #1
 800b458:	4618      	mov	r0, r3
 800b45a:	f002 f987 	bl	800d76c <RCCEx_PLL3_Config>
 800b45e:	4603      	mov	r3, r0
 800b460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b464:	e00a      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b46c:	e006      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b46e:	bf00      	nop
 800b470:	e004      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b472:	bf00      	nop
 800b474:	e002      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b476:	bf00      	nop
 800b478:	e000      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b47a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10d      	bne.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b484:	4b05      	ldr	r3, [pc, #20]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b488:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b492:	4a02      	ldr	r2, [pc, #8]	@ (800b49c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b494:	430b      	orrs	r3, r1
 800b496:	6513      	str	r3, [r2, #80]	@ 0x50
 800b498:	e006      	b.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b49a:	bf00      	nop
 800b49c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b4b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b4be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	d055      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b4d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4d4:	d033      	beq.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b4d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4da:	d82c      	bhi.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e0:	d02f      	beq.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e6:	d826      	bhi.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b4e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4ec:	d02b      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b4ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4f2:	d820      	bhi.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b4f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4f8:	d012      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b4fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4fe:	d81a      	bhi.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b500:	2b00      	cmp	r3, #0
 800b502:	d022      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b508:	d115      	bne.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b50e:	3308      	adds	r3, #8
 800b510:	2101      	movs	r1, #1
 800b512:	4618      	mov	r0, r3
 800b514:	f002 f878 	bl	800d608 <RCCEx_PLL2_Config>
 800b518:	4603      	mov	r3, r0
 800b51a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b51e:	e015      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b524:	3328      	adds	r3, #40	@ 0x28
 800b526:	2101      	movs	r1, #1
 800b528:	4618      	mov	r0, r3
 800b52a:	f002 f91f 	bl	800d76c <RCCEx_PLL3_Config>
 800b52e:	4603      	mov	r3, r0
 800b530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b534:	e00a      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b53c:	e006      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b53e:	bf00      	nop
 800b540:	e004      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b542:	bf00      	nop
 800b544:	e002      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b546:	bf00      	nop
 800b548:	e000      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b54a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b54c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10b      	bne.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b554:	4ba3      	ldr	r3, [pc, #652]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b558:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b560:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b564:	4a9f      	ldr	r2, [pc, #636]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b566:	430b      	orrs	r3, r1
 800b568:	6593      	str	r3, [r2, #88]	@ 0x58
 800b56a:	e003      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b56c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b580:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b584:	2300      	movs	r3, #0
 800b586:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b58a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b58e:	460b      	mov	r3, r1
 800b590:	4313      	orrs	r3, r2
 800b592:	d037      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b59a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b59e:	d00e      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b5a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5a4:	d816      	bhi.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d018      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b5aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5ae:	d111      	bne.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5b0:	4b8c      	ldr	r3, [pc, #560]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b4:	4a8b      	ldr	r2, [pc, #556]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b5bc:	e00f      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5c2:	3308      	adds	r3, #8
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f002 f81e 	bl	800d608 <RCCEx_PLL2_Config>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b5d2:	e004      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b5da:	e000      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b5dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10a      	bne.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b5e6:	4b7f      	ldr	r3, [pc, #508]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5f4:	4a7b      	ldr	r2, [pc, #492]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5f6:	430b      	orrs	r3, r1
 800b5f8:	6513      	str	r3, [r2, #80]	@ 0x50
 800b5fa:	e003      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b614:	2300      	movs	r3, #0
 800b616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b61a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b61e:	460b      	mov	r3, r1
 800b620:	4313      	orrs	r3, r2
 800b622:	d039      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	d81c      	bhi.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b62e:	a201      	add	r2, pc, #4	@ (adr r2, 800b634 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b634:	0800b671 	.word	0x0800b671
 800b638:	0800b645 	.word	0x0800b645
 800b63c:	0800b653 	.word	0x0800b653
 800b640:	0800b671 	.word	0x0800b671
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b644:	4b67      	ldr	r3, [pc, #412]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b648:	4a66      	ldr	r2, [pc, #408]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b64a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b64e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b650:	e00f      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b656:	3308      	adds	r3, #8
 800b658:	2102      	movs	r1, #2
 800b65a:	4618      	mov	r0, r3
 800b65c:	f001 ffd4 	bl	800d608 <RCCEx_PLL2_Config>
 800b660:	4603      	mov	r3, r0
 800b662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b666:	e004      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b66e:	e000      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b670:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b676:	2b00      	cmp	r3, #0
 800b678:	d10a      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b67a:	4b5a      	ldr	r3, [pc, #360]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b67c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b67e:	f023 0103 	bic.w	r1, r3, #3
 800b682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b688:	4a56      	ldr	r2, [pc, #344]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b68a:	430b      	orrs	r3, r1
 800b68c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b68e:	e003      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b6a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b6ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	f000 809f 	beq.w	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6ba:	4b4b      	ldr	r3, [pc, #300]	@ (800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a4a      	ldr	r2, [pc, #296]	@ (800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b6c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b6c6:	f7f9 fd6d 	bl	80051a4 <HAL_GetTick>
 800b6ca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6ce:	e00b      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6d0:	f7f9 fd68 	bl	80051a4 <HAL_GetTick>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	2b64      	cmp	r3, #100	@ 0x64
 800b6de:	d903      	bls.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b6e6:	e005      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6e8:	4b3f      	ldr	r3, [pc, #252]	@ (800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0ed      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b6f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d179      	bne.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b6fc:	4b39      	ldr	r3, [pc, #228]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b708:	4053      	eors	r3, r2
 800b70a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d015      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b712:	4b34      	ldr	r3, [pc, #208]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b71a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b71e:	4b31      	ldr	r3, [pc, #196]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b722:	4a30      	ldr	r2, [pc, #192]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b728:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b72a:	4b2e      	ldr	r3, [pc, #184]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b72c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b72e:	4a2d      	ldr	r2, [pc, #180]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b734:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b736:	4a2b      	ldr	r2, [pc, #172]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b73c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b742:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b74a:	d118      	bne.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b74c:	f7f9 fd2a 	bl	80051a4 <HAL_GetTick>
 800b750:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b754:	e00d      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b756:	f7f9 fd25 	bl	80051a4 <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b760:	1ad2      	subs	r2, r2, r3
 800b762:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b766:	429a      	cmp	r2, r3
 800b768:	d903      	bls.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800b770:	e005      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b772:	4b1c      	ldr	r3, [pc, #112]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b776:	f003 0302 	and.w	r3, r3, #2
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d0eb      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b77e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b782:	2b00      	cmp	r3, #0
 800b784:	d129      	bne.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b78a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b78e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b792:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b796:	d10e      	bne.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b798:	4b12      	ldr	r3, [pc, #72]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b7a8:	091a      	lsrs	r2, r3, #4
 800b7aa:	4b10      	ldr	r3, [pc, #64]	@ (800b7ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	4a0d      	ldr	r2, [pc, #52]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7b0:	430b      	orrs	r3, r1
 800b7b2:	6113      	str	r3, [r2, #16]
 800b7b4:	e005      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b7b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b7c0:	6113      	str	r3, [r2, #16]
 800b7c2:	4b08      	ldr	r3, [pc, #32]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b7ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7d2:	4a04      	ldr	r2, [pc, #16]	@ (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7d4:	430b      	orrs	r3, r1
 800b7d6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7d8:	e00e      	b.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b7da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800b7e2:	e009      	b.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b7e4:	58024400 	.word	0x58024400
 800b7e8:	58024800 	.word	0x58024800
 800b7ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	f002 0301 	and.w	r3, r2, #1
 800b804:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b808:	2300      	movs	r3, #0
 800b80a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b80e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b812:	460b      	mov	r3, r1
 800b814:	4313      	orrs	r3, r2
 800b816:	f000 8089 	beq.w	800b92c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b81e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b820:	2b28      	cmp	r3, #40	@ 0x28
 800b822:	d86b      	bhi.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b824:	a201      	add	r2, pc, #4	@ (adr r2, 800b82c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82a:	bf00      	nop
 800b82c:	0800b905 	.word	0x0800b905
 800b830:	0800b8fd 	.word	0x0800b8fd
 800b834:	0800b8fd 	.word	0x0800b8fd
 800b838:	0800b8fd 	.word	0x0800b8fd
 800b83c:	0800b8fd 	.word	0x0800b8fd
 800b840:	0800b8fd 	.word	0x0800b8fd
 800b844:	0800b8fd 	.word	0x0800b8fd
 800b848:	0800b8fd 	.word	0x0800b8fd
 800b84c:	0800b8d1 	.word	0x0800b8d1
 800b850:	0800b8fd 	.word	0x0800b8fd
 800b854:	0800b8fd 	.word	0x0800b8fd
 800b858:	0800b8fd 	.word	0x0800b8fd
 800b85c:	0800b8fd 	.word	0x0800b8fd
 800b860:	0800b8fd 	.word	0x0800b8fd
 800b864:	0800b8fd 	.word	0x0800b8fd
 800b868:	0800b8fd 	.word	0x0800b8fd
 800b86c:	0800b8e7 	.word	0x0800b8e7
 800b870:	0800b8fd 	.word	0x0800b8fd
 800b874:	0800b8fd 	.word	0x0800b8fd
 800b878:	0800b8fd 	.word	0x0800b8fd
 800b87c:	0800b8fd 	.word	0x0800b8fd
 800b880:	0800b8fd 	.word	0x0800b8fd
 800b884:	0800b8fd 	.word	0x0800b8fd
 800b888:	0800b8fd 	.word	0x0800b8fd
 800b88c:	0800b905 	.word	0x0800b905
 800b890:	0800b8fd 	.word	0x0800b8fd
 800b894:	0800b8fd 	.word	0x0800b8fd
 800b898:	0800b8fd 	.word	0x0800b8fd
 800b89c:	0800b8fd 	.word	0x0800b8fd
 800b8a0:	0800b8fd 	.word	0x0800b8fd
 800b8a4:	0800b8fd 	.word	0x0800b8fd
 800b8a8:	0800b8fd 	.word	0x0800b8fd
 800b8ac:	0800b905 	.word	0x0800b905
 800b8b0:	0800b8fd 	.word	0x0800b8fd
 800b8b4:	0800b8fd 	.word	0x0800b8fd
 800b8b8:	0800b8fd 	.word	0x0800b8fd
 800b8bc:	0800b8fd 	.word	0x0800b8fd
 800b8c0:	0800b8fd 	.word	0x0800b8fd
 800b8c4:	0800b8fd 	.word	0x0800b8fd
 800b8c8:	0800b8fd 	.word	0x0800b8fd
 800b8cc:	0800b905 	.word	0x0800b905
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f001 fe95 	bl	800d608 <RCCEx_PLL2_Config>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b8e4:	e00f      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8ea:	3328      	adds	r3, #40	@ 0x28
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f001 ff3c 	bl	800d76c <RCCEx_PLL3_Config>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b8fa:	e004      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b902:	e000      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b904:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b90e:	4bbf      	ldr	r3, [pc, #764]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b912:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b91a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b91c:	4abb      	ldr	r2, [pc, #748]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b91e:	430b      	orrs	r3, r1
 800b920:	6553      	str	r3, [r2, #84]	@ 0x54
 800b922:	e003      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f002 0302 	and.w	r3, r2, #2
 800b938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b93c:	2300      	movs	r3, #0
 800b93e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b942:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b946:	460b      	mov	r3, r1
 800b948:	4313      	orrs	r3, r2
 800b94a:	d041      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b950:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b952:	2b05      	cmp	r3, #5
 800b954:	d824      	bhi.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b956:	a201      	add	r2, pc, #4	@ (adr r2, 800b95c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95c:	0800b9a9 	.word	0x0800b9a9
 800b960:	0800b975 	.word	0x0800b975
 800b964:	0800b98b 	.word	0x0800b98b
 800b968:	0800b9a9 	.word	0x0800b9a9
 800b96c:	0800b9a9 	.word	0x0800b9a9
 800b970:	0800b9a9 	.word	0x0800b9a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b978:	3308      	adds	r3, #8
 800b97a:	2101      	movs	r1, #1
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 fe43 	bl	800d608 <RCCEx_PLL2_Config>
 800b982:	4603      	mov	r3, r0
 800b984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b988:	e00f      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b98e:	3328      	adds	r3, #40	@ 0x28
 800b990:	2101      	movs	r1, #1
 800b992:	4618      	mov	r0, r3
 800b994:	f001 feea 	bl	800d76c <RCCEx_PLL3_Config>
 800b998:	4603      	mov	r3, r0
 800b99a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b99e:	e004      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b9a6:	e000      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b9a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10a      	bne.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b9b2:	4b96      	ldr	r3, [pc, #600]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b6:	f023 0107 	bic.w	r1, r3, #7
 800b9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b9c0:	4a92      	ldr	r2, [pc, #584]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9c2:	430b      	orrs	r3, r1
 800b9c4:	6553      	str	r3, [r2, #84]	@ 0x54
 800b9c6:	e003      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b9cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f002 0304 	and.w	r3, r2, #4
 800b9dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b9e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	d044      	beq.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9f8:	2b05      	cmp	r3, #5
 800b9fa:	d825      	bhi.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b9fc:	a201      	add	r2, pc, #4	@ (adr r2, 800ba04 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba02:	bf00      	nop
 800ba04:	0800ba51 	.word	0x0800ba51
 800ba08:	0800ba1d 	.word	0x0800ba1d
 800ba0c:	0800ba33 	.word	0x0800ba33
 800ba10:	0800ba51 	.word	0x0800ba51
 800ba14:	0800ba51 	.word	0x0800ba51
 800ba18:	0800ba51 	.word	0x0800ba51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba20:	3308      	adds	r3, #8
 800ba22:	2101      	movs	r1, #1
 800ba24:	4618      	mov	r0, r3
 800ba26:	f001 fdef 	bl	800d608 <RCCEx_PLL2_Config>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba30:	e00f      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba36:	3328      	adds	r3, #40	@ 0x28
 800ba38:	2101      	movs	r1, #1
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f001 fe96 	bl	800d76c <RCCEx_PLL3_Config>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba46:	e004      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ba4e:	e000      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ba50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10b      	bne.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba5a:	4b6c      	ldr	r3, [pc, #432]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba5e:	f023 0107 	bic.w	r1, r3, #7
 800ba62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba6a:	4a68      	ldr	r2, [pc, #416]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba6c:	430b      	orrs	r3, r1
 800ba6e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba70:	e003      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ba7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	f002 0320 	and.w	r3, r2, #32
 800ba86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ba90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ba94:	460b      	mov	r3, r1
 800ba96:	4313      	orrs	r3, r2
 800ba98:	d055      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ba9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800baa6:	d033      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800baa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800baac:	d82c      	bhi.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800baae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bab2:	d02f      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bab8:	d826      	bhi.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800baba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800babe:	d02b      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bac0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bac4:	d820      	bhi.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baca:	d012      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bacc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bad0:	d81a      	bhi.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d022      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bada:	d115      	bne.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800badc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bae0:	3308      	adds	r3, #8
 800bae2:	2100      	movs	r1, #0
 800bae4:	4618      	mov	r0, r3
 800bae6:	f001 fd8f 	bl	800d608 <RCCEx_PLL2_Config>
 800baea:	4603      	mov	r3, r0
 800baec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800baf0:	e015      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800baf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800baf6:	3328      	adds	r3, #40	@ 0x28
 800baf8:	2102      	movs	r1, #2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f001 fe36 	bl	800d76c <RCCEx_PLL3_Config>
 800bb00:	4603      	mov	r3, r0
 800bb02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb06:	e00a      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bb0e:	e006      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb10:	bf00      	nop
 800bb12:	e004      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb14:	bf00      	nop
 800bb16:	e002      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb18:	bf00      	nop
 800bb1a:	e000      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10b      	bne.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb26:	4b39      	ldr	r3, [pc, #228]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb36:	4a35      	ldr	r2, [pc, #212]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	6553      	str	r3, [r2, #84]	@ 0x54
 800bb3c:	e003      	b.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800bb52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bb56:	2300      	movs	r3, #0
 800bb58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4313      	orrs	r3, r2
 800bb64:	d058      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bb66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bb6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800bb72:	d033      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bb74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800bb78:	d82c      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb7e:	d02f      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bb80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb84:	d826      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb8a:	d02b      	beq.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bb8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb90:	d820      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb96:	d012      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bb98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb9c:	d81a      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d022      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bba6:	d115      	bne.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbac:	3308      	adds	r3, #8
 800bbae:	2100      	movs	r1, #0
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f001 fd29 	bl	800d608 <RCCEx_PLL2_Config>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bbbc:	e015      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbc2:	3328      	adds	r3, #40	@ 0x28
 800bbc4:	2102      	movs	r1, #2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f001 fdd0 	bl	800d76c <RCCEx_PLL3_Config>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bbd2:	e00a      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bbda:	e006      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bbdc:	bf00      	nop
 800bbde:	e004      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bbe0:	bf00      	nop
 800bbe2:	e002      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bbe4:	bf00      	nop
 800bbe6:	e000      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bbe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10e      	bne.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bbf2:	4b06      	ldr	r3, [pc, #24]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbf6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800bbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bc02:	4a02      	ldr	r2, [pc, #8]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc04:	430b      	orrs	r3, r1
 800bc06:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc08:	e006      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bc0a:	bf00      	nop
 800bc0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bc14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800bc24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bc2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800bc32:	460b      	mov	r3, r1
 800bc34:	4313      	orrs	r3, r2
 800bc36:	d055      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bc38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc40:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bc44:	d033      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bc46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bc4a:	d82c      	bhi.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc50:	d02f      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bc52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc56:	d826      	bhi.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bc5c:	d02b      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bc5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bc62:	d820      	bhi.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc68:	d012      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bc6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc6e:	d81a      	bhi.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d022      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bc74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc78:	d115      	bne.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc7e:	3308      	adds	r3, #8
 800bc80:	2100      	movs	r1, #0
 800bc82:	4618      	mov	r0, r3
 800bc84:	f001 fcc0 	bl	800d608 <RCCEx_PLL2_Config>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bc8e:	e015      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc94:	3328      	adds	r3, #40	@ 0x28
 800bc96:	2102      	movs	r1, #2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f001 fd67 	bl	800d76c <RCCEx_PLL3_Config>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bca4:	e00a      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bcac:	e006      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcae:	bf00      	nop
 800bcb0:	e004      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcb2:	bf00      	nop
 800bcb4:	e002      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcb6:	bf00      	nop
 800bcb8:	e000      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10b      	bne.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bcc4:	4ba1      	ldr	r3, [pc, #644]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcc8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800bccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bcd4:	4a9d      	ldr	r2, [pc, #628]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcd6:	430b      	orrs	r3, r1
 800bcd8:	6593      	str	r3, [r2, #88]	@ 0x58
 800bcda:	e003      	b.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bce0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f002 0308 	and.w	r3, r2, #8
 800bcf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bcfa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4313      	orrs	r3, r2
 800bd02:	d01e      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bd04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd10:	d10c      	bne.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd16:	3328      	adds	r3, #40	@ 0x28
 800bd18:	2102      	movs	r1, #2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f001 fd26 	bl	800d76c <RCCEx_PLL3_Config>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d002      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bd2c:	4b87      	ldr	r3, [pc, #540]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd30:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd3c:	4a83      	ldr	r2, [pc, #524]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd3e:	430b      	orrs	r3, r1
 800bd40:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	f002 0310 	and.w	r3, r2, #16
 800bd4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bd52:	2300      	movs	r3, #0
 800bd54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bd58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	d01e      	beq.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bd62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd6e:	d10c      	bne.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd74:	3328      	adds	r3, #40	@ 0x28
 800bd76:	2102      	movs	r1, #2
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f001 fcf7 	bl	800d76c <RCCEx_PLL3_Config>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd8a:	4b70      	ldr	r3, [pc, #448]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bd92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd9a:	4a6c      	ldr	r2, [pc, #432]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800bdac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bdb6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	d03e      	beq.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bdc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bdc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdcc:	d022      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bdce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdd2:	d81b      	bhi.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bdd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bddc:	d00b      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bdde:	e015      	b.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bde0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bde4:	3308      	adds	r3, #8
 800bde6:	2100      	movs	r1, #0
 800bde8:	4618      	mov	r0, r3
 800bdea:	f001 fc0d 	bl	800d608 <RCCEx_PLL2_Config>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bdf4:	e00f      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdfa:	3328      	adds	r3, #40	@ 0x28
 800bdfc:	2102      	movs	r1, #2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 fcb4 	bl	800d76c <RCCEx_PLL3_Config>
 800be04:	4603      	mov	r3, r0
 800be06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be0a:	e004      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800be12:	e000      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800be14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10b      	bne.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be1e:	4b4b      	ldr	r3, [pc, #300]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800be26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800be2e:	4a47      	ldr	r2, [pc, #284]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be30:	430b      	orrs	r3, r1
 800be32:	6593      	str	r3, [r2, #88]	@ 0x58
 800be34:	e003      	b.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800be3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800be4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be4c:	2300      	movs	r3, #0
 800be4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800be50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800be54:	460b      	mov	r3, r1
 800be56:	4313      	orrs	r3, r2
 800be58:	d03b      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800be5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800be66:	d01f      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800be68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800be6c:	d818      	bhi.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800be6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be72:	d003      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800be74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be78:	d007      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800be7a:	e011      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be7c:	4b33      	ldr	r3, [pc, #204]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be80:	4a32      	ldr	r2, [pc, #200]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800be88:	e00f      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be8e:	3328      	adds	r3, #40	@ 0x28
 800be90:	2101      	movs	r1, #1
 800be92:	4618      	mov	r0, r3
 800be94:	f001 fc6a 	bl	800d76c <RCCEx_PLL3_Config>
 800be98:	4603      	mov	r3, r0
 800be9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800be9e:	e004      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bea6:	e000      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10b      	bne.n	800beca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800beb2:	4b26      	ldr	r3, [pc, #152]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beb6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800beba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bec2:	4a22      	ldr	r2, [pc, #136]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bec4:	430b      	orrs	r3, r1
 800bec6:	6553      	str	r3, [r2, #84]	@ 0x54
 800bec8:	e003      	b.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bede:	673b      	str	r3, [r7, #112]	@ 0x70
 800bee0:	2300      	movs	r3, #0
 800bee2:	677b      	str	r3, [r7, #116]	@ 0x74
 800bee4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bee8:	460b      	mov	r3, r1
 800beea:	4313      	orrs	r3, r2
 800beec:	d034      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800beee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d003      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800befc:	d007      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800befe:	e011      	b.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf00:	4b12      	ldr	r3, [pc, #72]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf04:	4a11      	ldr	r2, [pc, #68]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf0c:	e00e      	b.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf12:	3308      	adds	r3, #8
 800bf14:	2102      	movs	r1, #2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f001 fb76 	bl	800d608 <RCCEx_PLL2_Config>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf22:	e003      	b.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bf2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10d      	bne.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bf34:	4b05      	ldr	r3, [pc, #20]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf42:	4a02      	ldr	r2, [pc, #8]	@ (800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf44:	430b      	orrs	r3, r1
 800bf46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bf48:	e006      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bf4a:	bf00      	nop
 800bf4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bf54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800bf64:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf66:	2300      	movs	r3, #0
 800bf68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bf6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4313      	orrs	r3, r2
 800bf72:	d00c      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf78:	3328      	adds	r3, #40	@ 0x28
 800bf7a:	2102      	movs	r1, #2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 fbf5 	bl	800d76c <RCCEx_PLL3_Config>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bf8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bf9a:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	667b      	str	r3, [r7, #100]	@ 0x64
 800bfa0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	d038      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bfaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfb6:	d018      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bfb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfbc:	d811      	bhi.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bfbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfc2:	d014      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bfc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfc8:	d80b      	bhi.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d011      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bfce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfd2:	d106      	bne.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfd4:	4bc3      	ldr	r3, [pc, #780]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd8:	4ac2      	ldr	r2, [pc, #776]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bfde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bfe0:	e008      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bfe8:	e004      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bfea:	bf00      	nop
 800bfec:	e002      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bfee:	bf00      	nop
 800bff0:	e000      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10b      	bne.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bffc:	4bb9      	ldr	r3, [pc, #740]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c000:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c00c:	4ab5      	ldr	r2, [pc, #724]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c00e:	430b      	orrs	r3, r1
 800c010:	6553      	str	r3, [r2, #84]	@ 0x54
 800c012:	e003      	b.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c028:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c02a:	2300      	movs	r3, #0
 800c02c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c02e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c032:	460b      	mov	r3, r1
 800c034:	4313      	orrs	r3, r2
 800c036:	d009      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c038:	4baa      	ldr	r3, [pc, #680]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c03c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c046:	4aa7      	ldr	r2, [pc, #668]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c048:	430b      	orrs	r3, r1
 800c04a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c058:	653b      	str	r3, [r7, #80]	@ 0x50
 800c05a:	2300      	movs	r3, #0
 800c05c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c05e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c062:	460b      	mov	r3, r1
 800c064:	4313      	orrs	r3, r2
 800c066:	d00a      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c068:	4b9e      	ldr	r3, [pc, #632]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800c070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c074:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c078:	4a9a      	ldr	r2, [pc, #616]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c07a:	430b      	orrs	r3, r1
 800c07c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c08a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c08c:	2300      	movs	r3, #0
 800c08e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c090:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c094:	460b      	mov	r3, r1
 800c096:	4313      	orrs	r3, r2
 800c098:	d009      	beq.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c09a:	4b92      	ldr	r3, [pc, #584]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c09c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c09e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0a8:	4a8e      	ldr	r2, [pc, #568]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0aa:	430b      	orrs	r3, r1
 800c0ac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c0ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0bc:	2300      	movs	r3, #0
 800c0be:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	d00e      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0ca:	4b86      	ldr	r3, [pc, #536]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	4a85      	ldr	r2, [pc, #532]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c0d4:	6113      	str	r3, [r2, #16]
 800c0d6:	4b83      	ldr	r3, [pc, #524]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0d8:	6919      	ldr	r1, [r3, #16]
 800c0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c0e2:	4a80      	ldr	r2, [pc, #512]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0e4:	430b      	orrs	r3, r1
 800c0e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c0f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c0fe:	460b      	mov	r3, r1
 800c100:	4313      	orrs	r3, r2
 800c102:	d009      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c104:	4b77      	ldr	r3, [pc, #476]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c108:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c112:	4a74      	ldr	r2, [pc, #464]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c114:	430b      	orrs	r3, r1
 800c116:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c124:	633b      	str	r3, [r7, #48]	@ 0x30
 800c126:	2300      	movs	r3, #0
 800c128:	637b      	str	r3, [r7, #52]	@ 0x34
 800c12a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c12e:	460b      	mov	r3, r1
 800c130:	4313      	orrs	r3, r2
 800c132:	d00a      	beq.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c134:	4b6b      	ldr	r3, [pc, #428]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c138:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c144:	4a67      	ldr	r2, [pc, #412]	@ (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c146:	430b      	orrs	r3, r1
 800c148:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c152:	2100      	movs	r1, #0
 800c154:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c15c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c160:	460b      	mov	r3, r1
 800c162:	4313      	orrs	r3, r2
 800c164:	d011      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c16a:	3308      	adds	r3, #8
 800c16c:	2100      	movs	r1, #0
 800c16e:	4618      	mov	r0, r3
 800c170:	f001 fa4a 	bl	800d608 <RCCEx_PLL2_Config>
 800c174:	4603      	mov	r3, r0
 800c176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c17a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	2100      	movs	r1, #0
 800c194:	6239      	str	r1, [r7, #32]
 800c196:	f003 0302 	and.w	r3, r3, #2
 800c19a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c19c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	d011      	beq.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	2101      	movs	r1, #1
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f001 fa2a 	bl	800d608 <RCCEx_PLL2_Config>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c1ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d003      	beq.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c1c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	61b9      	str	r1, [r7, #24]
 800c1d6:	f003 0304 	and.w	r3, r3, #4
 800c1da:	61fb      	str	r3, [r7, #28]
 800c1dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	d011      	beq.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1ea:	3308      	adds	r3, #8
 800c1ec:	2102      	movs	r1, #2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f001 fa0a 	bl	800d608 <RCCEx_PLL2_Config>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c1fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c212:	2100      	movs	r1, #0
 800c214:	6139      	str	r1, [r7, #16]
 800c216:	f003 0308 	and.w	r3, r3, #8
 800c21a:	617b      	str	r3, [r7, #20]
 800c21c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c220:	460b      	mov	r3, r1
 800c222:	4313      	orrs	r3, r2
 800c224:	d011      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c22a:	3328      	adds	r3, #40	@ 0x28
 800c22c:	2100      	movs	r1, #0
 800c22e:	4618      	mov	r0, r3
 800c230:	f001 fa9c 	bl	800d76c <RCCEx_PLL3_Config>
 800c234:	4603      	mov	r3, r0
 800c236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800c23a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	2100      	movs	r1, #0
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	f003 0310 	and.w	r3, r3, #16
 800c25a:	60fb      	str	r3, [r7, #12]
 800c25c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c260:	460b      	mov	r3, r1
 800c262:	4313      	orrs	r3, r2
 800c264:	d011      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c26a:	3328      	adds	r3, #40	@ 0x28
 800c26c:	2101      	movs	r1, #1
 800c26e:	4618      	mov	r0, r3
 800c270:	f001 fa7c 	bl	800d76c <RCCEx_PLL3_Config>
 800c274:	4603      	mov	r3, r0
 800c276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c27a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c292:	2100      	movs	r1, #0
 800c294:	6039      	str	r1, [r7, #0]
 800c296:	f003 0320 	and.w	r3, r3, #32
 800c29a:	607b      	str	r3, [r7, #4]
 800c29c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	d011      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2aa:	3328      	adds	r3, #40	@ 0x28
 800c2ac:	2102      	movs	r1, #2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f001 fa5c 	bl	800d76c <RCCEx_PLL3_Config>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c2c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800c2ca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e000      	b.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c2e4:	58024400 	.word	0x58024400

0800c2e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b090      	sub	sp, #64	@ 0x40
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c2f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c2fa:	430b      	orrs	r3, r1
 800c2fc:	f040 8094 	bne.w	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c300:	4b9e      	ldr	r3, [pc, #632]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30c:	2b04      	cmp	r3, #4
 800c30e:	f200 8087 	bhi.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c312:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c32d 	.word	0x0800c32d
 800c31c:	0800c355 	.word	0x0800c355
 800c320:	0800c37d 	.word	0x0800c37d
 800c324:	0800c419 	.word	0x0800c419
 800c328:	0800c3a5 	.word	0x0800c3a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c32c:	4b93      	ldr	r3, [pc, #588]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c338:	d108      	bne.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c33a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 f810 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c348:	f000 bd45 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c350:	f000 bd41 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c354:	4b89      	ldr	r3, [pc, #548]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c35c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c360:	d108      	bne.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c362:	f107 0318 	add.w	r3, r7, #24
 800c366:	4618      	mov	r0, r3
 800c368:	f000 fd54 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c370:	f000 bd31 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c378:	f000 bd2d 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c37c:	4b7f      	ldr	r3, [pc, #508]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c388:	d108      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c38a:	f107 030c 	add.w	r3, r7, #12
 800c38e:	4618      	mov	r0, r3
 800c390:	f000 fe94 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c398:	f000 bd1d 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3a0:	f000 bd19 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3a4:	4b75      	ldr	r3, [pc, #468]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c3ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3ae:	4b73      	ldr	r3, [pc, #460]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	2b04      	cmp	r3, #4
 800c3b8:	d10c      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d109      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3c0:	4b6e      	ldr	r3, [pc, #440]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	08db      	lsrs	r3, r3, #3
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	4a6d      	ldr	r2, [pc, #436]	@ (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c3cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3d2:	e01f      	b.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3d4:	4b69      	ldr	r3, [pc, #420]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3e0:	d106      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3e8:	d102      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3ea:	4b66      	ldr	r3, [pc, #408]	@ (800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3ee:	e011      	b.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3f0:	4b62      	ldr	r3, [pc, #392]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3fc:	d106      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c404:	d102      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c406:	4b60      	ldr	r3, [pc, #384]	@ (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c40a:	e003      	b.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c410:	f000 bce1 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c414:	f000 bcdf 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c418:	4b5c      	ldr	r3, [pc, #368]	@ (800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c41c:	f000 bcdb 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c424:	f000 bcd7 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c42c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800c430:	430b      	orrs	r3, r1
 800c432:	f040 80ad 	bne.w	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c436:	4b51      	ldr	r3, [pc, #324]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c43a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800c43e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c446:	d056      	beq.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c44e:	f200 8090 	bhi.w	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c454:	2bc0      	cmp	r3, #192	@ 0xc0
 800c456:	f000 8088 	beq.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45c:	2bc0      	cmp	r3, #192	@ 0xc0
 800c45e:	f200 8088 	bhi.w	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c464:	2b80      	cmp	r3, #128	@ 0x80
 800c466:	d032      	beq.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46a:	2b80      	cmp	r3, #128	@ 0x80
 800c46c:	f200 8081 	bhi.w	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c478:	2b40      	cmp	r3, #64	@ 0x40
 800c47a:	d014      	beq.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c47c:	e079      	b.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c47e:	4b3f      	ldr	r3, [pc, #252]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c48a:	d108      	bne.n	800c49e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c48c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c490:	4618      	mov	r0, r3
 800c492:	f000 ff67 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c49a:	f000 bc9c 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4a2:	f000 bc98 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4a6:	4b35      	ldr	r3, [pc, #212]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c4b2:	d108      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4b4:	f107 0318 	add.w	r3, r7, #24
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 fcab 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c2:	f000 bc88 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4ca:	f000 bc84 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4ce:	4b2b      	ldr	r3, [pc, #172]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4da:	d108      	bne.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4dc:	f107 030c 	add.w	r3, r7, #12
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fdeb 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ea:	f000 bc74 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4f2:	f000 bc70 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4f6:	4b21      	ldr	r3, [pc, #132]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c4fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c500:	4b1e      	ldr	r3, [pc, #120]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 0304 	and.w	r3, r3, #4
 800c508:	2b04      	cmp	r3, #4
 800c50a:	d10c      	bne.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d109      	bne.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c512:	4b1a      	ldr	r3, [pc, #104]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	08db      	lsrs	r3, r3, #3
 800c518:	f003 0303 	and.w	r3, r3, #3
 800c51c:	4a18      	ldr	r2, [pc, #96]	@ (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c51e:	fa22 f303 	lsr.w	r3, r2, r3
 800c522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c524:	e01f      	b.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c526:	4b15      	ldr	r3, [pc, #84]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c52e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c532:	d106      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c53a:	d102      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c53c:	4b11      	ldr	r3, [pc, #68]	@ (800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c540:	e011      	b.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c542:	4b0e      	ldr	r3, [pc, #56]	@ (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c54a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c54e:	d106      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c556:	d102      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c558:	4b0b      	ldr	r3, [pc, #44]	@ (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c55c:	e003      	b.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c562:	f000 bc38 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c566:	f000 bc36 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c56a:	4b08      	ldr	r3, [pc, #32]	@ (800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c56e:	f000 bc32 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c572:	2300      	movs	r3, #0
 800c574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c576:	f000 bc2e 	b.w	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c57a:	bf00      	nop
 800c57c:	58024400 	.word	0x58024400
 800c580:	03d09000 	.word	0x03d09000
 800c584:	003d0900 	.word	0x003d0900
 800c588:	017d7840 	.word	0x017d7840
 800c58c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c590:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c594:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c598:	430b      	orrs	r3, r1
 800c59a:	f040 809c 	bne.w	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c59e:	4b9e      	ldr	r3, [pc, #632]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5a2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c5a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c5ae:	d054      	beq.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c5b6:	f200 808b 	bhi.w	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c5c0:	f000 8083 	beq.w	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c5ca:	f200 8081 	bhi.w	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c5d4:	d02f      	beq.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c5dc:	d878      	bhi.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d004      	beq.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5ea:	d012      	beq.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c5ec:	e070      	b.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5ee:	4b8a      	ldr	r3, [pc, #552]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c5fa:	d107      	bne.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c600:	4618      	mov	r0, r3
 800c602:	f000 feaf 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c60a:	e3e4      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c610:	e3e1      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c612:	4b81      	ldr	r3, [pc, #516]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c61a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c61e:	d107      	bne.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c620:	f107 0318 	add.w	r3, r7, #24
 800c624:	4618      	mov	r0, r3
 800c626:	f000 fbf5 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c62e:	e3d2      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c630:	2300      	movs	r3, #0
 800c632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c634:	e3cf      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c636:	4b78      	ldr	r3, [pc, #480]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c63e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c642:	d107      	bne.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c644:	f107 030c 	add.w	r3, r7, #12
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 fd37 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c652:	e3c0      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c654:	2300      	movs	r3, #0
 800c656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c658:	e3bd      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c65a:	4b6f      	ldr	r3, [pc, #444]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c65c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c65e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c662:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c664:	4b6c      	ldr	r3, [pc, #432]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0304 	and.w	r3, r3, #4
 800c66c:	2b04      	cmp	r3, #4
 800c66e:	d10c      	bne.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c672:	2b00      	cmp	r3, #0
 800c674:	d109      	bne.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c676:	4b68      	ldr	r3, [pc, #416]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	08db      	lsrs	r3, r3, #3
 800c67c:	f003 0303 	and.w	r3, r3, #3
 800c680:	4a66      	ldr	r2, [pc, #408]	@ (800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c682:	fa22 f303 	lsr.w	r3, r2, r3
 800c686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c688:	e01e      	b.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c68a:	4b63      	ldr	r3, [pc, #396]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c696:	d106      	bne.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c69a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c69e:	d102      	bne.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6a0:	4b5f      	ldr	r3, [pc, #380]	@ (800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6a4:	e010      	b.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6a6:	4b5c      	ldr	r3, [pc, #368]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6b2:	d106      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6ba:	d102      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6bc:	4b59      	ldr	r3, [pc, #356]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6c0:	e002      	b.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c6c6:	e386      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6c8:	e385      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6ca:	4b57      	ldr	r3, [pc, #348]	@ (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6ce:	e382      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6d4:	e37f      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c6d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6da:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c6de:	430b      	orrs	r3, r1
 800c6e0:	f040 80a7 	bne.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c6e4:	4b4c      	ldr	r3, [pc, #304]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6e8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c6ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c6f4:	d055      	beq.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c6fc:	f200 8096 	bhi.w	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c702:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c706:	f000 8084 	beq.w	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c710:	f200 808c 	bhi.w	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c71a:	d030      	beq.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c722:	f200 8083 	bhi.w	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d004      	beq.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c732:	d012      	beq.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c734:	e07a      	b.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c736:	4b38      	ldr	r3, [pc, #224]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c73e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c742:	d107      	bne.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 fe0b 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c752:	e340      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c754:	2300      	movs	r3, #0
 800c756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c758:	e33d      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c75a:	4b2f      	ldr	r3, [pc, #188]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c766:	d107      	bne.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c768:	f107 0318 	add.w	r3, r7, #24
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 fb51 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c776:	e32e      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c778:	2300      	movs	r3, #0
 800c77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c77c:	e32b      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c77e:	4b26      	ldr	r3, [pc, #152]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c78a:	d107      	bne.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c78c:	f107 030c 	add.w	r3, r7, #12
 800c790:	4618      	mov	r0, r3
 800c792:	f000 fc93 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c79a:	e31c      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7a0:	e319      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7a2:	4b1d      	ldr	r3, [pc, #116]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c7aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	d10c      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d109      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7be:	4b16      	ldr	r3, [pc, #88]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	08db      	lsrs	r3, r3, #3
 800c7c4:	f003 0303 	and.w	r3, r3, #3
 800c7c8:	4a14      	ldr	r2, [pc, #80]	@ (800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c7ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7d0:	e01e      	b.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7d2:	4b11      	ldr	r3, [pc, #68]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7de:	d106      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c7e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7e6:	d102      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7ec:	e010      	b.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7fa:	d106      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c802:	d102      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c804:	4b07      	ldr	r3, [pc, #28]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c808:	e002      	b.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c80e:	e2e2      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c810:	e2e1      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c812:	4b05      	ldr	r3, [pc, #20]	@ (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c816:	e2de      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c818:	58024400 	.word	0x58024400
 800c81c:	03d09000 	.word	0x03d09000
 800c820:	003d0900 	.word	0x003d0900
 800c824:	017d7840 	.word	0x017d7840
 800c828:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c82c:	2300      	movs	r3, #0
 800c82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c830:	e2d1      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c836:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c83a:	430b      	orrs	r3, r1
 800c83c:	f040 809c 	bne.w	800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c840:	4b93      	ldr	r3, [pc, #588]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c844:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c848:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c850:	d054      	beq.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c858:	f200 808b 	bhi.w	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c85e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c862:	f000 8083 	beq.w	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c868:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c86c:	f200 8081 	bhi.w	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c876:	d02f      	beq.n	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c87a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c87e:	d878      	bhi.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c882:	2b00      	cmp	r3, #0
 800c884:	d004      	beq.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c88c:	d012      	beq.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c88e:	e070      	b.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c890:	4b7f      	ldr	r3, [pc, #508]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c89c:	d107      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c89e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 fd5e 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ac:	e293      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8b2:	e290      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8b4:	4b76      	ldr	r3, [pc, #472]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c8bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8c0:	d107      	bne.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8c2:	f107 0318 	add.w	r3, r7, #24
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 faa4 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8d0:	e281      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8d6:	e27e      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8d8:	4b6d      	ldr	r3, [pc, #436]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c8e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8e4:	d107      	bne.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8e6:	f107 030c 	add.w	r3, r7, #12
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 fbe6 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8f4:	e26f      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8fa:	e26c      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8fc:	4b64      	ldr	r3, [pc, #400]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c900:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c904:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c906:	4b62      	ldr	r3, [pc, #392]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f003 0304 	and.w	r3, r3, #4
 800c90e:	2b04      	cmp	r3, #4
 800c910:	d10c      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c914:	2b00      	cmp	r3, #0
 800c916:	d109      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c918:	4b5d      	ldr	r3, [pc, #372]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	08db      	lsrs	r3, r3, #3
 800c91e:	f003 0303 	and.w	r3, r3, #3
 800c922:	4a5c      	ldr	r2, [pc, #368]	@ (800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c924:	fa22 f303 	lsr.w	r3, r2, r3
 800c928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c92a:	e01e      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c92c:	4b58      	ldr	r3, [pc, #352]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c938:	d106      	bne.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c93c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c940:	d102      	bne.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c942:	4b55      	ldr	r3, [pc, #340]	@ (800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c946:	e010      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c948:	4b51      	ldr	r3, [pc, #324]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c954:	d106      	bne.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c95c:	d102      	bne.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c95e:	4b4f      	ldr	r3, [pc, #316]	@ (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c962:	e002      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c968:	e235      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c96a:	e234      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c96c:	4b4c      	ldr	r3, [pc, #304]	@ (800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c970:	e231      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c972:	2300      	movs	r3, #0
 800c974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c976:	e22e      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c97c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c980:	430b      	orrs	r3, r1
 800c982:	f040 808f 	bne.w	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c986:	4b42      	ldr	r3, [pc, #264]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c98a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c98e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c992:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c996:	d06b      	beq.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c99e:	d874      	bhi.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c9a6:	d056      	beq.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c9ae:	d86c      	bhi.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c9b6:	d03b      	beq.n	800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c9be:	d864      	bhi.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9c6:	d021      	beq.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9ce:	d85c      	bhi.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d004      	beq.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9dc:	d004      	beq.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c9de:	e054      	b.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c9e0:	f7fe fa4c 	bl	800ae7c <HAL_RCC_GetPCLK1Freq>
 800c9e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9e6:	e1f6      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9e8:	4b29      	ldr	r3, [pc, #164]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9f4:	d107      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9f6:	f107 0318 	add.w	r3, r7, #24
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 fa0a 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca04:	e1e7      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca0a:	e1e4      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca0c:	4b20      	ldr	r3, [pc, #128]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca18:	d107      	bne.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca1a:	f107 030c 	add.w	r3, r7, #12
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 fb4c 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca28:	e1d5      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca2e:	e1d2      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca30:	4b17      	ldr	r3, [pc, #92]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f003 0304 	and.w	r3, r3, #4
 800ca38:	2b04      	cmp	r3, #4
 800ca3a:	d109      	bne.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca3c:	4b14      	ldr	r3, [pc, #80]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	08db      	lsrs	r3, r3, #3
 800ca42:	f003 0303 	and.w	r3, r3, #3
 800ca46:	4a13      	ldr	r2, [pc, #76]	@ (800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ca48:	fa22 f303 	lsr.w	r3, r2, r3
 800ca4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca4e:	e1c2      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca50:	2300      	movs	r3, #0
 800ca52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca54:	e1bf      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ca56:	4b0e      	ldr	r3, [pc, #56]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca62:	d102      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ca64:	4b0c      	ldr	r3, [pc, #48]	@ (800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca68:	e1b5      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca6e:	e1b2      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ca70:	4b07      	ldr	r3, [pc, #28]	@ (800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca7c:	d102      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ca7e:	4b07      	ldr	r3, [pc, #28]	@ (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ca80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca82:	e1a8      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca88:	e1a5      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca8e:	e1a2      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca90:	58024400 	.word	0x58024400
 800ca94:	03d09000 	.word	0x03d09000
 800ca98:	003d0900 	.word	0x003d0900
 800ca9c:	017d7840 	.word	0x017d7840
 800caa0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800caa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caa8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800caac:	430b      	orrs	r3, r1
 800caae:	d173      	bne.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cab0:	4b9c      	ldr	r3, [pc, #624]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cab8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800caba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cabc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cac0:	d02f      	beq.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cac8:	d863      	bhi.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800caca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d004      	beq.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cad6:	d012      	beq.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cad8:	e05b      	b.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cada:	4b92      	ldr	r3, [pc, #584]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cae6:	d107      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cae8:	f107 0318 	add.w	r3, r7, #24
 800caec:	4618      	mov	r0, r3
 800caee:	f000 f991 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf6:	e16e      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cafc:	e16b      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cafe:	4b89      	ldr	r3, [pc, #548]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb0a:	d107      	bne.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb0c:	f107 030c 	add.w	r3, r7, #12
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 fad3 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb1a:	e15c      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb20:	e159      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb22:	4b80      	ldr	r3, [pc, #512]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cb2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb2c:	4b7d      	ldr	r3, [pc, #500]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0304 	and.w	r3, r3, #4
 800cb34:	2b04      	cmp	r3, #4
 800cb36:	d10c      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cb38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d109      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb3e:	4b79      	ldr	r3, [pc, #484]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	08db      	lsrs	r3, r3, #3
 800cb44:	f003 0303 	and.w	r3, r3, #3
 800cb48:	4a77      	ldr	r2, [pc, #476]	@ (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cb4a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb50:	e01e      	b.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb52:	4b74      	ldr	r3, [pc, #464]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb5e:	d106      	bne.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb66:	d102      	bne.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb68:	4b70      	ldr	r3, [pc, #448]	@ (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb6c:	e010      	b.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb6e:	4b6d      	ldr	r3, [pc, #436]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb7a:	d106      	bne.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb82:	d102      	bne.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb84:	4b6a      	ldr	r3, [pc, #424]	@ (800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb88:	e002      	b.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cb8e:	e122      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb90:	e121      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb96:	e11e      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cb98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb9c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cba0:	430b      	orrs	r3, r1
 800cba2:	d133      	bne.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cba4:	4b5f      	ldr	r3, [pc, #380]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cbac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cbae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d004      	beq.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbba:	d012      	beq.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cbbc:	e023      	b.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbbe:	4b59      	ldr	r3, [pc, #356]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbca:	d107      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fbc7 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbda:	e0fc      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbe0:	e0f9      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbe2:	4b50      	ldr	r3, [pc, #320]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cbee:	d107      	bne.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbf0:	f107 0318 	add.w	r3, r7, #24
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f000 f90d 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cbfa:	6a3b      	ldr	r3, [r7, #32]
 800cbfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbfe:	e0ea      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc04:	e0e7      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc0a:	e0e4      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cc0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc10:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800cc14:	430b      	orrs	r3, r1
 800cc16:	f040 808d 	bne.w	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cc1a:	4b42      	ldr	r3, [pc, #264]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc1e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800cc22:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc2a:	d06b      	beq.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc32:	d874      	bhi.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc3a:	d056      	beq.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc42:	d86c      	bhi.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cc4a:	d03b      	beq.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cc52:	d864      	bhi.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc5a:	d021      	beq.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc62:	d85c      	bhi.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d004      	beq.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc70:	d004      	beq.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cc72:	e054      	b.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cc74:	f000 f8b8 	bl	800cde8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc78:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc7a:	e0ac      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc7c:	4b29      	ldr	r3, [pc, #164]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc88:	d107      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc8a:	f107 0318 	add.w	r3, r7, #24
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 f8c0 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc98:	e09d      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc9e:	e09a      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cca0:	4b20      	ldr	r3, [pc, #128]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccac:	d107      	bne.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccae:	f107 030c 	add.w	r3, r7, #12
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 fa02 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccbc:	e08b      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccc2:	e088      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ccc4:	4b17      	ldr	r3, [pc, #92]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f003 0304 	and.w	r3, r3, #4
 800cccc:	2b04      	cmp	r3, #4
 800ccce:	d109      	bne.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccd0:	4b14      	ldr	r3, [pc, #80]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	08db      	lsrs	r3, r3, #3
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	4a13      	ldr	r2, [pc, #76]	@ (800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ccdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce2:	e078      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cce8:	e075      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ccea:	4b0e      	ldr	r3, [pc, #56]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccf6:	d102      	bne.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ccf8:	4b0c      	ldr	r3, [pc, #48]	@ (800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ccfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccfc:	e06b      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd02:	e068      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd04:	4b07      	ldr	r3, [pc, #28]	@ (800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd10:	d102      	bne.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cd12:	4b07      	ldr	r3, [pc, #28]	@ (800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd16:	e05e      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd1c:	e05b      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd22:	e058      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd24:	58024400 	.word	0x58024400
 800cd28:	03d09000 	.word	0x03d09000
 800cd2c:	003d0900 	.word	0x003d0900
 800cd30:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cd34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd38:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800cd3c:	430b      	orrs	r3, r1
 800cd3e:	d148      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cd40:	4b27      	ldr	r3, [pc, #156]	@ (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cd48:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd50:	d02a      	beq.n	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd58:	d838      	bhi.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d004      	beq.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd66:	d00d      	beq.n	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cd68:	e030      	b.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd6a:	4b1d      	ldr	r3, [pc, #116]	@ (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd76:	d102      	bne.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cd78:	4b1a      	ldr	r3, [pc, #104]	@ (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd7c:	e02b      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd82:	e028      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd84:	4b16      	ldr	r3, [pc, #88]	@ (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd90:	d107      	bne.n	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 fae4 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda0:	e019      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cda6:	e016      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cda8:	4b0d      	ldr	r3, [pc, #52]	@ (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cdb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cdb4:	d107      	bne.n	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdb6:	f107 0318 	add.w	r3, r7, #24
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 f82a 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc4:	e007      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdca:	e004      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdd0:	e001      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800cdd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3740      	adds	r7, #64	@ 0x40
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	58024400 	.word	0x58024400
 800cde4:	017d7840 	.word	0x017d7840

0800cde8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cdec:	f7fe f816 	bl	800ae1c <HAL_RCC_GetHCLKFreq>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	4b06      	ldr	r3, [pc, #24]	@ (800ce0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	091b      	lsrs	r3, r3, #4
 800cdf8:	f003 0307 	and.w	r3, r3, #7
 800cdfc:	4904      	ldr	r1, [pc, #16]	@ (800ce10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cdfe:	5ccb      	ldrb	r3, [r1, r3]
 800ce00:	f003 031f 	and.w	r3, r3, #31
 800ce04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	58024400 	.word	0x58024400
 800ce10:	08015f10 	.word	0x08015f10

0800ce14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b089      	sub	sp, #36	@ 0x24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce1c:	4ba1      	ldr	r3, [pc, #644]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce20:	f003 0303 	and.w	r3, r3, #3
 800ce24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ce26:	4b9f      	ldr	r3, [pc, #636]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce2a:	0b1b      	lsrs	r3, r3, #12
 800ce2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ce32:	4b9c      	ldr	r3, [pc, #624]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce36:	091b      	lsrs	r3, r3, #4
 800ce38:	f003 0301 	and.w	r3, r3, #1
 800ce3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ce3e:	4b99      	ldr	r3, [pc, #612]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce42:	08db      	lsrs	r3, r3, #3
 800ce44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	fb02 f303 	mul.w	r3, r2, r3
 800ce4e:	ee07 3a90 	vmov	s15, r3
 800ce52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 8111 	beq.w	800d084 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	f000 8083 	beq.w	800cf70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	f200 80a1 	bhi.w	800cfb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d003      	beq.n	800ce80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d056      	beq.n	800cf2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ce7e:	e099      	b.n	800cfb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce80:	4b88      	ldr	r3, [pc, #544]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d02d      	beq.n	800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce8c:	4b85      	ldr	r3, [pc, #532]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	08db      	lsrs	r3, r3, #3
 800ce92:	f003 0303 	and.w	r3, r3, #3
 800ce96:	4a84      	ldr	r2, [pc, #528]	@ (800d0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ce98:	fa22 f303 	lsr.w	r3, r2, r3
 800ce9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	ee07 3a90 	vmov	s15, r3
 800cea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	ee07 3a90 	vmov	s15, r3
 800ceae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceb6:	4b7b      	ldr	r3, [pc, #492]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cebe:	ee07 3a90 	vmov	s15, r3
 800cec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cec6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ced2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ced6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ceda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cee2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cee6:	e087      	b.n	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	ee07 3a90 	vmov	s15, r3
 800ceee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cefa:	4b6a      	ldr	r3, [pc, #424]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cefc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cefe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf02:	ee07 3a90 	vmov	s15, r3
 800cf06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf2a:	e065      	b.n	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	ee07 3a90 	vmov	s15, r3
 800cf32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf3e:	4b59      	ldr	r3, [pc, #356]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf46:	ee07 3a90 	vmov	s15, r3
 800cf4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf6e:	e043      	b.n	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cf7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf82:	4b48      	ldr	r3, [pc, #288]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf8a:	ee07 3a90 	vmov	s15, r3
 800cf8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf92:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfb2:	e021      	b.n	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	ee07 3a90 	vmov	s15, r3
 800cfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cfc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfc6:	4b37      	ldr	r3, [pc, #220]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfce:	ee07 3a90 	vmov	s15, r3
 800cfd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cff6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cff8:	4b2a      	ldr	r3, [pc, #168]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cffc:	0a5b      	lsrs	r3, r3, #9
 800cffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d002:	ee07 3a90 	vmov	s15, r3
 800d006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d00e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d012:	edd7 6a07 	vldr	s13, [r7, #28]
 800d016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d01e:	ee17 2a90 	vmov	r2, s15
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d026:	4b1f      	ldr	r3, [pc, #124]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d02a:	0c1b      	lsrs	r3, r3, #16
 800d02c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d030:	ee07 3a90 	vmov	s15, r3
 800d034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d038:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d03c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d040:	edd7 6a07 	vldr	s13, [r7, #28]
 800d044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d04c:	ee17 2a90 	vmov	r2, s15
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d054:	4b13      	ldr	r3, [pc, #76]	@ (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d058:	0e1b      	lsrs	r3, r3, #24
 800d05a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d05e:	ee07 3a90 	vmov	s15, r3
 800d062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d066:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d06a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d06e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d07a:	ee17 2a90 	vmov	r2, s15
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d082:	e008      	b.n	800d096 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	609a      	str	r2, [r3, #8]
}
 800d096:	bf00      	nop
 800d098:	3724      	adds	r7, #36	@ 0x24
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	58024400 	.word	0x58024400
 800d0a8:	03d09000 	.word	0x03d09000
 800d0ac:	46000000 	.word	0x46000000
 800d0b0:	4c742400 	.word	0x4c742400
 800d0b4:	4a742400 	.word	0x4a742400
 800d0b8:	4bbebc20 	.word	0x4bbebc20

0800d0bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b089      	sub	sp, #36	@ 0x24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0c4:	4ba1      	ldr	r3, [pc, #644]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d0ce:	4b9f      	ldr	r3, [pc, #636]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0d2:	0d1b      	lsrs	r3, r3, #20
 800d0d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d0da:	4b9c      	ldr	r3, [pc, #624]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0de:	0a1b      	lsrs	r3, r3, #8
 800d0e0:	f003 0301 	and.w	r3, r3, #1
 800d0e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d0e6:	4b99      	ldr	r3, [pc, #612]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ea:	08db      	lsrs	r3, r3, #3
 800d0ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	fb02 f303 	mul.w	r3, r2, r3
 800d0f6:	ee07 3a90 	vmov	s15, r3
 800d0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 8111 	beq.w	800d32c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	f000 8083 	beq.w	800d218 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	2b02      	cmp	r3, #2
 800d116:	f200 80a1 	bhi.w	800d25c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d003      	beq.n	800d128 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d056      	beq.n	800d1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d126:	e099      	b.n	800d25c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d128:	4b88      	ldr	r3, [pc, #544]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f003 0320 	and.w	r3, r3, #32
 800d130:	2b00      	cmp	r3, #0
 800d132:	d02d      	beq.n	800d190 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d134:	4b85      	ldr	r3, [pc, #532]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	08db      	lsrs	r3, r3, #3
 800d13a:	f003 0303 	and.w	r3, r3, #3
 800d13e:	4a84      	ldr	r2, [pc, #528]	@ (800d350 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d140:	fa22 f303 	lsr.w	r3, r2, r3
 800d144:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	ee07 3a90 	vmov	s15, r3
 800d14c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	ee07 3a90 	vmov	s15, r3
 800d156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d15e:	4b7b      	ldr	r3, [pc, #492]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d166:	ee07 3a90 	vmov	s15, r3
 800d16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d172:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d17e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d18a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d18e:	e087      	b.n	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	ee07 3a90 	vmov	s15, r3
 800d196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d358 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1a2:	4b6a      	ldr	r3, [pc, #424]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1aa:	ee07 3a90 	vmov	s15, r3
 800d1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1d2:	e065      	b.n	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	ee07 3a90 	vmov	s15, r3
 800d1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d35c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1e6:	4b59      	ldr	r3, [pc, #356]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ee:	ee07 3a90 	vmov	s15, r3
 800d1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d216:	e043      	b.n	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	ee07 3a90 	vmov	s15, r3
 800d21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d222:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d22a:	4b48      	ldr	r3, [pc, #288]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d22c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d232:	ee07 3a90 	vmov	s15, r3
 800d236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d23a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d23e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d24a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d25a:	e021      	b.n	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	ee07 3a90 	vmov	s15, r3
 800d262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d266:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d35c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d26e:	4b37      	ldr	r3, [pc, #220]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d276:	ee07 3a90 	vmov	s15, r3
 800d27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d27e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d282:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d28e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d29e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d2a0:	4b2a      	ldr	r3, [pc, #168]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2a4:	0a5b      	lsrs	r3, r3, #9
 800d2a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2aa:	ee07 3a90 	vmov	s15, r3
 800d2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2c6:	ee17 2a90 	vmov	r2, s15
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d2ce:	4b1f      	ldr	r3, [pc, #124]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2d2:	0c1b      	lsrs	r3, r3, #16
 800d2d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2d8:	ee07 3a90 	vmov	s15, r3
 800d2dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2f4:	ee17 2a90 	vmov	r2, s15
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d2fc:	4b13      	ldr	r3, [pc, #76]	@ (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d300:	0e1b      	lsrs	r3, r3, #24
 800d302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d312:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d316:	edd7 6a07 	vldr	s13, [r7, #28]
 800d31a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d31e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d322:	ee17 2a90 	vmov	r2, s15
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d32a:	e008      	b.n	800d33e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	609a      	str	r2, [r3, #8]
}
 800d33e:	bf00      	nop
 800d340:	3724      	adds	r7, #36	@ 0x24
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop
 800d34c:	58024400 	.word	0x58024400
 800d350:	03d09000 	.word	0x03d09000
 800d354:	46000000 	.word	0x46000000
 800d358:	4c742400 	.word	0x4c742400
 800d35c:	4a742400 	.word	0x4a742400
 800d360:	4bbebc20 	.word	0x4bbebc20

0800d364 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d364:	b480      	push	{r7}
 800d366:	b089      	sub	sp, #36	@ 0x24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d36c:	4ba0      	ldr	r3, [pc, #640]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d370:	f003 0303 	and.w	r3, r3, #3
 800d374:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d376:	4b9e      	ldr	r3, [pc, #632]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d37a:	091b      	lsrs	r3, r3, #4
 800d37c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d380:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d382:	4b9b      	ldr	r3, [pc, #620]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d386:	f003 0301 	and.w	r3, r3, #1
 800d38a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d38c:	4b98      	ldr	r3, [pc, #608]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d38e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d390:	08db      	lsrs	r3, r3, #3
 800d392:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d396:	693a      	ldr	r2, [r7, #16]
 800d398:	fb02 f303 	mul.w	r3, r2, r3
 800d39c:	ee07 3a90 	vmov	s15, r3
 800d3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f000 8111 	beq.w	800d5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	f000 8083 	beq.w	800d4be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	f200 80a1 	bhi.w	800d502 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d003      	beq.n	800d3ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d056      	beq.n	800d47a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d3cc:	e099      	b.n	800d502 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3ce:	4b88      	ldr	r3, [pc, #544]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 0320 	and.w	r3, r3, #32
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d02d      	beq.n	800d436 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3da:	4b85      	ldr	r3, [pc, #532]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	08db      	lsrs	r3, r3, #3
 800d3e0:	f003 0303 	and.w	r3, r3, #3
 800d3e4:	4a83      	ldr	r2, [pc, #524]	@ (800d5f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d3ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	ee07 3a90 	vmov	s15, r3
 800d3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	ee07 3a90 	vmov	s15, r3
 800d3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d404:	4b7a      	ldr	r3, [pc, #488]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d40c:	ee07 3a90 	vmov	s15, r3
 800d410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d414:	ed97 6a03 	vldr	s12, [r7, #12]
 800d418:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d41c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d424:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d430:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d434:	e087      	b.n	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	ee07 3a90 	vmov	s15, r3
 800d43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d440:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d5fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d448:	4b69      	ldr	r3, [pc, #420]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d450:	ee07 3a90 	vmov	s15, r3
 800d454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d458:	ed97 6a03 	vldr	s12, [r7, #12]
 800d45c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d468:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d46c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d470:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d474:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d478:	e065      	b.n	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	ee07 3a90 	vmov	s15, r3
 800d480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d484:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d600 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d48c:	4b58      	ldr	r3, [pc, #352]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d48e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d494:	ee07 3a90 	vmov	s15, r3
 800d498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d49c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4a0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4bc:	e043      	b.n	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	ee07 3a90 	vmov	s15, r3
 800d4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d604 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d4cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4d0:	4b47      	ldr	r3, [pc, #284]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4d8:	ee07 3a90 	vmov	s15, r3
 800d4dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4e4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d500:	e021      	b.n	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	ee07 3a90 	vmov	s15, r3
 800d508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d50c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d5fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d514:	4b36      	ldr	r3, [pc, #216]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d51c:	ee07 3a90 	vmov	s15, r3
 800d520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d524:	ed97 6a03 	vldr	s12, [r7, #12]
 800d528:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d52c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d534:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d53c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d540:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d544:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d546:	4b2a      	ldr	r3, [pc, #168]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d54a:	0a5b      	lsrs	r3, r3, #9
 800d54c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d550:	ee07 3a90 	vmov	s15, r3
 800d554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d558:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d55c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d560:	edd7 6a07 	vldr	s13, [r7, #28]
 800d564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d56c:	ee17 2a90 	vmov	r2, s15
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d574:	4b1e      	ldr	r3, [pc, #120]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d578:	0c1b      	lsrs	r3, r3, #16
 800d57a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d57e:	ee07 3a90 	vmov	s15, r3
 800d582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d586:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d58a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d58e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d59a:	ee17 2a90 	vmov	r2, s15
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d5a2:	4b13      	ldr	r3, [pc, #76]	@ (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5a6:	0e1b      	lsrs	r3, r3, #24
 800d5a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5ac:	ee07 3a90 	vmov	s15, r3
 800d5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d5b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5c8:	ee17 2a90 	vmov	r2, s15
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d5d0:	e008      	b.n	800d5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	609a      	str	r2, [r3, #8]
}
 800d5e4:	bf00      	nop
 800d5e6:	3724      	adds	r7, #36	@ 0x24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	58024400 	.word	0x58024400
 800d5f4:	03d09000 	.word	0x03d09000
 800d5f8:	46000000 	.word	0x46000000
 800d5fc:	4c742400 	.word	0x4c742400
 800d600:	4a742400 	.word	0x4a742400
 800d604:	4bbebc20 	.word	0x4bbebc20

0800d608 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d616:	4b53      	ldr	r3, [pc, #332]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d61a:	f003 0303 	and.w	r3, r3, #3
 800d61e:	2b03      	cmp	r3, #3
 800d620:	d101      	bne.n	800d626 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d622:	2301      	movs	r3, #1
 800d624:	e099      	b.n	800d75a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d626:	4b4f      	ldr	r3, [pc, #316]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a4e      	ldr	r2, [pc, #312]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d62c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d632:	f7f7 fdb7 	bl	80051a4 <HAL_GetTick>
 800d636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d638:	e008      	b.n	800d64c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d63a:	f7f7 fdb3 	bl	80051a4 <HAL_GetTick>
 800d63e:	4602      	mov	r2, r0
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	2b02      	cmp	r3, #2
 800d646:	d901      	bls.n	800d64c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d648:	2303      	movs	r3, #3
 800d64a:	e086      	b.n	800d75a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d64c:	4b45      	ldr	r3, [pc, #276]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1f0      	bne.n	800d63a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d658:	4b42      	ldr	r3, [pc, #264]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d65c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	031b      	lsls	r3, r3, #12
 800d666:	493f      	ldr	r1, [pc, #252]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d668:	4313      	orrs	r3, r2
 800d66a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	3b01      	subs	r3, #1
 800d672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	025b      	lsls	r3, r3, #9
 800d67e:	b29b      	uxth	r3, r3
 800d680:	431a      	orrs	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	3b01      	subs	r3, #1
 800d688:	041b      	lsls	r3, r3, #16
 800d68a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d68e:	431a      	orrs	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	691b      	ldr	r3, [r3, #16]
 800d694:	3b01      	subs	r3, #1
 800d696:	061b      	lsls	r3, r3, #24
 800d698:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d69c:	4931      	ldr	r1, [pc, #196]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d6a2:	4b30      	ldr	r3, [pc, #192]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	492d      	ldr	r1, [pc, #180]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d6b4:	4b2b      	ldr	r3, [pc, #172]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b8:	f023 0220 	bic.w	r2, r3, #32
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	699b      	ldr	r3, [r3, #24]
 800d6c0:	4928      	ldr	r1, [pc, #160]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d6c6:	4b27      	ldr	r3, [pc, #156]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ca:	4a26      	ldr	r2, [pc, #152]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6cc:	f023 0310 	bic.w	r3, r3, #16
 800d6d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d6d2:	4b24      	ldr	r3, [pc, #144]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6d6:	4b24      	ldr	r3, [pc, #144]	@ (800d768 <RCCEx_PLL2_Config+0x160>)
 800d6d8:	4013      	ands	r3, r2
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	69d2      	ldr	r2, [r2, #28]
 800d6de:	00d2      	lsls	r2, r2, #3
 800d6e0:	4920      	ldr	r1, [pc, #128]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d6e6:	4b1f      	ldr	r3, [pc, #124]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ea:	4a1e      	ldr	r2, [pc, #120]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6ec:	f043 0310 	orr.w	r3, r3, #16
 800d6f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d106      	bne.n	800d706 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d6f8:	4b1a      	ldr	r3, [pc, #104]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6fc:	4a19      	ldr	r2, [pc, #100]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d702:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d704:	e00f      	b.n	800d726 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d106      	bne.n	800d71a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d70c:	4b15      	ldr	r3, [pc, #84]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d710:	4a14      	ldr	r2, [pc, #80]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d716:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d718:	e005      	b.n	800d726 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d71a:	4b12      	ldr	r3, [pc, #72]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d71e:	4a11      	ldr	r2, [pc, #68]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d724:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d726:	4b0f      	ldr	r3, [pc, #60]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a0e      	ldr	r2, [pc, #56]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d72c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d732:	f7f7 fd37 	bl	80051a4 <HAL_GetTick>
 800d736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d738:	e008      	b.n	800d74c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d73a:	f7f7 fd33 	bl	80051a4 <HAL_GetTick>
 800d73e:	4602      	mov	r2, r0
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	2b02      	cmp	r3, #2
 800d746:	d901      	bls.n	800d74c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d748:	2303      	movs	r3, #3
 800d74a:	e006      	b.n	800d75a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d74c:	4b05      	ldr	r3, [pc, #20]	@ (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d754:	2b00      	cmp	r3, #0
 800d756:	d0f0      	beq.n	800d73a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d758:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	58024400 	.word	0x58024400
 800d768:	ffff0007 	.word	0xffff0007

0800d76c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d77a:	4b53      	ldr	r3, [pc, #332]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d77e:	f003 0303 	and.w	r3, r3, #3
 800d782:	2b03      	cmp	r3, #3
 800d784:	d101      	bne.n	800d78a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e099      	b.n	800d8be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d78a:	4b4f      	ldr	r3, [pc, #316]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a4e      	ldr	r2, [pc, #312]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d796:	f7f7 fd05 	bl	80051a4 <HAL_GetTick>
 800d79a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d79c:	e008      	b.n	800d7b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d79e:	f7f7 fd01 	bl	80051a4 <HAL_GetTick>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d901      	bls.n	800d7b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	e086      	b.n	800d8be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d7b0:	4b45      	ldr	r3, [pc, #276]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1f0      	bne.n	800d79e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d7bc:	4b42      	ldr	r3, [pc, #264]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d7be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	051b      	lsls	r3, r3, #20
 800d7ca:	493f      	ldr	r1, [pc, #252]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	628b      	str	r3, [r1, #40]	@ 0x28
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	025b      	lsls	r3, r3, #9
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	431a      	orrs	r2, r3
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	041b      	lsls	r3, r3, #16
 800d7ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d7f2:	431a      	orrs	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	061b      	lsls	r3, r3, #24
 800d7fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d800:	4931      	ldr	r1, [pc, #196]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d802:	4313      	orrs	r3, r2
 800d804:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d806:	4b30      	ldr	r3, [pc, #192]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	695b      	ldr	r3, [r3, #20]
 800d812:	492d      	ldr	r1, [pc, #180]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d814:	4313      	orrs	r3, r2
 800d816:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d818:	4b2b      	ldr	r3, [pc, #172]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d81c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	699b      	ldr	r3, [r3, #24]
 800d824:	4928      	ldr	r1, [pc, #160]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d826:	4313      	orrs	r3, r2
 800d828:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d82a:	4b27      	ldr	r3, [pc, #156]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82e:	4a26      	ldr	r2, [pc, #152]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d834:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d836:	4b24      	ldr	r3, [pc, #144]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d83a:	4b24      	ldr	r3, [pc, #144]	@ (800d8cc <RCCEx_PLL3_Config+0x160>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	69d2      	ldr	r2, [r2, #28]
 800d842:	00d2      	lsls	r2, r2, #3
 800d844:	4920      	ldr	r1, [pc, #128]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d846:	4313      	orrs	r3, r2
 800d848:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d84a:	4b1f      	ldr	r3, [pc, #124]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d84e:	4a1e      	ldr	r2, [pc, #120]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d854:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d106      	bne.n	800d86a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d85c:	4b1a      	ldr	r3, [pc, #104]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d860:	4a19      	ldr	r2, [pc, #100]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d862:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d866:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d868:	e00f      	b.n	800d88a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d106      	bne.n	800d87e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d870:	4b15      	ldr	r3, [pc, #84]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d874:	4a14      	ldr	r2, [pc, #80]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d876:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d87a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d87c:	e005      	b.n	800d88a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d87e:	4b12      	ldr	r3, [pc, #72]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d882:	4a11      	ldr	r2, [pc, #68]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d884:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d888:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d88a:	4b0f      	ldr	r3, [pc, #60]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a0e      	ldr	r2, [pc, #56]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d896:	f7f7 fc85 	bl	80051a4 <HAL_GetTick>
 800d89a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d89c:	e008      	b.n	800d8b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d89e:	f7f7 fc81 	bl	80051a4 <HAL_GetTick>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d901      	bls.n	800d8b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	e006      	b.n	800d8be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d8b0:	4b05      	ldr	r3, [pc, #20]	@ (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d0f0      	beq.n	800d89e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	58024400 	.word	0x58024400
 800d8cc:	ffff0007 	.word	0xffff0007

0800d8d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e10f      	b.n	800db02 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a87      	ldr	r2, [pc, #540]	@ (800db0c <HAL_SPI_Init+0x23c>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d00f      	beq.n	800d912 <HAL_SPI_Init+0x42>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a86      	ldr	r2, [pc, #536]	@ (800db10 <HAL_SPI_Init+0x240>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d00a      	beq.n	800d912 <HAL_SPI_Init+0x42>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a84      	ldr	r2, [pc, #528]	@ (800db14 <HAL_SPI_Init+0x244>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d005      	beq.n	800d912 <HAL_SPI_Init+0x42>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	2b0f      	cmp	r3, #15
 800d90c:	d901      	bls.n	800d912 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e0f7      	b.n	800db02 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 fef6 	bl	800e704 <SPI_GetPacketSize>
 800d918:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a7b      	ldr	r2, [pc, #492]	@ (800db0c <HAL_SPI_Init+0x23c>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d00c      	beq.n	800d93e <HAL_SPI_Init+0x6e>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a79      	ldr	r2, [pc, #484]	@ (800db10 <HAL_SPI_Init+0x240>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d007      	beq.n	800d93e <HAL_SPI_Init+0x6e>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a78      	ldr	r2, [pc, #480]	@ (800db14 <HAL_SPI_Init+0x244>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d002      	beq.n	800d93e <HAL_SPI_Init+0x6e>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b08      	cmp	r3, #8
 800d93c:	d811      	bhi.n	800d962 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d942:	4a72      	ldr	r2, [pc, #456]	@ (800db0c <HAL_SPI_Init+0x23c>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d009      	beq.n	800d95c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a70      	ldr	r2, [pc, #448]	@ (800db10 <HAL_SPI_Init+0x240>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d004      	beq.n	800d95c <HAL_SPI_Init+0x8c>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a6f      	ldr	r2, [pc, #444]	@ (800db14 <HAL_SPI_Init+0x244>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d104      	bne.n	800d966 <HAL_SPI_Init+0x96>
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2b10      	cmp	r3, #16
 800d960:	d901      	bls.n	800d966 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	e0cd      	b.n	800db02 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7f5 feb4 	bl	80036e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2202      	movs	r2, #2
 800d984:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f022 0201 	bic.w	r2, r2, #1
 800d996:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800d9a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	699b      	ldr	r3, [r3, #24]
 800d9a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d9ac:	d119      	bne.n	800d9e2 <HAL_SPI_Init+0x112>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9b6:	d103      	bne.n	800d9c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d008      	beq.n	800d9d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10c      	bne.n	800d9e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d9d0:	d107      	bne.n	800d9e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d9e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00f      	beq.n	800da0e <HAL_SPI_Init+0x13e>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	2b06      	cmp	r3, #6
 800d9f4:	d90b      	bls.n	800da0e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	430a      	orrs	r2, r1
 800da0a:	601a      	str	r2, [r3, #0]
 800da0c:	e007      	b.n	800da1e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800da1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	69da      	ldr	r2, [r3, #28]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da26:	431a      	orrs	r2, r3
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	431a      	orrs	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da30:	ea42 0103 	orr.w	r1, r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	68da      	ldr	r2, [r3, #12]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	430a      	orrs	r2, r1
 800da3e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da48:	431a      	orrs	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da4e:	431a      	orrs	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	431a      	orrs	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	431a      	orrs	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	695b      	ldr	r3, [r3, #20]
 800da60:	431a      	orrs	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6a1b      	ldr	r3, [r3, #32]
 800da66:	431a      	orrs	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	431a      	orrs	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da72:	431a      	orrs	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	431a      	orrs	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da7e:	ea42 0103 	orr.w	r1, r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	430a      	orrs	r2, r1
 800da8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d113      	bne.n	800dabe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800daa8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dabc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f022 0201 	bic.w	r2, r2, #1
 800dacc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00a      	beq.n	800daf0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	430a      	orrs	r2, r1
 800daee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	40013000 	.word	0x40013000
 800db10:	40003800 	.word	0x40003800
 800db14:	40003c00 	.word	0x40003c00

0800db18 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b088      	sub	sp, #32
 800db1c:	af02      	add	r7, sp, #8
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	603b      	str	r3, [r7, #0]
 800db24:	4613      	mov	r3, r2
 800db26:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	3320      	adds	r3, #32
 800db2e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db30:	f7f7 fb38 	bl	80051a4 <HAL_GetTick>
 800db34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d001      	beq.n	800db46 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800db42:	2302      	movs	r3, #2
 800db44:	e1d1      	b.n	800deea <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <HAL_SPI_Transmit+0x3a>
 800db4c:	88fb      	ldrh	r3, [r7, #6]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d101      	bne.n	800db56 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800db52:	2301      	movs	r3, #1
 800db54:	e1c9      	b.n	800deea <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d101      	bne.n	800db64 <HAL_SPI_Transmit+0x4c>
 800db60:	2302      	movs	r3, #2
 800db62:	e1c2      	b.n	800deea <HAL_SPI_Transmit+0x3d2>
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2203      	movs	r2, #3
 800db70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2200      	movs	r2, #0
 800db78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	68ba      	ldr	r2, [r7, #8]
 800db80:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	88fa      	ldrh	r2, [r7, #6]
 800db86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	88fa      	ldrh	r2, [r7, #6]
 800db8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2200      	movs	r2, #0
 800dba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800dbbc:	d108      	bne.n	800dbd0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	e009      	b.n	800dbe4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800dbe2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	685a      	ldr	r2, [r3, #4]
 800dbea:	4b96      	ldr	r3, [pc, #600]	@ (800de44 <HAL_SPI_Transmit+0x32c>)
 800dbec:	4013      	ands	r3, r2
 800dbee:	88f9      	ldrh	r1, [r7, #6]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	6812      	ldr	r2, [r2, #0]
 800dbf4:	430b      	orrs	r3, r1
 800dbf6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f042 0201 	orr.w	r2, r2, #1
 800dc06:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc10:	d107      	bne.n	800dc22 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	2b0f      	cmp	r3, #15
 800dc28:	d947      	bls.n	800dcba <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dc2a:	e03f      	b.n	800dcac <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	695b      	ldr	r3, [r3, #20]
 800dc32:	f003 0302 	and.w	r3, r3, #2
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d114      	bne.n	800dc64 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6812      	ldr	r2, [r2, #0]
 800dc44:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc4a:	1d1a      	adds	r2, r3, #4
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800dc62:	e023      	b.n	800dcac <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc64:	f7f7 fa9e 	bl	80051a4 <HAL_GetTick>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	683a      	ldr	r2, [r7, #0]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d803      	bhi.n	800dc7c <HAL_SPI_Transmit+0x164>
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc7a:	d102      	bne.n	800dc82 <HAL_SPI_Transmit+0x16a>
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d114      	bne.n	800dcac <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	f000 fc70 	bl	800e568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	e11e      	b.n	800deea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1b9      	bne.n	800dc2c <HAL_SPI_Transmit+0x114>
 800dcb8:	e0f1      	b.n	800de9e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	2b07      	cmp	r3, #7
 800dcc0:	f240 80e6 	bls.w	800de90 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dcc4:	e05d      	b.n	800dd82 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	f003 0302 	and.w	r3, r3, #2
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d132      	bne.n	800dd3a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d918      	bls.n	800dd12 <HAL_SPI_Transmit+0x1fa>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d014      	beq.n	800dd12 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6812      	ldr	r2, [r2, #0]
 800dcf2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcf8:	1d1a      	adds	r2, r3, #4
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	3b02      	subs	r3, #2
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800dd10:	e037      	b.n	800dd82 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd16:	881a      	ldrh	r2, [r3, #0]
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd20:	1c9a      	adds	r2, r3, #2
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800dd38:	e023      	b.n	800dd82 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd3a:	f7f7 fa33 	bl	80051a4 <HAL_GetTick>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d803      	bhi.n	800dd52 <HAL_SPI_Transmit+0x23a>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd50:	d102      	bne.n	800dd58 <HAL_SPI_Transmit+0x240>
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d114      	bne.n	800dd82 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f000 fc05 	bl	800e568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2201      	movs	r2, #1
 800dd72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	e0b3      	b.n	800deea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d19b      	bne.n	800dcc6 <HAL_SPI_Transmit+0x1ae>
 800dd8e:	e086      	b.n	800de9e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	695b      	ldr	r3, [r3, #20]
 800dd96:	f003 0302 	and.w	r3, r3, #2
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d154      	bne.n	800de48 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d918      	bls.n	800dddc <HAL_SPI_Transmit+0x2c4>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddae:	2b40      	cmp	r3, #64	@ 0x40
 800ddb0:	d914      	bls.n	800dddc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddc2:	1d1a      	adds	r2, r3, #4
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	3b04      	subs	r3, #4
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ddda:	e059      	b.n	800de90 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d917      	bls.n	800de18 <HAL_SPI_Transmit+0x300>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d013      	beq.n	800de18 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddf4:	881a      	ldrh	r2, [r3, #0]
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddfe:	1c9a      	adds	r2, r3, #2
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	3b02      	subs	r3, #2
 800de0e:	b29a      	uxth	r2, r3
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800de16:	e03b      	b.n	800de90 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	3320      	adds	r3, #32
 800de22:	7812      	ldrb	r2, [r2, #0]
 800de24:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de2a:	1c5a      	adds	r2, r3, #1
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de36:	b29b      	uxth	r3, r3
 800de38:	3b01      	subs	r3, #1
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800de42:	e025      	b.n	800de90 <HAL_SPI_Transmit+0x378>
 800de44:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de48:	f7f7 f9ac 	bl	80051a4 <HAL_GetTick>
 800de4c:	4602      	mov	r2, r0
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	429a      	cmp	r2, r3
 800de56:	d803      	bhi.n	800de60 <HAL_SPI_Transmit+0x348>
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5e:	d102      	bne.n	800de66 <HAL_SPI_Transmit+0x34e>
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d114      	bne.n	800de90 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f000 fb7e 	bl	800e568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2201      	movs	r2, #1
 800de80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800de8c:	2303      	movs	r3, #3
 800de8e:	e02c      	b.n	800deea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de96:	b29b      	uxth	r3, r3
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f47f af79 	bne.w	800dd90 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	2200      	movs	r2, #0
 800dea6:	2108      	movs	r1, #8
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f000 fbfd 	bl	800e6a8 <SPI_WaitOnFlagUntilTimeout>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d007      	beq.n	800dec4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800deba:	f043 0220 	orr.w	r2, r3, #32
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f000 fb4f 	bl	800e568 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2201      	movs	r2, #1
 800dece:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	e000      	b.n	800deea <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800dee8:	2300      	movs	r3, #0
  }
}
 800deea:	4618      	mov	r0, r3
 800deec:	3718      	adds	r7, #24
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop

0800def4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b08e      	sub	sp, #56	@ 0x38
 800def8:	af02      	add	r7, sp, #8
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	3320      	adds	r3, #32
 800df08:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	3330      	adds	r3, #48	@ 0x30
 800df10:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df16:	095b      	lsrs	r3, r3, #5
 800df18:	b29b      	uxth	r3, r3
 800df1a:	3301      	adds	r3, #1
 800df1c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df1e:	f7f7 f941 	bl	80051a4 <HAL_GetTick>
 800df22:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800df24:	887b      	ldrh	r3, [r7, #2]
 800df26:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800df28:	887b      	ldrh	r3, [r7, #2]
 800df2a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b01      	cmp	r3, #1
 800df36:	d001      	beq.n	800df3c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800df38:	2302      	movs	r3, #2
 800df3a:	e310      	b.n	800e55e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d005      	beq.n	800df4e <HAL_SPI_TransmitReceive+0x5a>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d002      	beq.n	800df4e <HAL_SPI_TransmitReceive+0x5a>
 800df48:	887b      	ldrh	r3, [r7, #2]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	e305      	b.n	800e55e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d101      	bne.n	800df60 <HAL_SPI_TransmitReceive+0x6c>
 800df5c:	2302      	movs	r3, #2
 800df5e:	e2fe      	b.n	800e55e <HAL_SPI_TransmitReceive+0x66a>
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2201      	movs	r2, #1
 800df64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2205      	movs	r2, #5
 800df6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2200      	movs	r2, #0
 800df74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	887a      	ldrh	r2, [r7, #2]
 800df82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	887a      	ldrh	r2, [r7, #2]
 800df8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	68ba      	ldr	r2, [r7, #8]
 800df92:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	887a      	ldrh	r2, [r7, #2]
 800df98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	887a      	ldrh	r2, [r7, #2]
 800dfa0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2200      	movs	r2, #0
 800dfae:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68da      	ldr	r2, [r3, #12]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800dfbe:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a70      	ldr	r2, [pc, #448]	@ (800e188 <HAL_SPI_TransmitReceive+0x294>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d009      	beq.n	800dfde <HAL_SPI_TransmitReceive+0xea>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4a6f      	ldr	r2, [pc, #444]	@ (800e18c <HAL_SPI_TransmitReceive+0x298>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d004      	beq.n	800dfde <HAL_SPI_TransmitReceive+0xea>
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a6d      	ldr	r2, [pc, #436]	@ (800e190 <HAL_SPI_TransmitReceive+0x29c>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d102      	bne.n	800dfe4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800dfde:	2310      	movs	r3, #16
 800dfe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dfe2:	e001      	b.n	800dfe8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800dfe4:	2308      	movs	r3, #8
 800dfe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	685a      	ldr	r2, [r3, #4]
 800dfee:	4b69      	ldr	r3, [pc, #420]	@ (800e194 <HAL_SPI_TransmitReceive+0x2a0>)
 800dff0:	4013      	ands	r3, r2
 800dff2:	8879      	ldrh	r1, [r7, #2]
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	6812      	ldr	r2, [r2, #0]
 800dff8:	430b      	orrs	r3, r1
 800dffa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f042 0201 	orr.w	r2, r2, #1
 800e00a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e014:	d107      	bne.n	800e026 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	2b0f      	cmp	r3, #15
 800e02c:	f240 80a2 	bls.w	800e174 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800e030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e032:	089b      	lsrs	r3, r3, #2
 800e034:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e036:	e094      	b.n	800e162 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	695b      	ldr	r3, [r3, #20]
 800e03e:	f003 0302 	and.w	r3, r3, #2
 800e042:	2b02      	cmp	r3, #2
 800e044:	d120      	bne.n	800e088 <HAL_SPI_TransmitReceive+0x194>
 800e046:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d01d      	beq.n	800e088 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e04c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e04e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e052:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e054:	429a      	cmp	r2, r3
 800e056:	d217      	bcs.n	800e088 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	6812      	ldr	r2, [r2, #0]
 800e062:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e068:	1d1a      	adds	r2, r3, #4
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e074:	b29b      	uxth	r3, r3
 800e076:	3b01      	subs	r3, #1
 800e078:	b29a      	uxth	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e086:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e090:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e092:	2b00      	cmp	r3, #0
 800e094:	d065      	beq.n	800e162 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	f003 0301 	and.w	r3, r3, #1
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d118      	bne.n	800e0d6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e0ae:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0b4:	1d1a      	adds	r2, r3, #4
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e0d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e0d4:	e045      	b.n	800e162 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e0d6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e0d8:	8bfb      	ldrh	r3, [r7, #30]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d21d      	bcs.n	800e11a <HAL_SPI_TransmitReceive+0x226>
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d018      	beq.n	800e11a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e0f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0f8:	1d1a      	adds	r2, r3, #4
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e104:	b29b      	uxth	r3, r3
 800e106:	3b01      	subs	r3, #1
 800e108:	b29a      	uxth	r2, r3
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e116:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e118:	e023      	b.n	800e162 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e11a:	f7f7 f843 	bl	80051a4 <HAL_GetTick>
 800e11e:	4602      	mov	r2, r0
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e126:	429a      	cmp	r2, r3
 800e128:	d803      	bhi.n	800e132 <HAL_SPI_TransmitReceive+0x23e>
 800e12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e130:	d102      	bne.n	800e138 <HAL_SPI_TransmitReceive+0x244>
 800e132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e134:	2b00      	cmp	r3, #0
 800e136:	d114      	bne.n	800e162 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f000 fa15 	bl	800e568 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e144:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2201      	movs	r2, #1
 800e152:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e15e:	2303      	movs	r3, #3
 800e160:	e1fd      	b.n	800e55e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e162:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e164:	2b00      	cmp	r3, #0
 800e166:	f47f af67 	bne.w	800e038 <HAL_SPI_TransmitReceive+0x144>
 800e16a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f47f af63 	bne.w	800e038 <HAL_SPI_TransmitReceive+0x144>
 800e172:	e1ce      	b.n	800e512 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	2b07      	cmp	r3, #7
 800e17a:	f240 81c2 	bls.w	800e502 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800e17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e180:	085b      	lsrs	r3, r3, #1
 800e182:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e184:	e0c9      	b.n	800e31a <HAL_SPI_TransmitReceive+0x426>
 800e186:	bf00      	nop
 800e188:	40013000 	.word	0x40013000
 800e18c:	40003800 	.word	0x40003800
 800e190:	40003c00 	.word	0x40003c00
 800e194:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	f003 0302 	and.w	r3, r3, #2
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d11f      	bne.n	800e1e6 <HAL_SPI_TransmitReceive+0x2f2>
 800e1a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d01c      	beq.n	800e1e6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e1ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e1ae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d216      	bcs.n	800e1e6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1bc:	881a      	ldrh	r2, [r3, #0]
 800e1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1c6:	1c9a      	adds	r2, r3, #2
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e1e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	695b      	ldr	r3, [r3, #20]
 800e1ec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e1ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f000 8092 	beq.w	800e31a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	695b      	ldr	r3, [r3, #20]
 800e1fc:	f003 0301 	and.w	r3, r3, #1
 800e200:	2b01      	cmp	r3, #1
 800e202:	d118      	bne.n	800e236 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e208:	6a3a      	ldr	r2, [r7, #32]
 800e20a:	8812      	ldrh	r2, [r2, #0]
 800e20c:	b292      	uxth	r2, r2
 800e20e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e214:	1c9a      	adds	r2, r3, #2
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e220:	b29b      	uxth	r3, r3
 800e222:	3b01      	subs	r3, #1
 800e224:	b29a      	uxth	r2, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e232:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e234:	e071      	b.n	800e31a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e236:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e238:	8bfb      	ldrh	r3, [r7, #30]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d228      	bcs.n	800e290 <HAL_SPI_TransmitReceive+0x39c>
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d023      	beq.n	800e290 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e24c:	6a3a      	ldr	r2, [r7, #32]
 800e24e:	8812      	ldrh	r2, [r2, #0]
 800e250:	b292      	uxth	r2, r2
 800e252:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e258:	1c9a      	adds	r2, r3, #2
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e262:	6a3a      	ldr	r2, [r7, #32]
 800e264:	8812      	ldrh	r2, [r2, #0]
 800e266:	b292      	uxth	r2, r2
 800e268:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e26e:	1c9a      	adds	r2, r3, #2
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	3b02      	subs	r3, #2
 800e27e:	b29a      	uxth	r2, r3
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e28c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e28e:	e044      	b.n	800e31a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e290:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e292:	2b01      	cmp	r3, #1
 800e294:	d11d      	bne.n	800e2d2 <HAL_SPI_TransmitReceive+0x3de>
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d018      	beq.n	800e2d2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2a4:	6a3a      	ldr	r2, [r7, #32]
 800e2a6:	8812      	ldrh	r2, [r2, #0]
 800e2a8:	b292      	uxth	r2, r2
 800e2aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2b0:	1c9a      	adds	r2, r3, #2
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e2ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e2d0:	e023      	b.n	800e31a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2d2:	f7f6 ff67 	bl	80051a4 <HAL_GetTick>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	1ad3      	subs	r3, r2, r3
 800e2dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d803      	bhi.n	800e2ea <HAL_SPI_TransmitReceive+0x3f6>
 800e2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2e8:	d102      	bne.n	800e2f0 <HAL_SPI_TransmitReceive+0x3fc>
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d114      	bne.n	800e31a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f000 f939 	bl	800e568 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2201      	movs	r2, #1
 800e30a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e316:	2303      	movs	r3, #3
 800e318:	e121      	b.n	800e55e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e31a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f47f af3b 	bne.w	800e198 <HAL_SPI_TransmitReceive+0x2a4>
 800e322:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e324:	2b00      	cmp	r3, #0
 800e326:	f47f af37 	bne.w	800e198 <HAL_SPI_TransmitReceive+0x2a4>
 800e32a:	e0f2      	b.n	800e512 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	695b      	ldr	r3, [r3, #20]
 800e332:	f003 0302 	and.w	r3, r3, #2
 800e336:	2b02      	cmp	r3, #2
 800e338:	d121      	bne.n	800e37e <HAL_SPI_TransmitReceive+0x48a>
 800e33a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d01e      	beq.n	800e37e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e340:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e342:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e346:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e348:	429a      	cmp	r2, r3
 800e34a:	d218      	bcs.n	800e37e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3320      	adds	r3, #32
 800e356:	7812      	ldrb	r2, [r2, #0]
 800e358:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	3b01      	subs	r3, #1
 800e36e:	b29a      	uxth	r2, r3
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e37c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e386:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f000 80ba 	beq.w	800e502 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	695b      	ldr	r3, [r3, #20]
 800e394:	f003 0301 	and.w	r3, r3, #1
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d11b      	bne.n	800e3d4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3a8:	7812      	ldrb	r2, [r2, #0]
 800e3aa:	b2d2      	uxtb	r2, r2
 800e3ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3b2:	1c5a      	adds	r2, r3, #1
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3d0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e3d2:	e096      	b.n	800e502 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e3d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e3d6:	8bfb      	ldrh	r3, [r7, #30]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d24a      	bcs.n	800e472 <HAL_SPI_TransmitReceive+0x57e>
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d045      	beq.n	800e472 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3f2:	7812      	ldrb	r2, [r2, #0]
 800e3f4:	b2d2      	uxtb	r2, r2
 800e3f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e40e:	7812      	ldrb	r2, [r2, #0]
 800e410:	b2d2      	uxtb	r2, r2
 800e412:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e42a:	7812      	ldrb	r2, [r2, #0]
 800e42c:	b2d2      	uxtb	r2, r2
 800e42e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e434:	1c5a      	adds	r2, r3, #1
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e446:	7812      	ldrb	r2, [r2, #0]
 800e448:	b2d2      	uxtb	r2, r2
 800e44a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	3b04      	subs	r3, #4
 800e460:	b29a      	uxth	r2, r3
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e46e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e470:	e047      	b.n	800e502 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e472:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e474:	2b03      	cmp	r3, #3
 800e476:	d820      	bhi.n	800e4ba <HAL_SPI_TransmitReceive+0x5c6>
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d01b      	beq.n	800e4ba <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e48e:	7812      	ldrb	r2, [r2, #0]
 800e490:	b2d2      	uxtb	r2, r2
 800e492:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e4b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e4b8:	e023      	b.n	800e502 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4ba:	f7f6 fe73 	bl	80051a4 <HAL_GetTick>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d803      	bhi.n	800e4d2 <HAL_SPI_TransmitReceive+0x5de>
 800e4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d0:	d102      	bne.n	800e4d8 <HAL_SPI_TransmitReceive+0x5e4>
 800e4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d114      	bne.n	800e502 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f000 f845 	bl	800e568 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e4fe:	2303      	movs	r3, #3
 800e500:	e02d      	b.n	800e55e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e502:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e504:	2b00      	cmp	r3, #0
 800e506:	f47f af11 	bne.w	800e32c <HAL_SPI_TransmitReceive+0x438>
 800e50a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f47f af0d 	bne.w	800e32c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	9300      	str	r3, [sp, #0]
 800e516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e518:	2200      	movs	r2, #0
 800e51a:	2108      	movs	r1, #8
 800e51c:	68f8      	ldr	r0, [r7, #12]
 800e51e:	f000 f8c3 	bl	800e6a8 <SPI_WaitOnFlagUntilTimeout>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d007      	beq.n	800e538 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e52e:	f043 0220 	orr.w	r2, r3, #32
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e538:	68f8      	ldr	r0, [r7, #12]
 800e53a:	f000 f815 	bl	800e568 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2201      	movs	r2, #1
 800e542:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800e558:	2301      	movs	r3, #1
 800e55a:	e000      	b.n	800e55e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800e55c:	2300      	movs	r3, #0
  }
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3730      	adds	r7, #48	@ 0x30
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop

0800e568 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	695b      	ldr	r3, [r3, #20]
 800e576:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	699a      	ldr	r2, [r3, #24]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f042 0208 	orr.w	r2, r2, #8
 800e586:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	699a      	ldr	r2, [r3, #24]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f042 0210 	orr.w	r2, r2, #16
 800e596:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f022 0201 	bic.w	r2, r2, #1
 800e5a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6919      	ldr	r1, [r3, #16]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	4b3c      	ldr	r3, [pc, #240]	@ (800e6a4 <SPI_CloseTransfer+0x13c>)
 800e5b4:	400b      	ands	r3, r1
 800e5b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	689a      	ldr	r2, [r3, #8]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e5c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	2b04      	cmp	r3, #4
 800e5d2:	d014      	beq.n	800e5fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f003 0320 	and.w	r3, r3, #32
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00f      	beq.n	800e5fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	699a      	ldr	r2, [r3, #24]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f042 0220 	orr.w	r2, r2, #32
 800e5fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b03      	cmp	r3, #3
 800e608:	d014      	beq.n	800e634 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00f      	beq.n	800e634 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e61a:	f043 0204 	orr.w	r2, r3, #4
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	699a      	ldr	r2, [r3, #24]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e632:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00f      	beq.n	800e65e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e644:	f043 0201 	orr.w	r2, r3, #1
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	699a      	ldr	r2, [r3, #24]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e65c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00f      	beq.n	800e688 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e66e:	f043 0208 	orr.w	r2, r3, #8
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	699a      	ldr	r2, [r3, #24]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e686:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e698:	bf00      	nop
 800e69a:	3714      	adds	r7, #20
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr
 800e6a4:	fffffc90 	.word	0xfffffc90

0800e6a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	603b      	str	r3, [r7, #0]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e6b8:	e010      	b.n	800e6dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6ba:	f7f6 fd73 	bl	80051a4 <HAL_GetTick>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d803      	bhi.n	800e6d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d0:	d102      	bne.n	800e6d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e6d8:	2303      	movs	r3, #3
 800e6da:	e00f      	b.n	800e6fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	695a      	ldr	r2, [r3, #20]
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	bf0c      	ite	eq
 800e6ec:	2301      	moveq	r3, #1
 800e6ee:	2300      	movne	r3, #0
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	79fb      	ldrb	r3, [r7, #7]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d0df      	beq.n	800e6ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e710:	095b      	lsrs	r3, r3, #5
 800e712:	3301      	adds	r3, #1
 800e714:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	3301      	adds	r3, #1
 800e71c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	3307      	adds	r3, #7
 800e722:	08db      	lsrs	r3, r3, #3
 800e724:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	68fa      	ldr	r2, [r7, #12]
 800e72a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3714      	adds	r7, #20
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b082      	sub	sp, #8
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d101      	bne.n	800e74c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	e049      	b.n	800e7e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e752:	b2db      	uxtb	r3, r3
 800e754:	2b00      	cmp	r3, #0
 800e756:	d106      	bne.n	800e766 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f7f5 fdfb 	bl	800435c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2202      	movs	r2, #2
 800e76a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	3304      	adds	r3, #4
 800e776:	4619      	mov	r1, r3
 800e778:	4610      	mov	r0, r2
 800e77a:	f000 fa67 	bl	800ec4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2201      	movs	r2, #1
 800e782:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2201      	movs	r2, #1
 800e792:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e7de:	2300      	movs	r3, #0
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	f003 0302 	and.w	r3, r3, #2
 800e806:	2b00      	cmp	r3, #0
 800e808:	d020      	beq.n	800e84c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f003 0302 	and.w	r3, r3, #2
 800e810:	2b00      	cmp	r3, #0
 800e812:	d01b      	beq.n	800e84c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f06f 0202 	mvn.w	r2, #2
 800e81c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2201      	movs	r2, #1
 800e822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	699b      	ldr	r3, [r3, #24]
 800e82a:	f003 0303 	and.w	r3, r3, #3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d003      	beq.n	800e83a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f000 f9ec 	bl	800ec10 <HAL_TIM_IC_CaptureCallback>
 800e838:	e005      	b.n	800e846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f000 f9de 	bl	800ebfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 f9ef 	bl	800ec24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2200      	movs	r2, #0
 800e84a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	f003 0304 	and.w	r3, r3, #4
 800e852:	2b00      	cmp	r3, #0
 800e854:	d020      	beq.n	800e898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f003 0304 	and.w	r3, r3, #4
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d01b      	beq.n	800e898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f06f 0204 	mvn.w	r2, #4
 800e868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2202      	movs	r2, #2
 800e86e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	699b      	ldr	r3, [r3, #24]
 800e876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f9c6 	bl	800ec10 <HAL_TIM_IC_CaptureCallback>
 800e884:	e005      	b.n	800e892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f9b8 	bl	800ebfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 f9c9 	bl	800ec24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	f003 0308 	and.w	r3, r3, #8
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d020      	beq.n	800e8e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f003 0308 	and.w	r3, r3, #8
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d01b      	beq.n	800e8e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f06f 0208 	mvn.w	r2, #8
 800e8b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2204      	movs	r2, #4
 800e8ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	69db      	ldr	r3, [r3, #28]
 800e8c2:	f003 0303 	and.w	r3, r3, #3
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d003      	beq.n	800e8d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 f9a0 	bl	800ec10 <HAL_TIM_IC_CaptureCallback>
 800e8d0:	e005      	b.n	800e8de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f992 	bl	800ebfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f9a3 	bl	800ec24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	f003 0310 	and.w	r3, r3, #16
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d020      	beq.n	800e930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f003 0310 	and.w	r3, r3, #16
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d01b      	beq.n	800e930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f06f 0210 	mvn.w	r2, #16
 800e900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2208      	movs	r2, #8
 800e906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	69db      	ldr	r3, [r3, #28]
 800e90e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 f97a 	bl	800ec10 <HAL_TIM_IC_CaptureCallback>
 800e91c:	e005      	b.n	800e92a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 f96c 	bl	800ebfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 f97d 	bl	800ec24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	f003 0301 	and.w	r3, r3, #1
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00c      	beq.n	800e954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f003 0301 	and.w	r3, r3, #1
 800e940:	2b00      	cmp	r3, #0
 800e942:	d007      	beq.n	800e954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f06f 0201 	mvn.w	r2, #1
 800e94c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 f94a 	bl	800ebe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d104      	bne.n	800e968 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00c      	beq.n	800e982 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d007      	beq.n	800e982 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e97a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 fb3b 	bl	800eff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00c      	beq.n	800e9a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e992:	2b00      	cmp	r3, #0
 800e994:	d007      	beq.n	800e9a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e99e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 fb33 	bl	800f00c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00c      	beq.n	800e9ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d007      	beq.n	800e9ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e9c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f937 	bl	800ec38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	f003 0320 	and.w	r3, r3, #32
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00c      	beq.n	800e9ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f003 0320 	and.w	r3, r3, #32
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d007      	beq.n	800e9ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f06f 0220 	mvn.w	r2, #32
 800e9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 fafb 	bl	800efe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e9ee:	bf00      	nop
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea02:	2300      	movs	r3, #0
 800ea04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d101      	bne.n	800ea14 <HAL_TIM_ConfigClockSource+0x1c>
 800ea10:	2302      	movs	r3, #2
 800ea12:	e0dc      	b.n	800ebce <HAL_TIM_ConfigClockSource+0x1d6>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2201      	movs	r2, #1
 800ea18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2202      	movs	r2, #2
 800ea20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	689b      	ldr	r3, [r3, #8]
 800ea2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	4b6a      	ldr	r3, [pc, #424]	@ (800ebd8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ea30:	4013      	ands	r3, r2
 800ea32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ea3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	68ba      	ldr	r2, [r7, #8]
 800ea42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4a64      	ldr	r2, [pc, #400]	@ (800ebdc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	f000 80a9 	beq.w	800eba2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea50:	4a62      	ldr	r2, [pc, #392]	@ (800ebdc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	f200 80ae 	bhi.w	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea58:	4a61      	ldr	r2, [pc, #388]	@ (800ebe0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	f000 80a1 	beq.w	800eba2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea60:	4a5f      	ldr	r2, [pc, #380]	@ (800ebe0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	f200 80a6 	bhi.w	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea68:	4a5e      	ldr	r2, [pc, #376]	@ (800ebe4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	f000 8099 	beq.w	800eba2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea70:	4a5c      	ldr	r2, [pc, #368]	@ (800ebe4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	f200 809e 	bhi.w	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ea7c:	f000 8091 	beq.w	800eba2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ea84:	f200 8096 	bhi.w	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea8c:	f000 8089 	beq.w	800eba2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea94:	f200 808e 	bhi.w	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea9c:	d03e      	beq.n	800eb1c <HAL_TIM_ConfigClockSource+0x124>
 800ea9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eaa2:	f200 8087 	bhi.w	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800eaa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eaaa:	f000 8086 	beq.w	800ebba <HAL_TIM_ConfigClockSource+0x1c2>
 800eaae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eab2:	d87f      	bhi.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800eab4:	2b70      	cmp	r3, #112	@ 0x70
 800eab6:	d01a      	beq.n	800eaee <HAL_TIM_ConfigClockSource+0xf6>
 800eab8:	2b70      	cmp	r3, #112	@ 0x70
 800eaba:	d87b      	bhi.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800eabc:	2b60      	cmp	r3, #96	@ 0x60
 800eabe:	d050      	beq.n	800eb62 <HAL_TIM_ConfigClockSource+0x16a>
 800eac0:	2b60      	cmp	r3, #96	@ 0x60
 800eac2:	d877      	bhi.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800eac4:	2b50      	cmp	r3, #80	@ 0x50
 800eac6:	d03c      	beq.n	800eb42 <HAL_TIM_ConfigClockSource+0x14a>
 800eac8:	2b50      	cmp	r3, #80	@ 0x50
 800eaca:	d873      	bhi.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800eacc:	2b40      	cmp	r3, #64	@ 0x40
 800eace:	d058      	beq.n	800eb82 <HAL_TIM_ConfigClockSource+0x18a>
 800ead0:	2b40      	cmp	r3, #64	@ 0x40
 800ead2:	d86f      	bhi.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ead4:	2b30      	cmp	r3, #48	@ 0x30
 800ead6:	d064      	beq.n	800eba2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ead8:	2b30      	cmp	r3, #48	@ 0x30
 800eada:	d86b      	bhi.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800eadc:	2b20      	cmp	r3, #32
 800eade:	d060      	beq.n	800eba2 <HAL_TIM_ConfigClockSource+0x1aa>
 800eae0:	2b20      	cmp	r3, #32
 800eae2:	d867      	bhi.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d05c      	beq.n	800eba2 <HAL_TIM_ConfigClockSource+0x1aa>
 800eae8:	2b10      	cmp	r3, #16
 800eaea:	d05a      	beq.n	800eba2 <HAL_TIM_ConfigClockSource+0x1aa>
 800eaec:	e062      	b.n	800ebb4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eafe:	f000 f9c3 	bl	800ee88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800eb10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	609a      	str	r2, [r3, #8]
      break;
 800eb1a:	e04f      	b.n	800ebbc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eb2c:	f000 f9ac 	bl	800ee88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	689a      	ldr	r2, [r3, #8]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eb3e:	609a      	str	r2, [r3, #8]
      break;
 800eb40:	e03c      	b.n	800ebbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb4e:	461a      	mov	r2, r3
 800eb50:	f000 f91c 	bl	800ed8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2150      	movs	r1, #80	@ 0x50
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f000 f976 	bl	800ee4c <TIM_ITRx_SetConfig>
      break;
 800eb60:	e02c      	b.n	800ebbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb6e:	461a      	mov	r2, r3
 800eb70:	f000 f93b 	bl	800edea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2160      	movs	r1, #96	@ 0x60
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f000 f966 	bl	800ee4c <TIM_ITRx_SetConfig>
      break;
 800eb80:	e01c      	b.n	800ebbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb8e:	461a      	mov	r2, r3
 800eb90:	f000 f8fc 	bl	800ed8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2140      	movs	r1, #64	@ 0x40
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f000 f956 	bl	800ee4c <TIM_ITRx_SetConfig>
      break;
 800eba0:	e00c      	b.n	800ebbc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4610      	mov	r0, r2
 800ebae:	f000 f94d 	bl	800ee4c <TIM_ITRx_SetConfig>
      break;
 800ebb2:	e003      	b.n	800ebbc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebb8:	e000      	b.n	800ebbc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ebba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ebcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	ffceff88 	.word	0xffceff88
 800ebdc:	00100040 	.word	0x00100040
 800ebe0:	00100030 	.word	0x00100030
 800ebe4:	00100020 	.word	0x00100020

0800ebe8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ebf0:	bf00      	nop
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec04:	bf00      	nop
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec18:	bf00      	nop
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec2c:	bf00      	nop
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec40:	bf00      	nop
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b085      	sub	sp, #20
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4a43      	ldr	r2, [pc, #268]	@ (800ed6c <TIM_Base_SetConfig+0x120>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d013      	beq.n	800ec8c <TIM_Base_SetConfig+0x40>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec6a:	d00f      	beq.n	800ec8c <TIM_Base_SetConfig+0x40>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	4a40      	ldr	r2, [pc, #256]	@ (800ed70 <TIM_Base_SetConfig+0x124>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d00b      	beq.n	800ec8c <TIM_Base_SetConfig+0x40>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4a3f      	ldr	r2, [pc, #252]	@ (800ed74 <TIM_Base_SetConfig+0x128>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d007      	beq.n	800ec8c <TIM_Base_SetConfig+0x40>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	4a3e      	ldr	r2, [pc, #248]	@ (800ed78 <TIM_Base_SetConfig+0x12c>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d003      	beq.n	800ec8c <TIM_Base_SetConfig+0x40>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4a3d      	ldr	r2, [pc, #244]	@ (800ed7c <TIM_Base_SetConfig+0x130>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d108      	bne.n	800ec9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4a32      	ldr	r2, [pc, #200]	@ (800ed6c <TIM_Base_SetConfig+0x120>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d01f      	beq.n	800ece6 <TIM_Base_SetConfig+0x9a>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecac:	d01b      	beq.n	800ece6 <TIM_Base_SetConfig+0x9a>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4a2f      	ldr	r2, [pc, #188]	@ (800ed70 <TIM_Base_SetConfig+0x124>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d017      	beq.n	800ece6 <TIM_Base_SetConfig+0x9a>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a2e      	ldr	r2, [pc, #184]	@ (800ed74 <TIM_Base_SetConfig+0x128>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d013      	beq.n	800ece6 <TIM_Base_SetConfig+0x9a>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4a2d      	ldr	r2, [pc, #180]	@ (800ed78 <TIM_Base_SetConfig+0x12c>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d00f      	beq.n	800ece6 <TIM_Base_SetConfig+0x9a>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4a2c      	ldr	r2, [pc, #176]	@ (800ed7c <TIM_Base_SetConfig+0x130>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d00b      	beq.n	800ece6 <TIM_Base_SetConfig+0x9a>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4a2b      	ldr	r2, [pc, #172]	@ (800ed80 <TIM_Base_SetConfig+0x134>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d007      	beq.n	800ece6 <TIM_Base_SetConfig+0x9a>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4a2a      	ldr	r2, [pc, #168]	@ (800ed84 <TIM_Base_SetConfig+0x138>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d003      	beq.n	800ece6 <TIM_Base_SetConfig+0x9a>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4a29      	ldr	r2, [pc, #164]	@ (800ed88 <TIM_Base_SetConfig+0x13c>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d108      	bne.n	800ecf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ecec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	695b      	ldr	r3, [r3, #20]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	689a      	ldr	r2, [r3, #8]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4a14      	ldr	r2, [pc, #80]	@ (800ed6c <TIM_Base_SetConfig+0x120>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d00f      	beq.n	800ed3e <TIM_Base_SetConfig+0xf2>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a16      	ldr	r2, [pc, #88]	@ (800ed7c <TIM_Base_SetConfig+0x130>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d00b      	beq.n	800ed3e <TIM_Base_SetConfig+0xf2>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4a15      	ldr	r2, [pc, #84]	@ (800ed80 <TIM_Base_SetConfig+0x134>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d007      	beq.n	800ed3e <TIM_Base_SetConfig+0xf2>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a14      	ldr	r2, [pc, #80]	@ (800ed84 <TIM_Base_SetConfig+0x138>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d003      	beq.n	800ed3e <TIM_Base_SetConfig+0xf2>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a13      	ldr	r2, [pc, #76]	@ (800ed88 <TIM_Base_SetConfig+0x13c>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d103      	bne.n	800ed46 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	691a      	ldr	r2, [r3, #16]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f043 0204 	orr.w	r2, r3, #4
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2201      	movs	r2, #1
 800ed56:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	601a      	str	r2, [r3, #0]
}
 800ed5e:	bf00      	nop
 800ed60:	3714      	adds	r7, #20
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop
 800ed6c:	40010000 	.word	0x40010000
 800ed70:	40000400 	.word	0x40000400
 800ed74:	40000800 	.word	0x40000800
 800ed78:	40000c00 	.word	0x40000c00
 800ed7c:	40010400 	.word	0x40010400
 800ed80:	40014000 	.word	0x40014000
 800ed84:	40014400 	.word	0x40014400
 800ed88:	40014800 	.word	0x40014800

0800ed8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b087      	sub	sp, #28
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6a1b      	ldr	r3, [r3, #32]
 800ed9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	f023 0201 	bic.w	r2, r3, #1
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	699b      	ldr	r3, [r3, #24]
 800edae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800edb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	011b      	lsls	r3, r3, #4
 800edbc:	693a      	ldr	r2, [r7, #16]
 800edbe:	4313      	orrs	r3, r2
 800edc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	f023 030a 	bic.w	r3, r3, #10
 800edc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800edca:	697a      	ldr	r2, [r7, #20]
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	4313      	orrs	r3, r2
 800edd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	693a      	ldr	r2, [r7, #16]
 800edd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	697a      	ldr	r2, [r7, #20]
 800eddc:	621a      	str	r2, [r3, #32]
}
 800edde:	bf00      	nop
 800ede0:	371c      	adds	r7, #28
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr

0800edea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800edea:	b480      	push	{r7}
 800edec:	b087      	sub	sp, #28
 800edee:	af00      	add	r7, sp, #0
 800edf0:	60f8      	str	r0, [r7, #12]
 800edf2:	60b9      	str	r1, [r7, #8]
 800edf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6a1b      	ldr	r3, [r3, #32]
 800edfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6a1b      	ldr	r3, [r3, #32]
 800ee00:	f023 0210 	bic.w	r2, r3, #16
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	699b      	ldr	r3, [r3, #24]
 800ee0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	031b      	lsls	r3, r3, #12
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	011b      	lsls	r3, r3, #4
 800ee2c:	697a      	ldr	r2, [r7, #20]
 800ee2e:	4313      	orrs	r3, r2
 800ee30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	693a      	ldr	r2, [r7, #16]
 800ee36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	697a      	ldr	r2, [r7, #20]
 800ee3c:	621a      	str	r2, [r3, #32]
}
 800ee3e:	bf00      	nop
 800ee40:	371c      	adds	r7, #28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
	...

0800ee4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b085      	sub	sp, #20
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee5c:	68fa      	ldr	r2, [r7, #12]
 800ee5e:	4b09      	ldr	r3, [pc, #36]	@ (800ee84 <TIM_ITRx_SetConfig+0x38>)
 800ee60:	4013      	ands	r3, r2
 800ee62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee64:	683a      	ldr	r2, [r7, #0]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	f043 0307 	orr.w	r3, r3, #7
 800ee6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	609a      	str	r2, [r3, #8]
}
 800ee76:	bf00      	nop
 800ee78:	3714      	adds	r7, #20
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	ffcfff8f 	.word	0xffcfff8f

0800ee88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b087      	sub	sp, #28
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	60b9      	str	r1, [r7, #8]
 800ee92:	607a      	str	r2, [r7, #4]
 800ee94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	021a      	lsls	r2, r3, #8
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	431a      	orrs	r2, r3
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	4313      	orrs	r3, r2
 800eeb0:	697a      	ldr	r2, [r7, #20]
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	697a      	ldr	r2, [r7, #20]
 800eeba:	609a      	str	r2, [r3, #8]
}
 800eebc:	bf00      	nop
 800eebe:	371c      	adds	r7, #28
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d101      	bne.n	800eee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eedc:	2302      	movs	r3, #2
 800eede:	e06d      	b.n	800efbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2202      	movs	r2, #2
 800eeec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a30      	ldr	r2, [pc, #192]	@ (800efc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d004      	beq.n	800ef14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a2f      	ldr	r2, [pc, #188]	@ (800efcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d108      	bne.n	800ef26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ef1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	4313      	orrs	r3, r2
 800ef24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	4313      	orrs	r3, r2
 800ef36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a20      	ldr	r2, [pc, #128]	@ (800efc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d022      	beq.n	800ef90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef52:	d01d      	beq.n	800ef90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a1d      	ldr	r2, [pc, #116]	@ (800efd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d018      	beq.n	800ef90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a1c      	ldr	r2, [pc, #112]	@ (800efd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d013      	beq.n	800ef90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a1a      	ldr	r2, [pc, #104]	@ (800efd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d00e      	beq.n	800ef90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4a15      	ldr	r2, [pc, #84]	@ (800efcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d009      	beq.n	800ef90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a16      	ldr	r2, [pc, #88]	@ (800efdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d004      	beq.n	800ef90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4a15      	ldr	r2, [pc, #84]	@ (800efe0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d10c      	bne.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68ba      	ldr	r2, [r7, #8]
 800efa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2201      	movs	r2, #1
 800efae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3714      	adds	r7, #20
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	40010000 	.word	0x40010000
 800efcc:	40010400 	.word	0x40010400
 800efd0:	40000400 	.word	0x40000400
 800efd4:	40000800 	.word	0x40000800
 800efd8:	40000c00 	.word	0x40000c00
 800efdc:	40001800 	.word	0x40001800
 800efe0:	40014000 	.word	0x40014000

0800efe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800efec:	bf00      	nop
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f000:	bf00      	nop
 800f002:	370c      	adds	r7, #12
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f014:	bf00      	nop
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d101      	bne.n	800f032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f02e:	2301      	movs	r3, #1
 800f030:	e042      	b.n	800f0b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d106      	bne.n	800f04a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f7f5 fbb7 	bl	80047b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2224      	movs	r2, #36	@ 0x24
 800f04e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f022 0201 	bic.w	r2, r2, #1
 800f060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f066:	2b00      	cmp	r3, #0
 800f068:	d002      	beq.n	800f070 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f001 fa9c 	bl	80105a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fd31 	bl	800fad8 <UART_SetConfig>
 800f076:	4603      	mov	r3, r0
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d101      	bne.n	800f080 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	e01b      	b.n	800f0b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	685a      	ldr	r2, [r3, #4]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f08e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	689a      	ldr	r2, [r3, #8]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f09e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f042 0201 	orr.w	r2, r2, #1
 800f0ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f001 fb1b 	bl	80106ec <UART_CheckIdleState>
 800f0b6:	4603      	mov	r3, r0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b08a      	sub	sp, #40	@ 0x28
 800f0c4:	af02      	add	r7, sp, #8
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	603b      	str	r3, [r7, #0]
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0d6:	2b20      	cmp	r3, #32
 800f0d8:	d17b      	bne.n	800f1d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d002      	beq.n	800f0e6 <HAL_UART_Transmit+0x26>
 800f0e0:	88fb      	ldrh	r3, [r7, #6]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d101      	bne.n	800f0ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	e074      	b.n	800f1d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2221      	movs	r2, #33	@ 0x21
 800f0f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f0fa:	f7f6 f853 	bl	80051a4 <HAL_GetTick>
 800f0fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	88fa      	ldrh	r2, [r7, #6]
 800f104:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	88fa      	ldrh	r2, [r7, #6]
 800f10c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f118:	d108      	bne.n	800f12c <HAL_UART_Transmit+0x6c>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d104      	bne.n	800f12c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f122:	2300      	movs	r3, #0
 800f124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	61bb      	str	r3, [r7, #24]
 800f12a:	e003      	b.n	800f134 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f130:	2300      	movs	r3, #0
 800f132:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f134:	e030      	b.n	800f198 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	2200      	movs	r2, #0
 800f13e:	2180      	movs	r1, #128	@ 0x80
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f001 fb7d 	bl	8010840 <UART_WaitOnFlagUntilTimeout>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d005      	beq.n	800f158 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2220      	movs	r2, #32
 800f150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f154:	2303      	movs	r3, #3
 800f156:	e03d      	b.n	800f1d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10b      	bne.n	800f176 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	881b      	ldrh	r3, [r3, #0]
 800f162:	461a      	mov	r2, r3
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f16c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	3302      	adds	r3, #2
 800f172:	61bb      	str	r3, [r7, #24]
 800f174:	e007      	b.n	800f186 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	781a      	ldrb	r2, [r3, #0]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	3301      	adds	r3, #1
 800f184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	3b01      	subs	r3, #1
 800f190:	b29a      	uxth	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1c8      	bne.n	800f136 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	9300      	str	r3, [sp, #0]
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	2140      	movs	r1, #64	@ 0x40
 800f1ae:	68f8      	ldr	r0, [r7, #12]
 800f1b0:	f001 fb46 	bl	8010840 <UART_WaitOnFlagUntilTimeout>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d005      	beq.n	800f1c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2220      	movs	r2, #32
 800f1be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f1c2:	2303      	movs	r3, #3
 800f1c4:	e006      	b.n	800f1d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2220      	movs	r2, #32
 800f1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	e000      	b.n	800f1d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f1d2:	2302      	movs	r3, #2
  }
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3720      	adds	r7, #32
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b08a      	sub	sp, #40	@ 0x28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1f0:	2b20      	cmp	r3, #32
 800f1f2:	d167      	bne.n	800f2c4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d002      	beq.n	800f200 <HAL_UART_Transmit_DMA+0x24>
 800f1fa:	88fb      	ldrh	r3, [r7, #6]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d101      	bne.n	800f204 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f200:	2301      	movs	r3, #1
 800f202:	e060      	b.n	800f2c6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	68ba      	ldr	r2, [r7, #8]
 800f208:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	88fa      	ldrh	r2, [r7, #6]
 800f20e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	88fa      	ldrh	r2, [r7, #6]
 800f216:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2221      	movs	r2, #33	@ 0x21
 800f226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d028      	beq.n	800f284 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f236:	4a26      	ldr	r2, [pc, #152]	@ (800f2d0 <HAL_UART_Transmit_DMA+0xf4>)
 800f238:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f23e:	4a25      	ldr	r2, [pc, #148]	@ (800f2d4 <HAL_UART_Transmit_DMA+0xf8>)
 800f240:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f246:	4a24      	ldr	r2, [pc, #144]	@ (800f2d8 <HAL_UART_Transmit_DMA+0xfc>)
 800f248:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f24e:	2200      	movs	r2, #0
 800f250:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f25a:	4619      	mov	r1, r3
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	3328      	adds	r3, #40	@ 0x28
 800f262:	461a      	mov	r2, r3
 800f264:	88fb      	ldrh	r3, [r7, #6]
 800f266:	f7f8 f96b 	bl	8007540 <HAL_DMA_Start_IT>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d009      	beq.n	800f284 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2210      	movs	r2, #16
 800f274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2220      	movs	r2, #32
 800f27c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	e020      	b.n	800f2c6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2240      	movs	r2, #64	@ 0x40
 800f28a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	3308      	adds	r3, #8
 800f292:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	e853 3f00 	ldrex	r3, [r3]
 800f29a:	613b      	str	r3, [r7, #16]
   return(result);
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	3308      	adds	r3, #8
 800f2aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2ac:	623a      	str	r2, [r7, #32]
 800f2ae:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b0:	69f9      	ldr	r1, [r7, #28]
 800f2b2:	6a3a      	ldr	r2, [r7, #32]
 800f2b4:	e841 2300 	strex	r3, r2, [r1]
 800f2b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d1e5      	bne.n	800f28c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	e000      	b.n	800f2c6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800f2c4:	2302      	movs	r3, #2
  }
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3728      	adds	r7, #40	@ 0x28
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	08010bb9 	.word	0x08010bb9
 800f2d4:	08010c4f 	.word	0x08010c4f
 800f2d8:	08010dd1 	.word	0x08010dd1

0800f2dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b0ba      	sub	sp, #232	@ 0xe8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	69db      	ldr	r3, [r3, #28]
 800f2ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f302:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f306:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f30a:	4013      	ands	r3, r2
 800f30c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f314:	2b00      	cmp	r3, #0
 800f316:	d11b      	bne.n	800f350 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f31c:	f003 0320 	and.w	r3, r3, #32
 800f320:	2b00      	cmp	r3, #0
 800f322:	d015      	beq.n	800f350 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f328:	f003 0320 	and.w	r3, r3, #32
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d105      	bne.n	800f33c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d009      	beq.n	800f350 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f340:	2b00      	cmp	r3, #0
 800f342:	f000 8393 	beq.w	800fa6c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	4798      	blx	r3
      }
      return;
 800f34e:	e38d      	b.n	800fa6c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f354:	2b00      	cmp	r3, #0
 800f356:	f000 8123 	beq.w	800f5a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f35a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f35e:	4b8d      	ldr	r3, [pc, #564]	@ (800f594 <HAL_UART_IRQHandler+0x2b8>)
 800f360:	4013      	ands	r3, r2
 800f362:	2b00      	cmp	r3, #0
 800f364:	d106      	bne.n	800f374 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f36a:	4b8b      	ldr	r3, [pc, #556]	@ (800f598 <HAL_UART_IRQHandler+0x2bc>)
 800f36c:	4013      	ands	r3, r2
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f000 8116 	beq.w	800f5a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f378:	f003 0301 	and.w	r3, r3, #1
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d011      	beq.n	800f3a4 <HAL_UART_IRQHandler+0xc8>
 800f380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d00b      	beq.n	800f3a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2201      	movs	r2, #1
 800f392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f39a:	f043 0201 	orr.w	r2, r3, #1
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3a8:	f003 0302 	and.w	r3, r3, #2
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d011      	beq.n	800f3d4 <HAL_UART_IRQHandler+0xf8>
 800f3b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3b4:	f003 0301 	and.w	r3, r3, #1
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00b      	beq.n	800f3d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2202      	movs	r2, #2
 800f3c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3ca:	f043 0204 	orr.w	r2, r3, #4
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3d8:	f003 0304 	and.w	r3, r3, #4
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d011      	beq.n	800f404 <HAL_UART_IRQHandler+0x128>
 800f3e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3e4:	f003 0301 	and.w	r3, r3, #1
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d00b      	beq.n	800f404 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2204      	movs	r2, #4
 800f3f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3fa:	f043 0202 	orr.w	r2, r3, #2
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f408:	f003 0308 	and.w	r3, r3, #8
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d017      	beq.n	800f440 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f414:	f003 0320 	and.w	r3, r3, #32
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d105      	bne.n	800f428 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f41c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f420:	4b5c      	ldr	r3, [pc, #368]	@ (800f594 <HAL_UART_IRQHandler+0x2b8>)
 800f422:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f424:	2b00      	cmp	r3, #0
 800f426:	d00b      	beq.n	800f440 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2208      	movs	r2, #8
 800f42e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f436:	f043 0208 	orr.w	r2, r3, #8
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d012      	beq.n	800f472 <HAL_UART_IRQHandler+0x196>
 800f44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f450:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f454:	2b00      	cmp	r3, #0
 800f456:	d00c      	beq.n	800f472 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f468:	f043 0220 	orr.w	r2, r3, #32
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f000 82f9 	beq.w	800fa70 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f482:	f003 0320 	and.w	r3, r3, #32
 800f486:	2b00      	cmp	r3, #0
 800f488:	d013      	beq.n	800f4b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f48a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f48e:	f003 0320 	and.w	r3, r3, #32
 800f492:	2b00      	cmp	r3, #0
 800f494:	d105      	bne.n	800f4a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f49a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d007      	beq.n	800f4b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d003      	beq.n	800f4b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4c6:	2b40      	cmp	r3, #64	@ 0x40
 800f4c8:	d005      	beq.n	800f4d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f4ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f4ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d054      	beq.n	800f580 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f001 fb08 	bl	8010aec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4e6:	2b40      	cmp	r3, #64	@ 0x40
 800f4e8:	d146      	bne.n	800f578 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	3308      	adds	r3, #8
 800f4f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f4f8:	e853 3f00 	ldrex	r3, [r3]
 800f4fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	3308      	adds	r3, #8
 800f512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f516:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f51a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f51e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f526:	e841 2300 	strex	r3, r2, [r1]
 800f52a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f52e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d1d9      	bne.n	800f4ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d017      	beq.n	800f570 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f546:	4a15      	ldr	r2, [pc, #84]	@ (800f59c <HAL_UART_IRQHandler+0x2c0>)
 800f548:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f550:	4618      	mov	r0, r3
 800f552:	f7f8 fd7d 	bl	8008050 <HAL_DMA_Abort_IT>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d019      	beq.n	800f590 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f56a:	4610      	mov	r0, r2
 800f56c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f56e:	e00f      	b.n	800f590 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 faa7 	bl	800fac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f576:	e00b      	b.n	800f590 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 faa3 	bl	800fac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f57e:	e007      	b.n	800f590 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 fa9f 	bl	800fac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2200      	movs	r2, #0
 800f58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f58e:	e26f      	b.n	800fa70 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f590:	bf00      	nop
    return;
 800f592:	e26d      	b.n	800fa70 <HAL_UART_IRQHandler+0x794>
 800f594:	10000001 	.word	0x10000001
 800f598:	04000120 	.word	0x04000120
 800f59c:	08010e51 	.word	0x08010e51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	f040 8203 	bne.w	800f9b0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5ae:	f003 0310 	and.w	r3, r3, #16
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f000 81fc 	beq.w	800f9b0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5bc:	f003 0310 	and.w	r3, r3, #16
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f000 81f5 	beq.w	800f9b0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2210      	movs	r2, #16
 800f5cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5d8:	2b40      	cmp	r3, #64	@ 0x40
 800f5da:	f040 816d 	bne.w	800f8b8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4aa4      	ldr	r2, [pc, #656]	@ (800f878 <HAL_UART_IRQHandler+0x59c>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d068      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4aa1      	ldr	r2, [pc, #644]	@ (800f87c <HAL_UART_IRQHandler+0x5a0>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d061      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4a9f      	ldr	r2, [pc, #636]	@ (800f880 <HAL_UART_IRQHandler+0x5a4>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d05a      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a9c      	ldr	r2, [pc, #624]	@ (800f884 <HAL_UART_IRQHandler+0x5a8>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d053      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	4a9a      	ldr	r2, [pc, #616]	@ (800f888 <HAL_UART_IRQHandler+0x5ac>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d04c      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a97      	ldr	r2, [pc, #604]	@ (800f88c <HAL_UART_IRQHandler+0x5b0>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d045      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a95      	ldr	r2, [pc, #596]	@ (800f890 <HAL_UART_IRQHandler+0x5b4>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d03e      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a92      	ldr	r2, [pc, #584]	@ (800f894 <HAL_UART_IRQHandler+0x5b8>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d037      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a90      	ldr	r2, [pc, #576]	@ (800f898 <HAL_UART_IRQHandler+0x5bc>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d030      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	4a8d      	ldr	r2, [pc, #564]	@ (800f89c <HAL_UART_IRQHandler+0x5c0>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d029      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	4a8b      	ldr	r2, [pc, #556]	@ (800f8a0 <HAL_UART_IRQHandler+0x5c4>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d022      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a88      	ldr	r2, [pc, #544]	@ (800f8a4 <HAL_UART_IRQHandler+0x5c8>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d01b      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a86      	ldr	r2, [pc, #536]	@ (800f8a8 <HAL_UART_IRQHandler+0x5cc>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d014      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a83      	ldr	r2, [pc, #524]	@ (800f8ac <HAL_UART_IRQHandler+0x5d0>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d00d      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a81      	ldr	r2, [pc, #516]	@ (800f8b0 <HAL_UART_IRQHandler+0x5d4>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d006      	beq.n	800f6be <HAL_UART_IRQHandler+0x3e2>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a7e      	ldr	r2, [pc, #504]	@ (800f8b4 <HAL_UART_IRQHandler+0x5d8>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d106      	bne.n	800f6cc <HAL_UART_IRQHandler+0x3f0>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	e005      	b.n	800f6d8 <HAL_UART_IRQHandler+0x3fc>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f6dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f000 80ad 	beq.w	800f840 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f6ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	f080 80a5 	bcs.w	800f840 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f6fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f706:	69db      	ldr	r3, [r3, #28]
 800f708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f70c:	f000 8087 	beq.w	800f81e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f71c:	e853 3f00 	ldrex	r3, [r3]
 800f720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f72c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	461a      	mov	r2, r3
 800f736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f73a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f73e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f742:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f746:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f74a:	e841 2300 	strex	r3, r2, [r1]
 800f74e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f756:	2b00      	cmp	r3, #0
 800f758:	d1da      	bne.n	800f710 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	3308      	adds	r3, #8
 800f760:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f764:	e853 3f00 	ldrex	r3, [r3]
 800f768:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f76a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f76c:	f023 0301 	bic.w	r3, r3, #1
 800f770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3308      	adds	r3, #8
 800f77a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f77e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f782:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f784:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f786:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f78a:	e841 2300 	strex	r3, r2, [r1]
 800f78e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f792:	2b00      	cmp	r3, #0
 800f794:	d1e1      	bne.n	800f75a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	3308      	adds	r3, #8
 800f79c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f79e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f7a0:	e853 3f00 	ldrex	r3, [r3]
 800f7a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f7a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f7a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f7ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	3308      	adds	r3, #8
 800f7b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f7ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f7bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f7c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f7c2:	e841 2300 	strex	r3, r2, [r1]
 800f7c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f7c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1e3      	bne.n	800f796 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2220      	movs	r2, #32
 800f7d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7e4:	e853 3f00 	ldrex	r3, [r3]
 800f7e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f7ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7ec:	f023 0310 	bic.w	r3, r3, #16
 800f7f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f7fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f800:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f802:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f804:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f806:	e841 2300 	strex	r3, r2, [r1]
 800f80a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f80c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1e4      	bne.n	800f7dc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f818:	4618      	mov	r0, r3
 800f81a:	f7f8 f8fb 	bl	8007a14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2202      	movs	r2, #2
 800f822:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f830:	b29b      	uxth	r3, r3
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	b29b      	uxth	r3, r3
 800f836:	4619      	mov	r1, r3
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7f4 fdb7 	bl	80043ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f83e:	e119      	b.n	800fa74 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f84a:	429a      	cmp	r2, r3
 800f84c:	f040 8112 	bne.w	800fa74 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f856:	69db      	ldr	r3, [r3, #28]
 800f858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f85c:	f040 810a 	bne.w	800fa74 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2202      	movs	r2, #2
 800f864:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f86c:	4619      	mov	r1, r3
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7f4 fd9c 	bl	80043ac <HAL_UARTEx_RxEventCallback>
      return;
 800f874:	e0fe      	b.n	800fa74 <HAL_UART_IRQHandler+0x798>
 800f876:	bf00      	nop
 800f878:	40020010 	.word	0x40020010
 800f87c:	40020028 	.word	0x40020028
 800f880:	40020040 	.word	0x40020040
 800f884:	40020058 	.word	0x40020058
 800f888:	40020070 	.word	0x40020070
 800f88c:	40020088 	.word	0x40020088
 800f890:	400200a0 	.word	0x400200a0
 800f894:	400200b8 	.word	0x400200b8
 800f898:	40020410 	.word	0x40020410
 800f89c:	40020428 	.word	0x40020428
 800f8a0:	40020440 	.word	0x40020440
 800f8a4:	40020458 	.word	0x40020458
 800f8a8:	40020470 	.word	0x40020470
 800f8ac:	40020488 	.word	0x40020488
 800f8b0:	400204a0 	.word	0x400204a0
 800f8b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	1ad3      	subs	r3, r2, r3
 800f8c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f000 80cf 	beq.w	800fa78 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800f8da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 80ca 	beq.w	800fa78 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ec:	e853 3f00 	ldrex	r3, [r3]
 800f8f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f8f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	461a      	mov	r2, r3
 800f902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f906:	647b      	str	r3, [r7, #68]	@ 0x44
 800f908:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f90a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f90c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f90e:	e841 2300 	strex	r3, r2, [r1]
 800f912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1e4      	bne.n	800f8e4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	3308      	adds	r3, #8
 800f920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f924:	e853 3f00 	ldrex	r3, [r3]
 800f928:	623b      	str	r3, [r7, #32]
   return(result);
 800f92a:	6a3a      	ldr	r2, [r7, #32]
 800f92c:	4b55      	ldr	r3, [pc, #340]	@ (800fa84 <HAL_UART_IRQHandler+0x7a8>)
 800f92e:	4013      	ands	r3, r2
 800f930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	3308      	adds	r3, #8
 800f93a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f93e:	633a      	str	r2, [r7, #48]	@ 0x30
 800f940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f946:	e841 2300 	strex	r3, r2, [r1]
 800f94a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1e3      	bne.n	800f91a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2220      	movs	r2, #32
 800f956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2200      	movs	r2, #0
 800f95e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	e853 3f00 	ldrex	r3, [r3]
 800f972:	60fb      	str	r3, [r7, #12]
   return(result);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f023 0310 	bic.w	r3, r3, #16
 800f97a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	461a      	mov	r2, r3
 800f984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f988:	61fb      	str	r3, [r7, #28]
 800f98a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98c:	69b9      	ldr	r1, [r7, #24]
 800f98e:	69fa      	ldr	r2, [r7, #28]
 800f990:	e841 2300 	strex	r3, r2, [r1]
 800f994:	617b      	str	r3, [r7, #20]
   return(result);
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1e4      	bne.n	800f966 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2202      	movs	r2, #2
 800f9a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f9a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7f4 fcff 	bl	80043ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f9ae:	e063      	b.n	800fa78 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f9b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00e      	beq.n	800f9da <HAL_UART_IRQHandler+0x6fe>
 800f9bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f9c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d008      	beq.n	800f9da <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f9d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f001 fa79 	bl	8010eca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9d8:	e051      	b.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d014      	beq.n	800fa10 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f9e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d105      	bne.n	800f9fe <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f9f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f9f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d008      	beq.n	800fa10 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d03a      	beq.n	800fa7c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	4798      	blx	r3
    }
    return;
 800fa0e:	e035      	b.n	800fa7c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fa10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d009      	beq.n	800fa30 <HAL_UART_IRQHandler+0x754>
 800fa1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d003      	beq.n	800fa30 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f001 fa23 	bl	8010e74 <UART_EndTransmit_IT>
    return;
 800fa2e:	e026      	b.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fa30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d009      	beq.n	800fa50 <HAL_UART_IRQHandler+0x774>
 800fa3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d003      	beq.n	800fa50 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f001 fa52 	bl	8010ef2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa4e:	e016      	b.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fa50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d010      	beq.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
 800fa5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	da0c      	bge.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f001 fa3a 	bl	8010ede <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa6a:	e008      	b.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
      return;
 800fa6c:	bf00      	nop
 800fa6e:	e006      	b.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
    return;
 800fa70:	bf00      	nop
 800fa72:	e004      	b.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
      return;
 800fa74:	bf00      	nop
 800fa76:	e002      	b.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
      return;
 800fa78:	bf00      	nop
 800fa7a:	e000      	b.n	800fa7e <HAL_UART_IRQHandler+0x7a2>
    return;
 800fa7c:	bf00      	nop
  }
}
 800fa7e:	37e8      	adds	r7, #232	@ 0xe8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	effffffe 	.word	0xeffffffe

0800fa88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fa90:	bf00      	nop
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800faa4:	bf00      	nop
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fab8:	bf00      	nop
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr

0800fac4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800facc:	bf00      	nop
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr

0800fad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fadc:	b092      	sub	sp, #72	@ 0x48
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fae2:	2300      	movs	r3, #0
 800fae4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	689a      	ldr	r2, [r3, #8]
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	691b      	ldr	r3, [r3, #16]
 800faf0:	431a      	orrs	r2, r3
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	431a      	orrs	r2, r3
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	69db      	ldr	r3, [r3, #28]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	4bbe      	ldr	r3, [pc, #760]	@ (800fe00 <UART_SetConfig+0x328>)
 800fb08:	4013      	ands	r3, r2
 800fb0a:	697a      	ldr	r2, [r7, #20]
 800fb0c:	6812      	ldr	r2, [r2, #0]
 800fb0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fb10:	430b      	orrs	r3, r1
 800fb12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	68da      	ldr	r2, [r3, #12]
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	430a      	orrs	r2, r1
 800fb28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4ab3      	ldr	r2, [pc, #716]	@ (800fe04 <UART_SetConfig+0x32c>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d004      	beq.n	800fb44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	6a1b      	ldr	r3, [r3, #32]
 800fb3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb40:	4313      	orrs	r3, r2
 800fb42:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	689a      	ldr	r2, [r3, #8]
 800fb4a:	4baf      	ldr	r3, [pc, #700]	@ (800fe08 <UART_SetConfig+0x330>)
 800fb4c:	4013      	ands	r3, r2
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	6812      	ldr	r2, [r2, #0]
 800fb52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fb54:	430b      	orrs	r3, r1
 800fb56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb5e:	f023 010f 	bic.w	r1, r3, #15
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	430a      	orrs	r2, r1
 800fb6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4aa6      	ldr	r2, [pc, #664]	@ (800fe0c <UART_SetConfig+0x334>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d177      	bne.n	800fc68 <UART_SetConfig+0x190>
 800fb78:	4ba5      	ldr	r3, [pc, #660]	@ (800fe10 <UART_SetConfig+0x338>)
 800fb7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fb80:	2b28      	cmp	r3, #40	@ 0x28
 800fb82:	d86d      	bhi.n	800fc60 <UART_SetConfig+0x188>
 800fb84:	a201      	add	r2, pc, #4	@ (adr r2, 800fb8c <UART_SetConfig+0xb4>)
 800fb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb8a:	bf00      	nop
 800fb8c:	0800fc31 	.word	0x0800fc31
 800fb90:	0800fc61 	.word	0x0800fc61
 800fb94:	0800fc61 	.word	0x0800fc61
 800fb98:	0800fc61 	.word	0x0800fc61
 800fb9c:	0800fc61 	.word	0x0800fc61
 800fba0:	0800fc61 	.word	0x0800fc61
 800fba4:	0800fc61 	.word	0x0800fc61
 800fba8:	0800fc61 	.word	0x0800fc61
 800fbac:	0800fc39 	.word	0x0800fc39
 800fbb0:	0800fc61 	.word	0x0800fc61
 800fbb4:	0800fc61 	.word	0x0800fc61
 800fbb8:	0800fc61 	.word	0x0800fc61
 800fbbc:	0800fc61 	.word	0x0800fc61
 800fbc0:	0800fc61 	.word	0x0800fc61
 800fbc4:	0800fc61 	.word	0x0800fc61
 800fbc8:	0800fc61 	.word	0x0800fc61
 800fbcc:	0800fc41 	.word	0x0800fc41
 800fbd0:	0800fc61 	.word	0x0800fc61
 800fbd4:	0800fc61 	.word	0x0800fc61
 800fbd8:	0800fc61 	.word	0x0800fc61
 800fbdc:	0800fc61 	.word	0x0800fc61
 800fbe0:	0800fc61 	.word	0x0800fc61
 800fbe4:	0800fc61 	.word	0x0800fc61
 800fbe8:	0800fc61 	.word	0x0800fc61
 800fbec:	0800fc49 	.word	0x0800fc49
 800fbf0:	0800fc61 	.word	0x0800fc61
 800fbf4:	0800fc61 	.word	0x0800fc61
 800fbf8:	0800fc61 	.word	0x0800fc61
 800fbfc:	0800fc61 	.word	0x0800fc61
 800fc00:	0800fc61 	.word	0x0800fc61
 800fc04:	0800fc61 	.word	0x0800fc61
 800fc08:	0800fc61 	.word	0x0800fc61
 800fc0c:	0800fc51 	.word	0x0800fc51
 800fc10:	0800fc61 	.word	0x0800fc61
 800fc14:	0800fc61 	.word	0x0800fc61
 800fc18:	0800fc61 	.word	0x0800fc61
 800fc1c:	0800fc61 	.word	0x0800fc61
 800fc20:	0800fc61 	.word	0x0800fc61
 800fc24:	0800fc61 	.word	0x0800fc61
 800fc28:	0800fc61 	.word	0x0800fc61
 800fc2c:	0800fc59 	.word	0x0800fc59
 800fc30:	2301      	movs	r3, #1
 800fc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc36:	e222      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc38:	2304      	movs	r3, #4
 800fc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc3e:	e21e      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc40:	2308      	movs	r3, #8
 800fc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc46:	e21a      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc48:	2310      	movs	r3, #16
 800fc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc4e:	e216      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc50:	2320      	movs	r3, #32
 800fc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc56:	e212      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc58:	2340      	movs	r3, #64	@ 0x40
 800fc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc5e:	e20e      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc60:	2380      	movs	r3, #128	@ 0x80
 800fc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc66:	e20a      	b.n	801007e <UART_SetConfig+0x5a6>
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a69      	ldr	r2, [pc, #420]	@ (800fe14 <UART_SetConfig+0x33c>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d130      	bne.n	800fcd4 <UART_SetConfig+0x1fc>
 800fc72:	4b67      	ldr	r3, [pc, #412]	@ (800fe10 <UART_SetConfig+0x338>)
 800fc74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc76:	f003 0307 	and.w	r3, r3, #7
 800fc7a:	2b05      	cmp	r3, #5
 800fc7c:	d826      	bhi.n	800fccc <UART_SetConfig+0x1f4>
 800fc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc84 <UART_SetConfig+0x1ac>)
 800fc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc84:	0800fc9d 	.word	0x0800fc9d
 800fc88:	0800fca5 	.word	0x0800fca5
 800fc8c:	0800fcad 	.word	0x0800fcad
 800fc90:	0800fcb5 	.word	0x0800fcb5
 800fc94:	0800fcbd 	.word	0x0800fcbd
 800fc98:	0800fcc5 	.word	0x0800fcc5
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fca2:	e1ec      	b.n	801007e <UART_SetConfig+0x5a6>
 800fca4:	2304      	movs	r3, #4
 800fca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcaa:	e1e8      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcac:	2308      	movs	r3, #8
 800fcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcb2:	e1e4      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcb4:	2310      	movs	r3, #16
 800fcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcba:	e1e0      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcbc:	2320      	movs	r3, #32
 800fcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcc2:	e1dc      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcc4:	2340      	movs	r3, #64	@ 0x40
 800fcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcca:	e1d8      	b.n	801007e <UART_SetConfig+0x5a6>
 800fccc:	2380      	movs	r3, #128	@ 0x80
 800fcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcd2:	e1d4      	b.n	801007e <UART_SetConfig+0x5a6>
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a4f      	ldr	r2, [pc, #316]	@ (800fe18 <UART_SetConfig+0x340>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d130      	bne.n	800fd40 <UART_SetConfig+0x268>
 800fcde:	4b4c      	ldr	r3, [pc, #304]	@ (800fe10 <UART_SetConfig+0x338>)
 800fce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fce2:	f003 0307 	and.w	r3, r3, #7
 800fce6:	2b05      	cmp	r3, #5
 800fce8:	d826      	bhi.n	800fd38 <UART_SetConfig+0x260>
 800fcea:	a201      	add	r2, pc, #4	@ (adr r2, 800fcf0 <UART_SetConfig+0x218>)
 800fcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf0:	0800fd09 	.word	0x0800fd09
 800fcf4:	0800fd11 	.word	0x0800fd11
 800fcf8:	0800fd19 	.word	0x0800fd19
 800fcfc:	0800fd21 	.word	0x0800fd21
 800fd00:	0800fd29 	.word	0x0800fd29
 800fd04:	0800fd31 	.word	0x0800fd31
 800fd08:	2300      	movs	r3, #0
 800fd0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd0e:	e1b6      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd10:	2304      	movs	r3, #4
 800fd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd16:	e1b2      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd18:	2308      	movs	r3, #8
 800fd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1e:	e1ae      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd20:	2310      	movs	r3, #16
 800fd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd26:	e1aa      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd28:	2320      	movs	r3, #32
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2e:	e1a6      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd30:	2340      	movs	r3, #64	@ 0x40
 800fd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd36:	e1a2      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd38:	2380      	movs	r3, #128	@ 0x80
 800fd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd3e:	e19e      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	4a35      	ldr	r2, [pc, #212]	@ (800fe1c <UART_SetConfig+0x344>)
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d130      	bne.n	800fdac <UART_SetConfig+0x2d4>
 800fd4a:	4b31      	ldr	r3, [pc, #196]	@ (800fe10 <UART_SetConfig+0x338>)
 800fd4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd4e:	f003 0307 	and.w	r3, r3, #7
 800fd52:	2b05      	cmp	r3, #5
 800fd54:	d826      	bhi.n	800fda4 <UART_SetConfig+0x2cc>
 800fd56:	a201      	add	r2, pc, #4	@ (adr r2, 800fd5c <UART_SetConfig+0x284>)
 800fd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd5c:	0800fd75 	.word	0x0800fd75
 800fd60:	0800fd7d 	.word	0x0800fd7d
 800fd64:	0800fd85 	.word	0x0800fd85
 800fd68:	0800fd8d 	.word	0x0800fd8d
 800fd6c:	0800fd95 	.word	0x0800fd95
 800fd70:	0800fd9d 	.word	0x0800fd9d
 800fd74:	2300      	movs	r3, #0
 800fd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd7a:	e180      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd7c:	2304      	movs	r3, #4
 800fd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd82:	e17c      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd84:	2308      	movs	r3, #8
 800fd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd8a:	e178      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd8c:	2310      	movs	r3, #16
 800fd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd92:	e174      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd94:	2320      	movs	r3, #32
 800fd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd9a:	e170      	b.n	801007e <UART_SetConfig+0x5a6>
 800fd9c:	2340      	movs	r3, #64	@ 0x40
 800fd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fda2:	e16c      	b.n	801007e <UART_SetConfig+0x5a6>
 800fda4:	2380      	movs	r3, #128	@ 0x80
 800fda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdaa:	e168      	b.n	801007e <UART_SetConfig+0x5a6>
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a1b      	ldr	r2, [pc, #108]	@ (800fe20 <UART_SetConfig+0x348>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d142      	bne.n	800fe3c <UART_SetConfig+0x364>
 800fdb6:	4b16      	ldr	r3, [pc, #88]	@ (800fe10 <UART_SetConfig+0x338>)
 800fdb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdba:	f003 0307 	and.w	r3, r3, #7
 800fdbe:	2b05      	cmp	r3, #5
 800fdc0:	d838      	bhi.n	800fe34 <UART_SetConfig+0x35c>
 800fdc2:	a201      	add	r2, pc, #4	@ (adr r2, 800fdc8 <UART_SetConfig+0x2f0>)
 800fdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc8:	0800fde1 	.word	0x0800fde1
 800fdcc:	0800fde9 	.word	0x0800fde9
 800fdd0:	0800fdf1 	.word	0x0800fdf1
 800fdd4:	0800fdf9 	.word	0x0800fdf9
 800fdd8:	0800fe25 	.word	0x0800fe25
 800fddc:	0800fe2d 	.word	0x0800fe2d
 800fde0:	2300      	movs	r3, #0
 800fde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fde6:	e14a      	b.n	801007e <UART_SetConfig+0x5a6>
 800fde8:	2304      	movs	r3, #4
 800fdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdee:	e146      	b.n	801007e <UART_SetConfig+0x5a6>
 800fdf0:	2308      	movs	r3, #8
 800fdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdf6:	e142      	b.n	801007e <UART_SetConfig+0x5a6>
 800fdf8:	2310      	movs	r3, #16
 800fdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdfe:	e13e      	b.n	801007e <UART_SetConfig+0x5a6>
 800fe00:	cfff69f3 	.word	0xcfff69f3
 800fe04:	58000c00 	.word	0x58000c00
 800fe08:	11fff4ff 	.word	0x11fff4ff
 800fe0c:	40011000 	.word	0x40011000
 800fe10:	58024400 	.word	0x58024400
 800fe14:	40004400 	.word	0x40004400
 800fe18:	40004800 	.word	0x40004800
 800fe1c:	40004c00 	.word	0x40004c00
 800fe20:	40005000 	.word	0x40005000
 800fe24:	2320      	movs	r3, #32
 800fe26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe2a:	e128      	b.n	801007e <UART_SetConfig+0x5a6>
 800fe2c:	2340      	movs	r3, #64	@ 0x40
 800fe2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe32:	e124      	b.n	801007e <UART_SetConfig+0x5a6>
 800fe34:	2380      	movs	r3, #128	@ 0x80
 800fe36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe3a:	e120      	b.n	801007e <UART_SetConfig+0x5a6>
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4acb      	ldr	r2, [pc, #812]	@ (8010170 <UART_SetConfig+0x698>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d176      	bne.n	800ff34 <UART_SetConfig+0x45c>
 800fe46:	4bcb      	ldr	r3, [pc, #812]	@ (8010174 <UART_SetConfig+0x69c>)
 800fe48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe4e:	2b28      	cmp	r3, #40	@ 0x28
 800fe50:	d86c      	bhi.n	800ff2c <UART_SetConfig+0x454>
 800fe52:	a201      	add	r2, pc, #4	@ (adr r2, 800fe58 <UART_SetConfig+0x380>)
 800fe54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe58:	0800fefd 	.word	0x0800fefd
 800fe5c:	0800ff2d 	.word	0x0800ff2d
 800fe60:	0800ff2d 	.word	0x0800ff2d
 800fe64:	0800ff2d 	.word	0x0800ff2d
 800fe68:	0800ff2d 	.word	0x0800ff2d
 800fe6c:	0800ff2d 	.word	0x0800ff2d
 800fe70:	0800ff2d 	.word	0x0800ff2d
 800fe74:	0800ff2d 	.word	0x0800ff2d
 800fe78:	0800ff05 	.word	0x0800ff05
 800fe7c:	0800ff2d 	.word	0x0800ff2d
 800fe80:	0800ff2d 	.word	0x0800ff2d
 800fe84:	0800ff2d 	.word	0x0800ff2d
 800fe88:	0800ff2d 	.word	0x0800ff2d
 800fe8c:	0800ff2d 	.word	0x0800ff2d
 800fe90:	0800ff2d 	.word	0x0800ff2d
 800fe94:	0800ff2d 	.word	0x0800ff2d
 800fe98:	0800ff0d 	.word	0x0800ff0d
 800fe9c:	0800ff2d 	.word	0x0800ff2d
 800fea0:	0800ff2d 	.word	0x0800ff2d
 800fea4:	0800ff2d 	.word	0x0800ff2d
 800fea8:	0800ff2d 	.word	0x0800ff2d
 800feac:	0800ff2d 	.word	0x0800ff2d
 800feb0:	0800ff2d 	.word	0x0800ff2d
 800feb4:	0800ff2d 	.word	0x0800ff2d
 800feb8:	0800ff15 	.word	0x0800ff15
 800febc:	0800ff2d 	.word	0x0800ff2d
 800fec0:	0800ff2d 	.word	0x0800ff2d
 800fec4:	0800ff2d 	.word	0x0800ff2d
 800fec8:	0800ff2d 	.word	0x0800ff2d
 800fecc:	0800ff2d 	.word	0x0800ff2d
 800fed0:	0800ff2d 	.word	0x0800ff2d
 800fed4:	0800ff2d 	.word	0x0800ff2d
 800fed8:	0800ff1d 	.word	0x0800ff1d
 800fedc:	0800ff2d 	.word	0x0800ff2d
 800fee0:	0800ff2d 	.word	0x0800ff2d
 800fee4:	0800ff2d 	.word	0x0800ff2d
 800fee8:	0800ff2d 	.word	0x0800ff2d
 800feec:	0800ff2d 	.word	0x0800ff2d
 800fef0:	0800ff2d 	.word	0x0800ff2d
 800fef4:	0800ff2d 	.word	0x0800ff2d
 800fef8:	0800ff25 	.word	0x0800ff25
 800fefc:	2301      	movs	r3, #1
 800fefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff02:	e0bc      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff04:	2304      	movs	r3, #4
 800ff06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff0a:	e0b8      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff0c:	2308      	movs	r3, #8
 800ff0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff12:	e0b4      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff14:	2310      	movs	r3, #16
 800ff16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff1a:	e0b0      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff1c:	2320      	movs	r3, #32
 800ff1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff22:	e0ac      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff24:	2340      	movs	r3, #64	@ 0x40
 800ff26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff2a:	e0a8      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff2c:	2380      	movs	r3, #128	@ 0x80
 800ff2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff32:	e0a4      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	4a8f      	ldr	r2, [pc, #572]	@ (8010178 <UART_SetConfig+0x6a0>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d130      	bne.n	800ffa0 <UART_SetConfig+0x4c8>
 800ff3e:	4b8d      	ldr	r3, [pc, #564]	@ (8010174 <UART_SetConfig+0x69c>)
 800ff40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff42:	f003 0307 	and.w	r3, r3, #7
 800ff46:	2b05      	cmp	r3, #5
 800ff48:	d826      	bhi.n	800ff98 <UART_SetConfig+0x4c0>
 800ff4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ff50 <UART_SetConfig+0x478>)
 800ff4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff50:	0800ff69 	.word	0x0800ff69
 800ff54:	0800ff71 	.word	0x0800ff71
 800ff58:	0800ff79 	.word	0x0800ff79
 800ff5c:	0800ff81 	.word	0x0800ff81
 800ff60:	0800ff89 	.word	0x0800ff89
 800ff64:	0800ff91 	.word	0x0800ff91
 800ff68:	2300      	movs	r3, #0
 800ff6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff6e:	e086      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff70:	2304      	movs	r3, #4
 800ff72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff76:	e082      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff78:	2308      	movs	r3, #8
 800ff7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff7e:	e07e      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff80:	2310      	movs	r3, #16
 800ff82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff86:	e07a      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff88:	2320      	movs	r3, #32
 800ff8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff8e:	e076      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff90:	2340      	movs	r3, #64	@ 0x40
 800ff92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff96:	e072      	b.n	801007e <UART_SetConfig+0x5a6>
 800ff98:	2380      	movs	r3, #128	@ 0x80
 800ff9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff9e:	e06e      	b.n	801007e <UART_SetConfig+0x5a6>
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4a75      	ldr	r2, [pc, #468]	@ (801017c <UART_SetConfig+0x6a4>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d130      	bne.n	801000c <UART_SetConfig+0x534>
 800ffaa:	4b72      	ldr	r3, [pc, #456]	@ (8010174 <UART_SetConfig+0x69c>)
 800ffac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffae:	f003 0307 	and.w	r3, r3, #7
 800ffb2:	2b05      	cmp	r3, #5
 800ffb4:	d826      	bhi.n	8010004 <UART_SetConfig+0x52c>
 800ffb6:	a201      	add	r2, pc, #4	@ (adr r2, 800ffbc <UART_SetConfig+0x4e4>)
 800ffb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffbc:	0800ffd5 	.word	0x0800ffd5
 800ffc0:	0800ffdd 	.word	0x0800ffdd
 800ffc4:	0800ffe5 	.word	0x0800ffe5
 800ffc8:	0800ffed 	.word	0x0800ffed
 800ffcc:	0800fff5 	.word	0x0800fff5
 800ffd0:	0800fffd 	.word	0x0800fffd
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffda:	e050      	b.n	801007e <UART_SetConfig+0x5a6>
 800ffdc:	2304      	movs	r3, #4
 800ffde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffe2:	e04c      	b.n	801007e <UART_SetConfig+0x5a6>
 800ffe4:	2308      	movs	r3, #8
 800ffe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffea:	e048      	b.n	801007e <UART_SetConfig+0x5a6>
 800ffec:	2310      	movs	r3, #16
 800ffee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fff2:	e044      	b.n	801007e <UART_SetConfig+0x5a6>
 800fff4:	2320      	movs	r3, #32
 800fff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fffa:	e040      	b.n	801007e <UART_SetConfig+0x5a6>
 800fffc:	2340      	movs	r3, #64	@ 0x40
 800fffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010002:	e03c      	b.n	801007e <UART_SetConfig+0x5a6>
 8010004:	2380      	movs	r3, #128	@ 0x80
 8010006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801000a:	e038      	b.n	801007e <UART_SetConfig+0x5a6>
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a5b      	ldr	r2, [pc, #364]	@ (8010180 <UART_SetConfig+0x6a8>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d130      	bne.n	8010078 <UART_SetConfig+0x5a0>
 8010016:	4b57      	ldr	r3, [pc, #348]	@ (8010174 <UART_SetConfig+0x69c>)
 8010018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801001a:	f003 0307 	and.w	r3, r3, #7
 801001e:	2b05      	cmp	r3, #5
 8010020:	d826      	bhi.n	8010070 <UART_SetConfig+0x598>
 8010022:	a201      	add	r2, pc, #4	@ (adr r2, 8010028 <UART_SetConfig+0x550>)
 8010024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010028:	08010041 	.word	0x08010041
 801002c:	08010049 	.word	0x08010049
 8010030:	08010051 	.word	0x08010051
 8010034:	08010059 	.word	0x08010059
 8010038:	08010061 	.word	0x08010061
 801003c:	08010069 	.word	0x08010069
 8010040:	2302      	movs	r3, #2
 8010042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010046:	e01a      	b.n	801007e <UART_SetConfig+0x5a6>
 8010048:	2304      	movs	r3, #4
 801004a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801004e:	e016      	b.n	801007e <UART_SetConfig+0x5a6>
 8010050:	2308      	movs	r3, #8
 8010052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010056:	e012      	b.n	801007e <UART_SetConfig+0x5a6>
 8010058:	2310      	movs	r3, #16
 801005a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801005e:	e00e      	b.n	801007e <UART_SetConfig+0x5a6>
 8010060:	2320      	movs	r3, #32
 8010062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010066:	e00a      	b.n	801007e <UART_SetConfig+0x5a6>
 8010068:	2340      	movs	r3, #64	@ 0x40
 801006a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801006e:	e006      	b.n	801007e <UART_SetConfig+0x5a6>
 8010070:	2380      	movs	r3, #128	@ 0x80
 8010072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010076:	e002      	b.n	801007e <UART_SetConfig+0x5a6>
 8010078:	2380      	movs	r3, #128	@ 0x80
 801007a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4a3f      	ldr	r2, [pc, #252]	@ (8010180 <UART_SetConfig+0x6a8>)
 8010084:	4293      	cmp	r3, r2
 8010086:	f040 80f8 	bne.w	801027a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801008a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801008e:	2b20      	cmp	r3, #32
 8010090:	dc46      	bgt.n	8010120 <UART_SetConfig+0x648>
 8010092:	2b02      	cmp	r3, #2
 8010094:	f2c0 8082 	blt.w	801019c <UART_SetConfig+0x6c4>
 8010098:	3b02      	subs	r3, #2
 801009a:	2b1e      	cmp	r3, #30
 801009c:	d87e      	bhi.n	801019c <UART_SetConfig+0x6c4>
 801009e:	a201      	add	r2, pc, #4	@ (adr r2, 80100a4 <UART_SetConfig+0x5cc>)
 80100a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a4:	08010127 	.word	0x08010127
 80100a8:	0801019d 	.word	0x0801019d
 80100ac:	0801012f 	.word	0x0801012f
 80100b0:	0801019d 	.word	0x0801019d
 80100b4:	0801019d 	.word	0x0801019d
 80100b8:	0801019d 	.word	0x0801019d
 80100bc:	0801013f 	.word	0x0801013f
 80100c0:	0801019d 	.word	0x0801019d
 80100c4:	0801019d 	.word	0x0801019d
 80100c8:	0801019d 	.word	0x0801019d
 80100cc:	0801019d 	.word	0x0801019d
 80100d0:	0801019d 	.word	0x0801019d
 80100d4:	0801019d 	.word	0x0801019d
 80100d8:	0801019d 	.word	0x0801019d
 80100dc:	0801014f 	.word	0x0801014f
 80100e0:	0801019d 	.word	0x0801019d
 80100e4:	0801019d 	.word	0x0801019d
 80100e8:	0801019d 	.word	0x0801019d
 80100ec:	0801019d 	.word	0x0801019d
 80100f0:	0801019d 	.word	0x0801019d
 80100f4:	0801019d 	.word	0x0801019d
 80100f8:	0801019d 	.word	0x0801019d
 80100fc:	0801019d 	.word	0x0801019d
 8010100:	0801019d 	.word	0x0801019d
 8010104:	0801019d 	.word	0x0801019d
 8010108:	0801019d 	.word	0x0801019d
 801010c:	0801019d 	.word	0x0801019d
 8010110:	0801019d 	.word	0x0801019d
 8010114:	0801019d 	.word	0x0801019d
 8010118:	0801019d 	.word	0x0801019d
 801011c:	0801018f 	.word	0x0801018f
 8010120:	2b40      	cmp	r3, #64	@ 0x40
 8010122:	d037      	beq.n	8010194 <UART_SetConfig+0x6bc>
 8010124:	e03a      	b.n	801019c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010126:	f7fc fe5f 	bl	800cde8 <HAL_RCCEx_GetD3PCLK1Freq>
 801012a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801012c:	e03c      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801012e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010132:	4618      	mov	r0, r3
 8010134:	f7fc fe6e 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801013a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801013c:	e034      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801013e:	f107 0318 	add.w	r3, r7, #24
 8010142:	4618      	mov	r0, r3
 8010144:	f7fc ffba 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801014c:	e02c      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801014e:	4b09      	ldr	r3, [pc, #36]	@ (8010174 <UART_SetConfig+0x69c>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f003 0320 	and.w	r3, r3, #32
 8010156:	2b00      	cmp	r3, #0
 8010158:	d016      	beq.n	8010188 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801015a:	4b06      	ldr	r3, [pc, #24]	@ (8010174 <UART_SetConfig+0x69c>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	08db      	lsrs	r3, r3, #3
 8010160:	f003 0303 	and.w	r3, r3, #3
 8010164:	4a07      	ldr	r2, [pc, #28]	@ (8010184 <UART_SetConfig+0x6ac>)
 8010166:	fa22 f303 	lsr.w	r3, r2, r3
 801016a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801016c:	e01c      	b.n	80101a8 <UART_SetConfig+0x6d0>
 801016e:	bf00      	nop
 8010170:	40011400 	.word	0x40011400
 8010174:	58024400 	.word	0x58024400
 8010178:	40007800 	.word	0x40007800
 801017c:	40007c00 	.word	0x40007c00
 8010180:	58000c00 	.word	0x58000c00
 8010184:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010188:	4b9d      	ldr	r3, [pc, #628]	@ (8010400 <UART_SetConfig+0x928>)
 801018a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801018c:	e00c      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801018e:	4b9d      	ldr	r3, [pc, #628]	@ (8010404 <UART_SetConfig+0x92c>)
 8010190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010192:	e009      	b.n	80101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801019a:	e005      	b.n	80101a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801019c:	2300      	movs	r3, #0
 801019e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80101a0:	2301      	movs	r3, #1
 80101a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80101a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80101a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f000 81de 	beq.w	801056c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101b4:	4a94      	ldr	r2, [pc, #592]	@ (8010408 <UART_SetConfig+0x930>)
 80101b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101ba:	461a      	mov	r2, r3
 80101bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101be:	fbb3 f3f2 	udiv	r3, r3, r2
 80101c2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	685a      	ldr	r2, [r3, #4]
 80101c8:	4613      	mov	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	4413      	add	r3, r2
 80101ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d305      	bcc.n	80101e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101dc:	429a      	cmp	r2, r3
 80101de:	d903      	bls.n	80101e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80101e0:	2301      	movs	r3, #1
 80101e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80101e6:	e1c1      	b.n	801056c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101ea:	2200      	movs	r2, #0
 80101ec:	60bb      	str	r3, [r7, #8]
 80101ee:	60fa      	str	r2, [r7, #12]
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101f4:	4a84      	ldr	r2, [pc, #528]	@ (8010408 <UART_SetConfig+0x930>)
 80101f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	2200      	movs	r2, #0
 80101fe:	603b      	str	r3, [r7, #0]
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801020a:	f7f0 fa7d 	bl	8000708 <__aeabi_uldivmod>
 801020e:	4602      	mov	r2, r0
 8010210:	460b      	mov	r3, r1
 8010212:	4610      	mov	r0, r2
 8010214:	4619      	mov	r1, r3
 8010216:	f04f 0200 	mov.w	r2, #0
 801021a:	f04f 0300 	mov.w	r3, #0
 801021e:	020b      	lsls	r3, r1, #8
 8010220:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010224:	0202      	lsls	r2, r0, #8
 8010226:	6979      	ldr	r1, [r7, #20]
 8010228:	6849      	ldr	r1, [r1, #4]
 801022a:	0849      	lsrs	r1, r1, #1
 801022c:	2000      	movs	r0, #0
 801022e:	460c      	mov	r4, r1
 8010230:	4605      	mov	r5, r0
 8010232:	eb12 0804 	adds.w	r8, r2, r4
 8010236:	eb43 0905 	adc.w	r9, r3, r5
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	469a      	mov	sl, r3
 8010242:	4693      	mov	fp, r2
 8010244:	4652      	mov	r2, sl
 8010246:	465b      	mov	r3, fp
 8010248:	4640      	mov	r0, r8
 801024a:	4649      	mov	r1, r9
 801024c:	f7f0 fa5c 	bl	8000708 <__aeabi_uldivmod>
 8010250:	4602      	mov	r2, r0
 8010252:	460b      	mov	r3, r1
 8010254:	4613      	mov	r3, r2
 8010256:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801025a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801025e:	d308      	bcc.n	8010272 <UART_SetConfig+0x79a>
 8010260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010266:	d204      	bcs.n	8010272 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801026e:	60da      	str	r2, [r3, #12]
 8010270:	e17c      	b.n	801056c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010272:	2301      	movs	r3, #1
 8010274:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010278:	e178      	b.n	801056c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	69db      	ldr	r3, [r3, #28]
 801027e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010282:	f040 80c5 	bne.w	8010410 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010286:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801028a:	2b20      	cmp	r3, #32
 801028c:	dc48      	bgt.n	8010320 <UART_SetConfig+0x848>
 801028e:	2b00      	cmp	r3, #0
 8010290:	db7b      	blt.n	801038a <UART_SetConfig+0x8b2>
 8010292:	2b20      	cmp	r3, #32
 8010294:	d879      	bhi.n	801038a <UART_SetConfig+0x8b2>
 8010296:	a201      	add	r2, pc, #4	@ (adr r2, 801029c <UART_SetConfig+0x7c4>)
 8010298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029c:	08010327 	.word	0x08010327
 80102a0:	0801032f 	.word	0x0801032f
 80102a4:	0801038b 	.word	0x0801038b
 80102a8:	0801038b 	.word	0x0801038b
 80102ac:	08010337 	.word	0x08010337
 80102b0:	0801038b 	.word	0x0801038b
 80102b4:	0801038b 	.word	0x0801038b
 80102b8:	0801038b 	.word	0x0801038b
 80102bc:	08010347 	.word	0x08010347
 80102c0:	0801038b 	.word	0x0801038b
 80102c4:	0801038b 	.word	0x0801038b
 80102c8:	0801038b 	.word	0x0801038b
 80102cc:	0801038b 	.word	0x0801038b
 80102d0:	0801038b 	.word	0x0801038b
 80102d4:	0801038b 	.word	0x0801038b
 80102d8:	0801038b 	.word	0x0801038b
 80102dc:	08010357 	.word	0x08010357
 80102e0:	0801038b 	.word	0x0801038b
 80102e4:	0801038b 	.word	0x0801038b
 80102e8:	0801038b 	.word	0x0801038b
 80102ec:	0801038b 	.word	0x0801038b
 80102f0:	0801038b 	.word	0x0801038b
 80102f4:	0801038b 	.word	0x0801038b
 80102f8:	0801038b 	.word	0x0801038b
 80102fc:	0801038b 	.word	0x0801038b
 8010300:	0801038b 	.word	0x0801038b
 8010304:	0801038b 	.word	0x0801038b
 8010308:	0801038b 	.word	0x0801038b
 801030c:	0801038b 	.word	0x0801038b
 8010310:	0801038b 	.word	0x0801038b
 8010314:	0801038b 	.word	0x0801038b
 8010318:	0801038b 	.word	0x0801038b
 801031c:	0801037d 	.word	0x0801037d
 8010320:	2b40      	cmp	r3, #64	@ 0x40
 8010322:	d02e      	beq.n	8010382 <UART_SetConfig+0x8aa>
 8010324:	e031      	b.n	801038a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010326:	f7fa fda9 	bl	800ae7c <HAL_RCC_GetPCLK1Freq>
 801032a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801032c:	e033      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801032e:	f7fa fdbb 	bl	800aea8 <HAL_RCC_GetPCLK2Freq>
 8010332:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010334:	e02f      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801033a:	4618      	mov	r0, r3
 801033c:	f7fc fd6a 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010344:	e027      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010346:	f107 0318 	add.w	r3, r7, #24
 801034a:	4618      	mov	r0, r3
 801034c:	f7fc feb6 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010350:	69fb      	ldr	r3, [r7, #28]
 8010352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010354:	e01f      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010356:	4b2d      	ldr	r3, [pc, #180]	@ (801040c <UART_SetConfig+0x934>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f003 0320 	and.w	r3, r3, #32
 801035e:	2b00      	cmp	r3, #0
 8010360:	d009      	beq.n	8010376 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010362:	4b2a      	ldr	r3, [pc, #168]	@ (801040c <UART_SetConfig+0x934>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	08db      	lsrs	r3, r3, #3
 8010368:	f003 0303 	and.w	r3, r3, #3
 801036c:	4a24      	ldr	r2, [pc, #144]	@ (8010400 <UART_SetConfig+0x928>)
 801036e:	fa22 f303 	lsr.w	r3, r2, r3
 8010372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010374:	e00f      	b.n	8010396 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010376:	4b22      	ldr	r3, [pc, #136]	@ (8010400 <UART_SetConfig+0x928>)
 8010378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801037a:	e00c      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801037c:	4b21      	ldr	r3, [pc, #132]	@ (8010404 <UART_SetConfig+0x92c>)
 801037e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010380:	e009      	b.n	8010396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010388:	e005      	b.n	8010396 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801038a:	2300      	movs	r3, #0
 801038c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801038e:	2301      	movs	r3, #1
 8010390:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 80e7 	beq.w	801056c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103a2:	4a19      	ldr	r2, [pc, #100]	@ (8010408 <UART_SetConfig+0x930>)
 80103a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103a8:	461a      	mov	r2, r3
 80103aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80103b0:	005a      	lsls	r2, r3, #1
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	085b      	lsrs	r3, r3, #1
 80103b8:	441a      	add	r2, r3
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	fbb2 f3f3 	udiv	r3, r2, r3
 80103c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c6:	2b0f      	cmp	r3, #15
 80103c8:	d916      	bls.n	80103f8 <UART_SetConfig+0x920>
 80103ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103d0:	d212      	bcs.n	80103f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80103d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	f023 030f 	bic.w	r3, r3, #15
 80103da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80103dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103de:	085b      	lsrs	r3, r3, #1
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	f003 0307 	and.w	r3, r3, #7
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80103ea:	4313      	orrs	r3, r2
 80103ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80103f4:	60da      	str	r2, [r3, #12]
 80103f6:	e0b9      	b.n	801056c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80103f8:	2301      	movs	r3, #1
 80103fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80103fe:	e0b5      	b.n	801056c <UART_SetConfig+0xa94>
 8010400:	03d09000 	.word	0x03d09000
 8010404:	003d0900 	.word	0x003d0900
 8010408:	08015f28 	.word	0x08015f28
 801040c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010410:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010414:	2b20      	cmp	r3, #32
 8010416:	dc49      	bgt.n	80104ac <UART_SetConfig+0x9d4>
 8010418:	2b00      	cmp	r3, #0
 801041a:	db7c      	blt.n	8010516 <UART_SetConfig+0xa3e>
 801041c:	2b20      	cmp	r3, #32
 801041e:	d87a      	bhi.n	8010516 <UART_SetConfig+0xa3e>
 8010420:	a201      	add	r2, pc, #4	@ (adr r2, 8010428 <UART_SetConfig+0x950>)
 8010422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010426:	bf00      	nop
 8010428:	080104b3 	.word	0x080104b3
 801042c:	080104bb 	.word	0x080104bb
 8010430:	08010517 	.word	0x08010517
 8010434:	08010517 	.word	0x08010517
 8010438:	080104c3 	.word	0x080104c3
 801043c:	08010517 	.word	0x08010517
 8010440:	08010517 	.word	0x08010517
 8010444:	08010517 	.word	0x08010517
 8010448:	080104d3 	.word	0x080104d3
 801044c:	08010517 	.word	0x08010517
 8010450:	08010517 	.word	0x08010517
 8010454:	08010517 	.word	0x08010517
 8010458:	08010517 	.word	0x08010517
 801045c:	08010517 	.word	0x08010517
 8010460:	08010517 	.word	0x08010517
 8010464:	08010517 	.word	0x08010517
 8010468:	080104e3 	.word	0x080104e3
 801046c:	08010517 	.word	0x08010517
 8010470:	08010517 	.word	0x08010517
 8010474:	08010517 	.word	0x08010517
 8010478:	08010517 	.word	0x08010517
 801047c:	08010517 	.word	0x08010517
 8010480:	08010517 	.word	0x08010517
 8010484:	08010517 	.word	0x08010517
 8010488:	08010517 	.word	0x08010517
 801048c:	08010517 	.word	0x08010517
 8010490:	08010517 	.word	0x08010517
 8010494:	08010517 	.word	0x08010517
 8010498:	08010517 	.word	0x08010517
 801049c:	08010517 	.word	0x08010517
 80104a0:	08010517 	.word	0x08010517
 80104a4:	08010517 	.word	0x08010517
 80104a8:	08010509 	.word	0x08010509
 80104ac:	2b40      	cmp	r3, #64	@ 0x40
 80104ae:	d02e      	beq.n	801050e <UART_SetConfig+0xa36>
 80104b0:	e031      	b.n	8010516 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80104b2:	f7fa fce3 	bl	800ae7c <HAL_RCC_GetPCLK1Freq>
 80104b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80104b8:	e033      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80104ba:	f7fa fcf5 	bl	800aea8 <HAL_RCC_GetPCLK2Freq>
 80104be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80104c0:	e02f      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fc fca4 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80104cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104d0:	e027      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104d2:	f107 0318 	add.w	r3, r7, #24
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fc fdf0 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104e0:	e01f      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104e2:	4b2d      	ldr	r3, [pc, #180]	@ (8010598 <UART_SetConfig+0xac0>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f003 0320 	and.w	r3, r3, #32
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d009      	beq.n	8010502 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80104ee:	4b2a      	ldr	r3, [pc, #168]	@ (8010598 <UART_SetConfig+0xac0>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	08db      	lsrs	r3, r3, #3
 80104f4:	f003 0303 	and.w	r3, r3, #3
 80104f8:	4a28      	ldr	r2, [pc, #160]	@ (801059c <UART_SetConfig+0xac4>)
 80104fa:	fa22 f303 	lsr.w	r3, r2, r3
 80104fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010500:	e00f      	b.n	8010522 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010502:	4b26      	ldr	r3, [pc, #152]	@ (801059c <UART_SetConfig+0xac4>)
 8010504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010506:	e00c      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010508:	4b25      	ldr	r3, [pc, #148]	@ (80105a0 <UART_SetConfig+0xac8>)
 801050a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801050c:	e009      	b.n	8010522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801050e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010514:	e005      	b.n	8010522 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010516:	2300      	movs	r3, #0
 8010518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801051a:	2301      	movs	r3, #1
 801051c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010520:	bf00      	nop
    }

    if (pclk != 0U)
 8010522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010524:	2b00      	cmp	r3, #0
 8010526:	d021      	beq.n	801056c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801052c:	4a1d      	ldr	r2, [pc, #116]	@ (80105a4 <UART_SetConfig+0xacc>)
 801052e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010532:	461a      	mov	r2, r3
 8010534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010536:	fbb3 f2f2 	udiv	r2, r3, r2
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	085b      	lsrs	r3, r3, #1
 8010540:	441a      	add	r2, r3
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	fbb2 f3f3 	udiv	r3, r2, r3
 801054a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801054c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801054e:	2b0f      	cmp	r3, #15
 8010550:	d909      	bls.n	8010566 <UART_SetConfig+0xa8e>
 8010552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010558:	d205      	bcs.n	8010566 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801055a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801055c:	b29a      	uxth	r2, r3
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	60da      	str	r2, [r3, #12]
 8010564:	e002      	b.n	801056c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	2201      	movs	r2, #1
 8010570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	2201      	movs	r2, #1
 8010578:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	2200      	movs	r2, #0
 8010580:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	2200      	movs	r2, #0
 8010586:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010588:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801058c:	4618      	mov	r0, r3
 801058e:	3748      	adds	r7, #72	@ 0x48
 8010590:	46bd      	mov	sp, r7
 8010592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010596:	bf00      	nop
 8010598:	58024400 	.word	0x58024400
 801059c:	03d09000 	.word	0x03d09000
 80105a0:	003d0900 	.word	0x003d0900
 80105a4:	08015f28 	.word	0x08015f28

080105a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105b4:	f003 0308 	and.w	r3, r3, #8
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00a      	beq.n	80105d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	430a      	orrs	r2, r1
 80105d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105d6:	f003 0301 	and.w	r3, r3, #1
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00a      	beq.n	80105f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	430a      	orrs	r2, r1
 80105f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f8:	f003 0302 	and.w	r3, r3, #2
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00a      	beq.n	8010616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	430a      	orrs	r2, r1
 8010614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801061a:	f003 0304 	and.w	r3, r3, #4
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00a      	beq.n	8010638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	430a      	orrs	r2, r1
 8010636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801063c:	f003 0310 	and.w	r3, r3, #16
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00a      	beq.n	801065a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	689b      	ldr	r3, [r3, #8]
 801064a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	430a      	orrs	r2, r1
 8010658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801065e:	f003 0320 	and.w	r3, r3, #32
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00a      	beq.n	801067c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	689b      	ldr	r3, [r3, #8]
 801066c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	430a      	orrs	r2, r1
 801067a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010684:	2b00      	cmp	r3, #0
 8010686:	d01a      	beq.n	80106be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	430a      	orrs	r2, r1
 801069c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80106a6:	d10a      	bne.n	80106be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	430a      	orrs	r2, r1
 80106bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d00a      	beq.n	80106e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	430a      	orrs	r2, r1
 80106de:	605a      	str	r2, [r3, #4]
  }
}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b098      	sub	sp, #96	@ 0x60
 80106f0:	af02      	add	r7, sp, #8
 80106f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2200      	movs	r2, #0
 80106f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106fc:	f7f4 fd52 	bl	80051a4 <HAL_GetTick>
 8010700:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f003 0308 	and.w	r3, r3, #8
 801070c:	2b08      	cmp	r3, #8
 801070e:	d12f      	bne.n	8010770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010718:	2200      	movs	r2, #0
 801071a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 f88e 	bl	8010840 <UART_WaitOnFlagUntilTimeout>
 8010724:	4603      	mov	r3, r0
 8010726:	2b00      	cmp	r3, #0
 8010728:	d022      	beq.n	8010770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010732:	e853 3f00 	ldrex	r3, [r3]
 8010736:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801073a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801073e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	461a      	mov	r2, r3
 8010746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010748:	647b      	str	r3, [r7, #68]	@ 0x44
 801074a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801074c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801074e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010750:	e841 2300 	strex	r3, r2, [r1]
 8010754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010758:	2b00      	cmp	r3, #0
 801075a:	d1e6      	bne.n	801072a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2220      	movs	r2, #32
 8010760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801076c:	2303      	movs	r3, #3
 801076e:	e063      	b.n	8010838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f003 0304 	and.w	r3, r3, #4
 801077a:	2b04      	cmp	r3, #4
 801077c:	d149      	bne.n	8010812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801077e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010786:	2200      	movs	r2, #0
 8010788:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f000 f857 	bl	8010840 <UART_WaitOnFlagUntilTimeout>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d03c      	beq.n	8010812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a0:	e853 3f00 	ldrex	r3, [r3]
 80107a4:	623b      	str	r3, [r7, #32]
   return(result);
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80107ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	461a      	mov	r2, r3
 80107b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80107b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107be:	e841 2300 	strex	r3, r2, [r1]
 80107c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1e6      	bne.n	8010798 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	3308      	adds	r3, #8
 80107d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	e853 3f00 	ldrex	r3, [r3]
 80107d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f023 0301 	bic.w	r3, r3, #1
 80107e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	3308      	adds	r3, #8
 80107e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107ea:	61fa      	str	r2, [r7, #28]
 80107ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ee:	69b9      	ldr	r1, [r7, #24]
 80107f0:	69fa      	ldr	r2, [r7, #28]
 80107f2:	e841 2300 	strex	r3, r2, [r1]
 80107f6:	617b      	str	r3, [r7, #20]
   return(result);
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d1e5      	bne.n	80107ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2220      	movs	r2, #32
 8010802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801080e:	2303      	movs	r3, #3
 8010810:	e012      	b.n	8010838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2220      	movs	r2, #32
 8010816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2220      	movs	r2, #32
 801081e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010836:	2300      	movs	r3, #0
}
 8010838:	4618      	mov	r0, r3
 801083a:	3758      	adds	r7, #88	@ 0x58
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	603b      	str	r3, [r7, #0]
 801084c:	4613      	mov	r3, r2
 801084e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010850:	e04f      	b.n	80108f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010858:	d04b      	beq.n	80108f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801085a:	f7f4 fca3 	bl	80051a4 <HAL_GetTick>
 801085e:	4602      	mov	r2, r0
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	69ba      	ldr	r2, [r7, #24]
 8010866:	429a      	cmp	r2, r3
 8010868:	d302      	bcc.n	8010870 <UART_WaitOnFlagUntilTimeout+0x30>
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d101      	bne.n	8010874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010870:	2303      	movs	r3, #3
 8010872:	e04e      	b.n	8010912 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f003 0304 	and.w	r3, r3, #4
 801087e:	2b00      	cmp	r3, #0
 8010880:	d037      	beq.n	80108f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	2b80      	cmp	r3, #128	@ 0x80
 8010886:	d034      	beq.n	80108f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	2b40      	cmp	r3, #64	@ 0x40
 801088c:	d031      	beq.n	80108f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	69db      	ldr	r3, [r3, #28]
 8010894:	f003 0308 	and.w	r3, r3, #8
 8010898:	2b08      	cmp	r3, #8
 801089a:	d110      	bne.n	80108be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2208      	movs	r2, #8
 80108a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f000 f921 	bl	8010aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2208      	movs	r2, #8
 80108ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2200      	movs	r2, #0
 80108b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80108ba:	2301      	movs	r3, #1
 80108bc:	e029      	b.n	8010912 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	69db      	ldr	r3, [r3, #28]
 80108c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80108c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108cc:	d111      	bne.n	80108f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80108d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	f000 f907 	bl	8010aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2220      	movs	r2, #32
 80108e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2200      	movs	r2, #0
 80108ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80108ee:	2303      	movs	r3, #3
 80108f0:	e00f      	b.n	8010912 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	69da      	ldr	r2, [r3, #28]
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	4013      	ands	r3, r2
 80108fc:	68ba      	ldr	r2, [r7, #8]
 80108fe:	429a      	cmp	r2, r3
 8010900:	bf0c      	ite	eq
 8010902:	2301      	moveq	r3, #1
 8010904:	2300      	movne	r3, #0
 8010906:	b2db      	uxtb	r3, r3
 8010908:	461a      	mov	r2, r3
 801090a:	79fb      	ldrb	r3, [r7, #7]
 801090c:	429a      	cmp	r2, r3
 801090e:	d0a0      	beq.n	8010852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010910:	2300      	movs	r3, #0
}
 8010912:	4618      	mov	r0, r3
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
	...

0801091c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b096      	sub	sp, #88	@ 0x58
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	4613      	mov	r3, r2
 8010928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	68ba      	ldr	r2, [r7, #8]
 801092e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	88fa      	ldrh	r2, [r7, #6]
 8010934:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2200      	movs	r2, #0
 801093c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2222      	movs	r2, #34	@ 0x22
 8010944:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801094e:	2b00      	cmp	r3, #0
 8010950:	d02d      	beq.n	80109ae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010958:	4a40      	ldr	r2, [pc, #256]	@ (8010a5c <UART_Start_Receive_DMA+0x140>)
 801095a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010962:	4a3f      	ldr	r2, [pc, #252]	@ (8010a60 <UART_Start_Receive_DMA+0x144>)
 8010964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801096c:	4a3d      	ldr	r2, [pc, #244]	@ (8010a64 <UART_Start_Receive_DMA+0x148>)
 801096e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010976:	2200      	movs	r2, #0
 8010978:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3324      	adds	r3, #36	@ 0x24
 8010986:	4619      	mov	r1, r3
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801098c:	461a      	mov	r2, r3
 801098e:	88fb      	ldrh	r3, [r7, #6]
 8010990:	f7f6 fdd6 	bl	8007540 <HAL_DMA_Start_IT>
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d009      	beq.n	80109ae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2210      	movs	r2, #16
 801099e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2220      	movs	r2, #32
 80109a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80109aa:	2301      	movs	r3, #1
 80109ac:	e051      	b.n	8010a52 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	691b      	ldr	r3, [r3, #16]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d018      	beq.n	80109e8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109be:	e853 3f00 	ldrex	r3, [r3]
 80109c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80109c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80109ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	461a      	mov	r2, r3
 80109d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109d6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80109da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80109dc:	e841 2300 	strex	r3, r2, [r1]
 80109e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80109e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d1e6      	bne.n	80109b6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	3308      	adds	r3, #8
 80109ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109f2:	e853 3f00 	ldrex	r3, [r3]
 80109f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80109f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109fa:	f043 0301 	orr.w	r3, r3, #1
 80109fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	3308      	adds	r3, #8
 8010a06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010a08:	637a      	str	r2, [r7, #52]	@ 0x34
 8010a0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010a0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a10:	e841 2300 	strex	r3, r2, [r1]
 8010a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d1e5      	bne.n	80109e8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	3308      	adds	r3, #8
 8010a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	e853 3f00 	ldrex	r3, [r3]
 8010a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	3308      	adds	r3, #8
 8010a3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010a3c:	623a      	str	r2, [r7, #32]
 8010a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a40:	69f9      	ldr	r1, [r7, #28]
 8010a42:	6a3a      	ldr	r2, [r7, #32]
 8010a44:	e841 2300 	strex	r3, r2, [r1]
 8010a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d1e5      	bne.n	8010a1c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010a50:	2300      	movs	r3, #0
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3758      	adds	r7, #88	@ 0x58
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	08010c6b 	.word	0x08010c6b
 8010a60:	08010d93 	.word	0x08010d93
 8010a64:	08010dd1 	.word	0x08010dd1

08010a68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b08f      	sub	sp, #60	@ 0x3c
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a76:	6a3b      	ldr	r3, [r7, #32]
 8010a78:	e853 3f00 	ldrex	r3, [r3]
 8010a7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a90:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a96:	e841 2300 	strex	r3, r2, [r1]
 8010a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d1e6      	bne.n	8010a70 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	3308      	adds	r3, #8
 8010aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	e853 3f00 	ldrex	r3, [r3]
 8010ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	3308      	adds	r3, #8
 8010ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ac2:	61ba      	str	r2, [r7, #24]
 8010ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac6:	6979      	ldr	r1, [r7, #20]
 8010ac8:	69ba      	ldr	r2, [r7, #24]
 8010aca:	e841 2300 	strex	r3, r2, [r1]
 8010ace:	613b      	str	r3, [r7, #16]
   return(result);
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d1e5      	bne.n	8010aa2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2220      	movs	r2, #32
 8010ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010ade:	bf00      	nop
 8010ae0:	373c      	adds	r7, #60	@ 0x3c
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr
	...

08010aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b095      	sub	sp, #84	@ 0x54
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010afc:	e853 3f00 	ldrex	r3, [r3]
 8010b00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	461a      	mov	r2, r3
 8010b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010b18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010b1a:	e841 2300 	strex	r3, r2, [r1]
 8010b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1e6      	bne.n	8010af4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	3308      	adds	r3, #8
 8010b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2e:	6a3b      	ldr	r3, [r7, #32]
 8010b30:	e853 3f00 	ldrex	r3, [r3]
 8010b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b36:	69fa      	ldr	r2, [r7, #28]
 8010b38:	4b1e      	ldr	r3, [pc, #120]	@ (8010bb4 <UART_EndRxTransfer+0xc8>)
 8010b3a:	4013      	ands	r3, r2
 8010b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	3308      	adds	r3, #8
 8010b44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b4e:	e841 2300 	strex	r3, r2, [r1]
 8010b52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d1e5      	bne.n	8010b26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	d118      	bne.n	8010b94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	e853 3f00 	ldrex	r3, [r3]
 8010b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	f023 0310 	bic.w	r3, r3, #16
 8010b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b80:	61bb      	str	r3, [r7, #24]
 8010b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b84:	6979      	ldr	r1, [r7, #20]
 8010b86:	69ba      	ldr	r2, [r7, #24]
 8010b88:	e841 2300 	strex	r3, r2, [r1]
 8010b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d1e6      	bne.n	8010b62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2220      	movs	r2, #32
 8010b98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010ba8:	bf00      	nop
 8010baa:	3754      	adds	r7, #84	@ 0x54
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr
 8010bb4:	effffffe 	.word	0xeffffffe

08010bb8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b090      	sub	sp, #64	@ 0x40
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	69db      	ldr	r3, [r3, #28]
 8010bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010bce:	d037      	beq.n	8010c40 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	3308      	adds	r3, #8
 8010bde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be2:	e853 3f00 	ldrex	r3, [r3]
 8010be6:	623b      	str	r3, [r7, #32]
   return(result);
 8010be8:	6a3b      	ldr	r3, [r7, #32]
 8010bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010bee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	3308      	adds	r3, #8
 8010bf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010bf8:	633a      	str	r2, [r7, #48]	@ 0x30
 8010bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c00:	e841 2300 	strex	r3, r2, [r1]
 8010c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d1e5      	bne.n	8010bd8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	e853 3f00 	ldrex	r3, [r3]
 8010c18:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	461a      	mov	r2, r3
 8010c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c2a:	61fb      	str	r3, [r7, #28]
 8010c2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2e:	69b9      	ldr	r1, [r7, #24]
 8010c30:	69fa      	ldr	r2, [r7, #28]
 8010c32:	e841 2300 	strex	r3, r2, [r1]
 8010c36:	617b      	str	r3, [r7, #20]
   return(result);
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1e6      	bne.n	8010c0c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c3e:	e002      	b.n	8010c46 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010c40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010c42:	f7f3 fbf3 	bl	800442c <HAL_UART_TxCpltCallback>
}
 8010c46:	bf00      	nop
 8010c48:	3740      	adds	r7, #64	@ 0x40
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b084      	sub	sp, #16
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f7fe ff13 	bl	800fa88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c62:	bf00      	nop
 8010c64:	3710      	adds	r7, #16
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}

08010c6a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c6a:	b580      	push	{r7, lr}
 8010c6c:	b09c      	sub	sp, #112	@ 0x70
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c76:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	69db      	ldr	r3, [r3, #28]
 8010c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c80:	d071      	beq.n	8010d66 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c84:	2200      	movs	r2, #0
 8010c86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c92:	e853 3f00 	ldrex	r3, [r3]
 8010c96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010caa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010cae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010cb0:	e841 2300 	strex	r3, r2, [r1]
 8010cb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d1e6      	bne.n	8010c8a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	3308      	adds	r3, #8
 8010cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc6:	e853 3f00 	ldrex	r3, [r3]
 8010cca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cce:	f023 0301 	bic.w	r3, r3, #1
 8010cd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8010cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	3308      	adds	r3, #8
 8010cda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010cdc:	647a      	str	r2, [r7, #68]	@ 0x44
 8010cde:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ce4:	e841 2300 	strex	r3, r2, [r1]
 8010ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1e5      	bne.n	8010cbc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	3308      	adds	r3, #8
 8010cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cfa:	e853 3f00 	ldrex	r3, [r3]
 8010cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8010d00:	6a3b      	ldr	r3, [r7, #32]
 8010d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d06:	663b      	str	r3, [r7, #96]	@ 0x60
 8010d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	3308      	adds	r3, #8
 8010d0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010d10:	633a      	str	r2, [r7, #48]	@ 0x30
 8010d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d18:	e841 2300 	strex	r3, r2, [r1]
 8010d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1e5      	bne.n	8010cf0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d26:	2220      	movs	r2, #32
 8010d28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d30:	2b01      	cmp	r3, #1
 8010d32:	d118      	bne.n	8010d66 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	e853 3f00 	ldrex	r3, [r3]
 8010d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f023 0310 	bic.w	r3, r3, #16
 8010d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010d52:	61fb      	str	r3, [r7, #28]
 8010d54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d56:	69b9      	ldr	r1, [r7, #24]
 8010d58:	69fa      	ldr	r2, [r7, #28]
 8010d5a:	e841 2300 	strex	r3, r2, [r1]
 8010d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d1e6      	bne.n	8010d34 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d68:	2200      	movs	r2, #0
 8010d6a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d107      	bne.n	8010d84 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010d7e:	f7f3 fb15 	bl	80043ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010d82:	e002      	b.n	8010d8a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8010d84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010d86:	f7fe fe89 	bl	800fa9c <HAL_UART_RxCpltCallback>
}
 8010d8a:	bf00      	nop
 8010d8c:	3770      	adds	r7, #112	@ 0x70
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b084      	sub	sp, #16
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2201      	movs	r2, #1
 8010da4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d109      	bne.n	8010dc2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010db4:	085b      	lsrs	r3, r3, #1
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	4619      	mov	r1, r3
 8010dba:	68f8      	ldr	r0, [r7, #12]
 8010dbc:	f7f3 faf6 	bl	80043ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010dc0:	e002      	b.n	8010dc8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010dc2:	68f8      	ldr	r0, [r7, #12]
 8010dc4:	f7fe fe74 	bl	800fab0 <HAL_UART_RxHalfCpltCallback>
}
 8010dc8:	bf00      	nop
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b086      	sub	sp, #24
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ddc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010de4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010dec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	689b      	ldr	r3, [r3, #8]
 8010df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010df8:	2b80      	cmp	r3, #128	@ 0x80
 8010dfa:	d109      	bne.n	8010e10 <UART_DMAError+0x40>
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	2b21      	cmp	r3, #33	@ 0x21
 8010e00:	d106      	bne.n	8010e10 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	2200      	movs	r2, #0
 8010e06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010e0a:	6978      	ldr	r0, [r7, #20]
 8010e0c:	f7ff fe2c 	bl	8010a68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	689b      	ldr	r3, [r3, #8]
 8010e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e1a:	2b40      	cmp	r3, #64	@ 0x40
 8010e1c:	d109      	bne.n	8010e32 <UART_DMAError+0x62>
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2b22      	cmp	r3, #34	@ 0x22
 8010e22:	d106      	bne.n	8010e32 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	2200      	movs	r2, #0
 8010e28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010e2c:	6978      	ldr	r0, [r7, #20]
 8010e2e:	f7ff fe5d 	bl	8010aec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e38:	f043 0210 	orr.w	r2, r3, #16
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e42:	6978      	ldr	r0, [r7, #20]
 8010e44:	f7fe fe3e 	bl	800fac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e48:	bf00      	nop
 8010e4a:	3718      	adds	r7, #24
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	2200      	movs	r2, #0
 8010e62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e66:	68f8      	ldr	r0, [r7, #12]
 8010e68:	f7fe fe2c 	bl	800fac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e6c:	bf00      	nop
 8010e6e:	3710      	adds	r7, #16
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b088      	sub	sp, #32
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	e853 3f00 	ldrex	r3, [r3]
 8010e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e90:	61fb      	str	r3, [r7, #28]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	461a      	mov	r2, r3
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	61bb      	str	r3, [r7, #24]
 8010e9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e9e:	6979      	ldr	r1, [r7, #20]
 8010ea0:	69ba      	ldr	r2, [r7, #24]
 8010ea2:	e841 2300 	strex	r3, r2, [r1]
 8010ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8010ea8:	693b      	ldr	r3, [r7, #16]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d1e6      	bne.n	8010e7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2220      	movs	r2, #32
 8010eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7f3 fab5 	bl	800442c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ec2:	bf00      	nop
 8010ec4:	3720      	adds	r7, #32
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010eca:	b480      	push	{r7}
 8010ecc:	b083      	sub	sp, #12
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010ed2:	bf00      	nop
 8010ed4:	370c      	adds	r7, #12
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr

08010ede <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010ede:	b480      	push	{r7}
 8010ee0:	b083      	sub	sp, #12
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010ee6:	bf00      	nop
 8010ee8:	370c      	adds	r7, #12
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr

08010ef2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010ef2:	b480      	push	{r7}
 8010ef4:	b083      	sub	sp, #12
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010efa:	bf00      	nop
 8010efc:	370c      	adds	r7, #12
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr

08010f06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010f06:	b480      	push	{r7}
 8010f08:	b085      	sub	sp, #20
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d101      	bne.n	8010f1c <HAL_UARTEx_DisableFifoMode+0x16>
 8010f18:	2302      	movs	r3, #2
 8010f1a:	e027      	b.n	8010f6c <HAL_UARTEx_DisableFifoMode+0x66>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2224      	movs	r2, #36	@ 0x24
 8010f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f022 0201 	bic.w	r2, r2, #1
 8010f42:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010f4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2220      	movs	r2, #32
 8010f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2200      	movs	r2, #0
 8010f66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f6a:	2300      	movs	r3, #0
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3714      	adds	r7, #20
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b084      	sub	sp, #16
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	d101      	bne.n	8010f90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010f8c:	2302      	movs	r3, #2
 8010f8e:	e02d      	b.n	8010fec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2201      	movs	r2, #1
 8010f94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2224      	movs	r2, #36	@ 0x24
 8010f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	681a      	ldr	r2, [r3, #0]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f022 0201 	bic.w	r2, r2, #1
 8010fb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	689b      	ldr	r3, [r3, #8]
 8010fbe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	683a      	ldr	r2, [r7, #0]
 8010fc8:	430a      	orrs	r2, r1
 8010fca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 f8a3 	bl	8011118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	68fa      	ldr	r2, [r7, #12]
 8010fd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2220      	movs	r2, #32
 8010fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010fea:	2300      	movs	r3, #0
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3710      	adds	r7, #16
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b084      	sub	sp, #16
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011004:	2b01      	cmp	r3, #1
 8011006:	d101      	bne.n	801100c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011008:	2302      	movs	r3, #2
 801100a:	e02d      	b.n	8011068 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2201      	movs	r2, #1
 8011010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2224      	movs	r2, #36	@ 0x24
 8011018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f022 0201 	bic.w	r2, r2, #1
 8011032:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	683a      	ldr	r2, [r7, #0]
 8011044:	430a      	orrs	r2, r1
 8011046:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 f865 	bl	8011118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	68fa      	ldr	r2, [r7, #12]
 8011054:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2220      	movs	r2, #32
 801105a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011066:	2300      	movs	r3, #0
}
 8011068:	4618      	mov	r0, r3
 801106a:	3710      	adds	r7, #16
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b08c      	sub	sp, #48	@ 0x30
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	4613      	mov	r3, r2
 801107c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011084:	2b20      	cmp	r3, #32
 8011086:	d142      	bne.n	801110e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d002      	beq.n	8011094 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 801108e:	88fb      	ldrh	r3, [r7, #6]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d101      	bne.n	8011098 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8011094:	2301      	movs	r3, #1
 8011096:	e03b      	b.n	8011110 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2201      	movs	r2, #1
 801109c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2200      	movs	r2, #0
 80110a2:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80110a4:	88fb      	ldrh	r3, [r7, #6]
 80110a6:	461a      	mov	r2, r3
 80110a8:	68b9      	ldr	r1, [r7, #8]
 80110aa:	68f8      	ldr	r0, [r7, #12]
 80110ac:	f7ff fc36 	bl	801091c <UART_Start_Receive_DMA>
 80110b0:	4603      	mov	r3, r0
 80110b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80110b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d124      	bne.n	8011108 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	d11d      	bne.n	8011102 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2210      	movs	r2, #16
 80110cc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	e853 3f00 	ldrex	r3, [r3]
 80110da:	617b      	str	r3, [r7, #20]
   return(result);
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	f043 0310 	orr.w	r3, r3, #16
 80110e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	461a      	mov	r2, r3
 80110ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80110ee:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f0:	6a39      	ldr	r1, [r7, #32]
 80110f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110f4:	e841 2300 	strex	r3, r2, [r1]
 80110f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d1e6      	bne.n	80110ce <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8011100:	e002      	b.n	8011108 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8011102:	2301      	movs	r3, #1
 8011104:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8011108:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801110c:	e000      	b.n	8011110 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801110e:	2302      	movs	r3, #2
  }
}
 8011110:	4618      	mov	r0, r3
 8011112:	3730      	adds	r7, #48	@ 0x30
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011118:	b480      	push	{r7}
 801111a:	b085      	sub	sp, #20
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011124:	2b00      	cmp	r3, #0
 8011126:	d108      	bne.n	801113a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2201      	movs	r2, #1
 801112c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2201      	movs	r2, #1
 8011134:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011138:	e031      	b.n	801119e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801113a:	2310      	movs	r3, #16
 801113c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801113e:	2310      	movs	r3, #16
 8011140:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	689b      	ldr	r3, [r3, #8]
 8011148:	0e5b      	lsrs	r3, r3, #25
 801114a:	b2db      	uxtb	r3, r3
 801114c:	f003 0307 	and.w	r3, r3, #7
 8011150:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	689b      	ldr	r3, [r3, #8]
 8011158:	0f5b      	lsrs	r3, r3, #29
 801115a:	b2db      	uxtb	r3, r3
 801115c:	f003 0307 	and.w	r3, r3, #7
 8011160:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011162:	7bbb      	ldrb	r3, [r7, #14]
 8011164:	7b3a      	ldrb	r2, [r7, #12]
 8011166:	4911      	ldr	r1, [pc, #68]	@ (80111ac <UARTEx_SetNbDataToProcess+0x94>)
 8011168:	5c8a      	ldrb	r2, [r1, r2]
 801116a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801116e:	7b3a      	ldrb	r2, [r7, #12]
 8011170:	490f      	ldr	r1, [pc, #60]	@ (80111b0 <UARTEx_SetNbDataToProcess+0x98>)
 8011172:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011174:	fb93 f3f2 	sdiv	r3, r3, r2
 8011178:	b29a      	uxth	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011180:	7bfb      	ldrb	r3, [r7, #15]
 8011182:	7b7a      	ldrb	r2, [r7, #13]
 8011184:	4909      	ldr	r1, [pc, #36]	@ (80111ac <UARTEx_SetNbDataToProcess+0x94>)
 8011186:	5c8a      	ldrb	r2, [r1, r2]
 8011188:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801118c:	7b7a      	ldrb	r2, [r7, #13]
 801118e:	4908      	ldr	r1, [pc, #32]	@ (80111b0 <UARTEx_SetNbDataToProcess+0x98>)
 8011190:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011192:	fb93 f3f2 	sdiv	r3, r3, r2
 8011196:	b29a      	uxth	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801119e:	bf00      	nop
 80111a0:	3714      	adds	r7, #20
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop
 80111ac:	08015f40 	.word	0x08015f40
 80111b0:	08015f48 	.word	0x08015f48

080111b4 <__cvt>:
 80111b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111b6:	ed2d 8b02 	vpush	{d8}
 80111ba:	eeb0 8b40 	vmov.f64	d8, d0
 80111be:	b085      	sub	sp, #20
 80111c0:	4617      	mov	r7, r2
 80111c2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80111c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80111c6:	ee18 2a90 	vmov	r2, s17
 80111ca:	f025 0520 	bic.w	r5, r5, #32
 80111ce:	2a00      	cmp	r2, #0
 80111d0:	bfb6      	itet	lt
 80111d2:	222d      	movlt	r2, #45	@ 0x2d
 80111d4:	2200      	movge	r2, #0
 80111d6:	eeb1 8b40 	vneglt.f64	d8, d0
 80111da:	2d46      	cmp	r5, #70	@ 0x46
 80111dc:	460c      	mov	r4, r1
 80111de:	701a      	strb	r2, [r3, #0]
 80111e0:	d004      	beq.n	80111ec <__cvt+0x38>
 80111e2:	2d45      	cmp	r5, #69	@ 0x45
 80111e4:	d100      	bne.n	80111e8 <__cvt+0x34>
 80111e6:	3401      	adds	r4, #1
 80111e8:	2102      	movs	r1, #2
 80111ea:	e000      	b.n	80111ee <__cvt+0x3a>
 80111ec:	2103      	movs	r1, #3
 80111ee:	ab03      	add	r3, sp, #12
 80111f0:	9301      	str	r3, [sp, #4]
 80111f2:	ab02      	add	r3, sp, #8
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	4622      	mov	r2, r4
 80111f8:	4633      	mov	r3, r6
 80111fa:	eeb0 0b48 	vmov.f64	d0, d8
 80111fe:	f001 f99b 	bl	8012538 <_dtoa_r>
 8011202:	2d47      	cmp	r5, #71	@ 0x47
 8011204:	d114      	bne.n	8011230 <__cvt+0x7c>
 8011206:	07fb      	lsls	r3, r7, #31
 8011208:	d50a      	bpl.n	8011220 <__cvt+0x6c>
 801120a:	1902      	adds	r2, r0, r4
 801120c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011214:	bf08      	it	eq
 8011216:	9203      	streq	r2, [sp, #12]
 8011218:	2130      	movs	r1, #48	@ 0x30
 801121a:	9b03      	ldr	r3, [sp, #12]
 801121c:	4293      	cmp	r3, r2
 801121e:	d319      	bcc.n	8011254 <__cvt+0xa0>
 8011220:	9b03      	ldr	r3, [sp, #12]
 8011222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011224:	1a1b      	subs	r3, r3, r0
 8011226:	6013      	str	r3, [r2, #0]
 8011228:	b005      	add	sp, #20
 801122a:	ecbd 8b02 	vpop	{d8}
 801122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011230:	2d46      	cmp	r5, #70	@ 0x46
 8011232:	eb00 0204 	add.w	r2, r0, r4
 8011236:	d1e9      	bne.n	801120c <__cvt+0x58>
 8011238:	7803      	ldrb	r3, [r0, #0]
 801123a:	2b30      	cmp	r3, #48	@ 0x30
 801123c:	d107      	bne.n	801124e <__cvt+0x9a>
 801123e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011246:	bf1c      	itt	ne
 8011248:	f1c4 0401 	rsbne	r4, r4, #1
 801124c:	6034      	strne	r4, [r6, #0]
 801124e:	6833      	ldr	r3, [r6, #0]
 8011250:	441a      	add	r2, r3
 8011252:	e7db      	b.n	801120c <__cvt+0x58>
 8011254:	1c5c      	adds	r4, r3, #1
 8011256:	9403      	str	r4, [sp, #12]
 8011258:	7019      	strb	r1, [r3, #0]
 801125a:	e7de      	b.n	801121a <__cvt+0x66>

0801125c <__exponent>:
 801125c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801125e:	2900      	cmp	r1, #0
 8011260:	bfba      	itte	lt
 8011262:	4249      	neglt	r1, r1
 8011264:	232d      	movlt	r3, #45	@ 0x2d
 8011266:	232b      	movge	r3, #43	@ 0x2b
 8011268:	2909      	cmp	r1, #9
 801126a:	7002      	strb	r2, [r0, #0]
 801126c:	7043      	strb	r3, [r0, #1]
 801126e:	dd29      	ble.n	80112c4 <__exponent+0x68>
 8011270:	f10d 0307 	add.w	r3, sp, #7
 8011274:	461d      	mov	r5, r3
 8011276:	270a      	movs	r7, #10
 8011278:	461a      	mov	r2, r3
 801127a:	fbb1 f6f7 	udiv	r6, r1, r7
 801127e:	fb07 1416 	mls	r4, r7, r6, r1
 8011282:	3430      	adds	r4, #48	@ 0x30
 8011284:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011288:	460c      	mov	r4, r1
 801128a:	2c63      	cmp	r4, #99	@ 0x63
 801128c:	f103 33ff 	add.w	r3, r3, #4294967295
 8011290:	4631      	mov	r1, r6
 8011292:	dcf1      	bgt.n	8011278 <__exponent+0x1c>
 8011294:	3130      	adds	r1, #48	@ 0x30
 8011296:	1e94      	subs	r4, r2, #2
 8011298:	f803 1c01 	strb.w	r1, [r3, #-1]
 801129c:	1c41      	adds	r1, r0, #1
 801129e:	4623      	mov	r3, r4
 80112a0:	42ab      	cmp	r3, r5
 80112a2:	d30a      	bcc.n	80112ba <__exponent+0x5e>
 80112a4:	f10d 0309 	add.w	r3, sp, #9
 80112a8:	1a9b      	subs	r3, r3, r2
 80112aa:	42ac      	cmp	r4, r5
 80112ac:	bf88      	it	hi
 80112ae:	2300      	movhi	r3, #0
 80112b0:	3302      	adds	r3, #2
 80112b2:	4403      	add	r3, r0
 80112b4:	1a18      	subs	r0, r3, r0
 80112b6:	b003      	add	sp, #12
 80112b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80112be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80112c2:	e7ed      	b.n	80112a0 <__exponent+0x44>
 80112c4:	2330      	movs	r3, #48	@ 0x30
 80112c6:	3130      	adds	r1, #48	@ 0x30
 80112c8:	7083      	strb	r3, [r0, #2]
 80112ca:	70c1      	strb	r1, [r0, #3]
 80112cc:	1d03      	adds	r3, r0, #4
 80112ce:	e7f1      	b.n	80112b4 <__exponent+0x58>

080112d0 <_printf_float>:
 80112d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d4:	b08d      	sub	sp, #52	@ 0x34
 80112d6:	460c      	mov	r4, r1
 80112d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80112dc:	4616      	mov	r6, r2
 80112de:	461f      	mov	r7, r3
 80112e0:	4605      	mov	r5, r0
 80112e2:	f001 f813 	bl	801230c <_localeconv_r>
 80112e6:	f8d0 b000 	ldr.w	fp, [r0]
 80112ea:	4658      	mov	r0, fp
 80112ec:	f7ef f848 	bl	8000380 <strlen>
 80112f0:	2300      	movs	r3, #0
 80112f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80112f4:	f8d8 3000 	ldr.w	r3, [r8]
 80112f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80112fc:	6822      	ldr	r2, [r4, #0]
 80112fe:	9005      	str	r0, [sp, #20]
 8011300:	3307      	adds	r3, #7
 8011302:	f023 0307 	bic.w	r3, r3, #7
 8011306:	f103 0108 	add.w	r1, r3, #8
 801130a:	f8c8 1000 	str.w	r1, [r8]
 801130e:	ed93 0b00 	vldr	d0, [r3]
 8011312:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011570 <_printf_float+0x2a0>
 8011316:	eeb0 7bc0 	vabs.f64	d7, d0
 801131a:	eeb4 7b46 	vcmp.f64	d7, d6
 801131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011322:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011326:	dd24      	ble.n	8011372 <_printf_float+0xa2>
 8011328:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011330:	d502      	bpl.n	8011338 <_printf_float+0x68>
 8011332:	232d      	movs	r3, #45	@ 0x2d
 8011334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011338:	498f      	ldr	r1, [pc, #572]	@ (8011578 <_printf_float+0x2a8>)
 801133a:	4b90      	ldr	r3, [pc, #576]	@ (801157c <_printf_float+0x2ac>)
 801133c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011340:	bf8c      	ite	hi
 8011342:	4688      	movhi	r8, r1
 8011344:	4698      	movls	r8, r3
 8011346:	f022 0204 	bic.w	r2, r2, #4
 801134a:	2303      	movs	r3, #3
 801134c:	6123      	str	r3, [r4, #16]
 801134e:	6022      	str	r2, [r4, #0]
 8011350:	f04f 0a00 	mov.w	sl, #0
 8011354:	9700      	str	r7, [sp, #0]
 8011356:	4633      	mov	r3, r6
 8011358:	aa0b      	add	r2, sp, #44	@ 0x2c
 801135a:	4621      	mov	r1, r4
 801135c:	4628      	mov	r0, r5
 801135e:	f000 f9d1 	bl	8011704 <_printf_common>
 8011362:	3001      	adds	r0, #1
 8011364:	f040 8089 	bne.w	801147a <_printf_float+0x1aa>
 8011368:	f04f 30ff 	mov.w	r0, #4294967295
 801136c:	b00d      	add	sp, #52	@ 0x34
 801136e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011372:	eeb4 0b40 	vcmp.f64	d0, d0
 8011376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801137a:	d709      	bvc.n	8011390 <_printf_float+0xc0>
 801137c:	ee10 3a90 	vmov	r3, s1
 8011380:	2b00      	cmp	r3, #0
 8011382:	bfbc      	itt	lt
 8011384:	232d      	movlt	r3, #45	@ 0x2d
 8011386:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801138a:	497d      	ldr	r1, [pc, #500]	@ (8011580 <_printf_float+0x2b0>)
 801138c:	4b7d      	ldr	r3, [pc, #500]	@ (8011584 <_printf_float+0x2b4>)
 801138e:	e7d5      	b.n	801133c <_printf_float+0x6c>
 8011390:	6863      	ldr	r3, [r4, #4]
 8011392:	1c59      	adds	r1, r3, #1
 8011394:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011398:	d139      	bne.n	801140e <_printf_float+0x13e>
 801139a:	2306      	movs	r3, #6
 801139c:	6063      	str	r3, [r4, #4]
 801139e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80113a2:	2300      	movs	r3, #0
 80113a4:	6022      	str	r2, [r4, #0]
 80113a6:	9303      	str	r3, [sp, #12]
 80113a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80113aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80113ae:	ab09      	add	r3, sp, #36	@ 0x24
 80113b0:	9300      	str	r3, [sp, #0]
 80113b2:	6861      	ldr	r1, [r4, #4]
 80113b4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80113b8:	4628      	mov	r0, r5
 80113ba:	f7ff fefb 	bl	80111b4 <__cvt>
 80113be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80113c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80113c4:	4680      	mov	r8, r0
 80113c6:	d129      	bne.n	801141c <_printf_float+0x14c>
 80113c8:	1cc8      	adds	r0, r1, #3
 80113ca:	db02      	blt.n	80113d2 <_printf_float+0x102>
 80113cc:	6863      	ldr	r3, [r4, #4]
 80113ce:	4299      	cmp	r1, r3
 80113d0:	dd41      	ble.n	8011456 <_printf_float+0x186>
 80113d2:	f1a9 0902 	sub.w	r9, r9, #2
 80113d6:	fa5f f989 	uxtb.w	r9, r9
 80113da:	3901      	subs	r1, #1
 80113dc:	464a      	mov	r2, r9
 80113de:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80113e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80113e4:	f7ff ff3a 	bl	801125c <__exponent>
 80113e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113ea:	1813      	adds	r3, r2, r0
 80113ec:	2a01      	cmp	r2, #1
 80113ee:	4682      	mov	sl, r0
 80113f0:	6123      	str	r3, [r4, #16]
 80113f2:	dc02      	bgt.n	80113fa <_printf_float+0x12a>
 80113f4:	6822      	ldr	r2, [r4, #0]
 80113f6:	07d2      	lsls	r2, r2, #31
 80113f8:	d501      	bpl.n	80113fe <_printf_float+0x12e>
 80113fa:	3301      	adds	r3, #1
 80113fc:	6123      	str	r3, [r4, #16]
 80113fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011402:	2b00      	cmp	r3, #0
 8011404:	d0a6      	beq.n	8011354 <_printf_float+0x84>
 8011406:	232d      	movs	r3, #45	@ 0x2d
 8011408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801140c:	e7a2      	b.n	8011354 <_printf_float+0x84>
 801140e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011412:	d1c4      	bne.n	801139e <_printf_float+0xce>
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1c2      	bne.n	801139e <_printf_float+0xce>
 8011418:	2301      	movs	r3, #1
 801141a:	e7bf      	b.n	801139c <_printf_float+0xcc>
 801141c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011420:	d9db      	bls.n	80113da <_printf_float+0x10a>
 8011422:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011426:	d118      	bne.n	801145a <_printf_float+0x18a>
 8011428:	2900      	cmp	r1, #0
 801142a:	6863      	ldr	r3, [r4, #4]
 801142c:	dd0b      	ble.n	8011446 <_printf_float+0x176>
 801142e:	6121      	str	r1, [r4, #16]
 8011430:	b913      	cbnz	r3, 8011438 <_printf_float+0x168>
 8011432:	6822      	ldr	r2, [r4, #0]
 8011434:	07d0      	lsls	r0, r2, #31
 8011436:	d502      	bpl.n	801143e <_printf_float+0x16e>
 8011438:	3301      	adds	r3, #1
 801143a:	440b      	add	r3, r1
 801143c:	6123      	str	r3, [r4, #16]
 801143e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011440:	f04f 0a00 	mov.w	sl, #0
 8011444:	e7db      	b.n	80113fe <_printf_float+0x12e>
 8011446:	b913      	cbnz	r3, 801144e <_printf_float+0x17e>
 8011448:	6822      	ldr	r2, [r4, #0]
 801144a:	07d2      	lsls	r2, r2, #31
 801144c:	d501      	bpl.n	8011452 <_printf_float+0x182>
 801144e:	3302      	adds	r3, #2
 8011450:	e7f4      	b.n	801143c <_printf_float+0x16c>
 8011452:	2301      	movs	r3, #1
 8011454:	e7f2      	b.n	801143c <_printf_float+0x16c>
 8011456:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801145a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801145c:	4299      	cmp	r1, r3
 801145e:	db05      	blt.n	801146c <_printf_float+0x19c>
 8011460:	6823      	ldr	r3, [r4, #0]
 8011462:	6121      	str	r1, [r4, #16]
 8011464:	07d8      	lsls	r0, r3, #31
 8011466:	d5ea      	bpl.n	801143e <_printf_float+0x16e>
 8011468:	1c4b      	adds	r3, r1, #1
 801146a:	e7e7      	b.n	801143c <_printf_float+0x16c>
 801146c:	2900      	cmp	r1, #0
 801146e:	bfd4      	ite	le
 8011470:	f1c1 0202 	rsble	r2, r1, #2
 8011474:	2201      	movgt	r2, #1
 8011476:	4413      	add	r3, r2
 8011478:	e7e0      	b.n	801143c <_printf_float+0x16c>
 801147a:	6823      	ldr	r3, [r4, #0]
 801147c:	055a      	lsls	r2, r3, #21
 801147e:	d407      	bmi.n	8011490 <_printf_float+0x1c0>
 8011480:	6923      	ldr	r3, [r4, #16]
 8011482:	4642      	mov	r2, r8
 8011484:	4631      	mov	r1, r6
 8011486:	4628      	mov	r0, r5
 8011488:	47b8      	blx	r7
 801148a:	3001      	adds	r0, #1
 801148c:	d12a      	bne.n	80114e4 <_printf_float+0x214>
 801148e:	e76b      	b.n	8011368 <_printf_float+0x98>
 8011490:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011494:	f240 80e0 	bls.w	8011658 <_printf_float+0x388>
 8011498:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801149c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80114a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a4:	d133      	bne.n	801150e <_printf_float+0x23e>
 80114a6:	4a38      	ldr	r2, [pc, #224]	@ (8011588 <_printf_float+0x2b8>)
 80114a8:	2301      	movs	r3, #1
 80114aa:	4631      	mov	r1, r6
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b8      	blx	r7
 80114b0:	3001      	adds	r0, #1
 80114b2:	f43f af59 	beq.w	8011368 <_printf_float+0x98>
 80114b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80114ba:	4543      	cmp	r3, r8
 80114bc:	db02      	blt.n	80114c4 <_printf_float+0x1f4>
 80114be:	6823      	ldr	r3, [r4, #0]
 80114c0:	07d8      	lsls	r0, r3, #31
 80114c2:	d50f      	bpl.n	80114e4 <_printf_float+0x214>
 80114c4:	9b05      	ldr	r3, [sp, #20]
 80114c6:	465a      	mov	r2, fp
 80114c8:	4631      	mov	r1, r6
 80114ca:	4628      	mov	r0, r5
 80114cc:	47b8      	blx	r7
 80114ce:	3001      	adds	r0, #1
 80114d0:	f43f af4a 	beq.w	8011368 <_printf_float+0x98>
 80114d4:	f04f 0900 	mov.w	r9, #0
 80114d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80114dc:	f104 0a1a 	add.w	sl, r4, #26
 80114e0:	45c8      	cmp	r8, r9
 80114e2:	dc09      	bgt.n	80114f8 <_printf_float+0x228>
 80114e4:	6823      	ldr	r3, [r4, #0]
 80114e6:	079b      	lsls	r3, r3, #30
 80114e8:	f100 8107 	bmi.w	80116fa <_printf_float+0x42a>
 80114ec:	68e0      	ldr	r0, [r4, #12]
 80114ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114f0:	4298      	cmp	r0, r3
 80114f2:	bfb8      	it	lt
 80114f4:	4618      	movlt	r0, r3
 80114f6:	e739      	b.n	801136c <_printf_float+0x9c>
 80114f8:	2301      	movs	r3, #1
 80114fa:	4652      	mov	r2, sl
 80114fc:	4631      	mov	r1, r6
 80114fe:	4628      	mov	r0, r5
 8011500:	47b8      	blx	r7
 8011502:	3001      	adds	r0, #1
 8011504:	f43f af30 	beq.w	8011368 <_printf_float+0x98>
 8011508:	f109 0901 	add.w	r9, r9, #1
 801150c:	e7e8      	b.n	80114e0 <_printf_float+0x210>
 801150e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011510:	2b00      	cmp	r3, #0
 8011512:	dc3b      	bgt.n	801158c <_printf_float+0x2bc>
 8011514:	4a1c      	ldr	r2, [pc, #112]	@ (8011588 <_printf_float+0x2b8>)
 8011516:	2301      	movs	r3, #1
 8011518:	4631      	mov	r1, r6
 801151a:	4628      	mov	r0, r5
 801151c:	47b8      	blx	r7
 801151e:	3001      	adds	r0, #1
 8011520:	f43f af22 	beq.w	8011368 <_printf_float+0x98>
 8011524:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011528:	ea59 0303 	orrs.w	r3, r9, r3
 801152c:	d102      	bne.n	8011534 <_printf_float+0x264>
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	07d9      	lsls	r1, r3, #31
 8011532:	d5d7      	bpl.n	80114e4 <_printf_float+0x214>
 8011534:	9b05      	ldr	r3, [sp, #20]
 8011536:	465a      	mov	r2, fp
 8011538:	4631      	mov	r1, r6
 801153a:	4628      	mov	r0, r5
 801153c:	47b8      	blx	r7
 801153e:	3001      	adds	r0, #1
 8011540:	f43f af12 	beq.w	8011368 <_printf_float+0x98>
 8011544:	f04f 0a00 	mov.w	sl, #0
 8011548:	f104 0b1a 	add.w	fp, r4, #26
 801154c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801154e:	425b      	negs	r3, r3
 8011550:	4553      	cmp	r3, sl
 8011552:	dc01      	bgt.n	8011558 <_printf_float+0x288>
 8011554:	464b      	mov	r3, r9
 8011556:	e794      	b.n	8011482 <_printf_float+0x1b2>
 8011558:	2301      	movs	r3, #1
 801155a:	465a      	mov	r2, fp
 801155c:	4631      	mov	r1, r6
 801155e:	4628      	mov	r0, r5
 8011560:	47b8      	blx	r7
 8011562:	3001      	adds	r0, #1
 8011564:	f43f af00 	beq.w	8011368 <_printf_float+0x98>
 8011568:	f10a 0a01 	add.w	sl, sl, #1
 801156c:	e7ee      	b.n	801154c <_printf_float+0x27c>
 801156e:	bf00      	nop
 8011570:	ffffffff 	.word	0xffffffff
 8011574:	7fefffff 	.word	0x7fefffff
 8011578:	08015f54 	.word	0x08015f54
 801157c:	08015f50 	.word	0x08015f50
 8011580:	08015f5c 	.word	0x08015f5c
 8011584:	08015f58 	.word	0x08015f58
 8011588:	08015f60 	.word	0x08015f60
 801158c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801158e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011592:	4553      	cmp	r3, sl
 8011594:	bfa8      	it	ge
 8011596:	4653      	movge	r3, sl
 8011598:	2b00      	cmp	r3, #0
 801159a:	4699      	mov	r9, r3
 801159c:	dc37      	bgt.n	801160e <_printf_float+0x33e>
 801159e:	2300      	movs	r3, #0
 80115a0:	9307      	str	r3, [sp, #28]
 80115a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80115a6:	f104 021a 	add.w	r2, r4, #26
 80115aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80115ac:	9907      	ldr	r1, [sp, #28]
 80115ae:	9306      	str	r3, [sp, #24]
 80115b0:	eba3 0309 	sub.w	r3, r3, r9
 80115b4:	428b      	cmp	r3, r1
 80115b6:	dc31      	bgt.n	801161c <_printf_float+0x34c>
 80115b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115ba:	459a      	cmp	sl, r3
 80115bc:	dc3b      	bgt.n	8011636 <_printf_float+0x366>
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	07da      	lsls	r2, r3, #31
 80115c2:	d438      	bmi.n	8011636 <_printf_float+0x366>
 80115c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115c6:	ebaa 0903 	sub.w	r9, sl, r3
 80115ca:	9b06      	ldr	r3, [sp, #24]
 80115cc:	ebaa 0303 	sub.w	r3, sl, r3
 80115d0:	4599      	cmp	r9, r3
 80115d2:	bfa8      	it	ge
 80115d4:	4699      	movge	r9, r3
 80115d6:	f1b9 0f00 	cmp.w	r9, #0
 80115da:	dc34      	bgt.n	8011646 <_printf_float+0x376>
 80115dc:	f04f 0800 	mov.w	r8, #0
 80115e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80115e4:	f104 0b1a 	add.w	fp, r4, #26
 80115e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115ea:	ebaa 0303 	sub.w	r3, sl, r3
 80115ee:	eba3 0309 	sub.w	r3, r3, r9
 80115f2:	4543      	cmp	r3, r8
 80115f4:	f77f af76 	ble.w	80114e4 <_printf_float+0x214>
 80115f8:	2301      	movs	r3, #1
 80115fa:	465a      	mov	r2, fp
 80115fc:	4631      	mov	r1, r6
 80115fe:	4628      	mov	r0, r5
 8011600:	47b8      	blx	r7
 8011602:	3001      	adds	r0, #1
 8011604:	f43f aeb0 	beq.w	8011368 <_printf_float+0x98>
 8011608:	f108 0801 	add.w	r8, r8, #1
 801160c:	e7ec      	b.n	80115e8 <_printf_float+0x318>
 801160e:	4642      	mov	r2, r8
 8011610:	4631      	mov	r1, r6
 8011612:	4628      	mov	r0, r5
 8011614:	47b8      	blx	r7
 8011616:	3001      	adds	r0, #1
 8011618:	d1c1      	bne.n	801159e <_printf_float+0x2ce>
 801161a:	e6a5      	b.n	8011368 <_printf_float+0x98>
 801161c:	2301      	movs	r3, #1
 801161e:	4631      	mov	r1, r6
 8011620:	4628      	mov	r0, r5
 8011622:	9206      	str	r2, [sp, #24]
 8011624:	47b8      	blx	r7
 8011626:	3001      	adds	r0, #1
 8011628:	f43f ae9e 	beq.w	8011368 <_printf_float+0x98>
 801162c:	9b07      	ldr	r3, [sp, #28]
 801162e:	9a06      	ldr	r2, [sp, #24]
 8011630:	3301      	adds	r3, #1
 8011632:	9307      	str	r3, [sp, #28]
 8011634:	e7b9      	b.n	80115aa <_printf_float+0x2da>
 8011636:	9b05      	ldr	r3, [sp, #20]
 8011638:	465a      	mov	r2, fp
 801163a:	4631      	mov	r1, r6
 801163c:	4628      	mov	r0, r5
 801163e:	47b8      	blx	r7
 8011640:	3001      	adds	r0, #1
 8011642:	d1bf      	bne.n	80115c4 <_printf_float+0x2f4>
 8011644:	e690      	b.n	8011368 <_printf_float+0x98>
 8011646:	9a06      	ldr	r2, [sp, #24]
 8011648:	464b      	mov	r3, r9
 801164a:	4442      	add	r2, r8
 801164c:	4631      	mov	r1, r6
 801164e:	4628      	mov	r0, r5
 8011650:	47b8      	blx	r7
 8011652:	3001      	adds	r0, #1
 8011654:	d1c2      	bne.n	80115dc <_printf_float+0x30c>
 8011656:	e687      	b.n	8011368 <_printf_float+0x98>
 8011658:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801165c:	f1b9 0f01 	cmp.w	r9, #1
 8011660:	dc01      	bgt.n	8011666 <_printf_float+0x396>
 8011662:	07db      	lsls	r3, r3, #31
 8011664:	d536      	bpl.n	80116d4 <_printf_float+0x404>
 8011666:	2301      	movs	r3, #1
 8011668:	4642      	mov	r2, r8
 801166a:	4631      	mov	r1, r6
 801166c:	4628      	mov	r0, r5
 801166e:	47b8      	blx	r7
 8011670:	3001      	adds	r0, #1
 8011672:	f43f ae79 	beq.w	8011368 <_printf_float+0x98>
 8011676:	9b05      	ldr	r3, [sp, #20]
 8011678:	465a      	mov	r2, fp
 801167a:	4631      	mov	r1, r6
 801167c:	4628      	mov	r0, r5
 801167e:	47b8      	blx	r7
 8011680:	3001      	adds	r0, #1
 8011682:	f43f ae71 	beq.w	8011368 <_printf_float+0x98>
 8011686:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801168a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011692:	f109 39ff 	add.w	r9, r9, #4294967295
 8011696:	d018      	beq.n	80116ca <_printf_float+0x3fa>
 8011698:	464b      	mov	r3, r9
 801169a:	f108 0201 	add.w	r2, r8, #1
 801169e:	4631      	mov	r1, r6
 80116a0:	4628      	mov	r0, r5
 80116a2:	47b8      	blx	r7
 80116a4:	3001      	adds	r0, #1
 80116a6:	d10c      	bne.n	80116c2 <_printf_float+0x3f2>
 80116a8:	e65e      	b.n	8011368 <_printf_float+0x98>
 80116aa:	2301      	movs	r3, #1
 80116ac:	465a      	mov	r2, fp
 80116ae:	4631      	mov	r1, r6
 80116b0:	4628      	mov	r0, r5
 80116b2:	47b8      	blx	r7
 80116b4:	3001      	adds	r0, #1
 80116b6:	f43f ae57 	beq.w	8011368 <_printf_float+0x98>
 80116ba:	f108 0801 	add.w	r8, r8, #1
 80116be:	45c8      	cmp	r8, r9
 80116c0:	dbf3      	blt.n	80116aa <_printf_float+0x3da>
 80116c2:	4653      	mov	r3, sl
 80116c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80116c8:	e6dc      	b.n	8011484 <_printf_float+0x1b4>
 80116ca:	f04f 0800 	mov.w	r8, #0
 80116ce:	f104 0b1a 	add.w	fp, r4, #26
 80116d2:	e7f4      	b.n	80116be <_printf_float+0x3ee>
 80116d4:	2301      	movs	r3, #1
 80116d6:	4642      	mov	r2, r8
 80116d8:	e7e1      	b.n	801169e <_printf_float+0x3ce>
 80116da:	2301      	movs	r3, #1
 80116dc:	464a      	mov	r2, r9
 80116de:	4631      	mov	r1, r6
 80116e0:	4628      	mov	r0, r5
 80116e2:	47b8      	blx	r7
 80116e4:	3001      	adds	r0, #1
 80116e6:	f43f ae3f 	beq.w	8011368 <_printf_float+0x98>
 80116ea:	f108 0801 	add.w	r8, r8, #1
 80116ee:	68e3      	ldr	r3, [r4, #12]
 80116f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80116f2:	1a5b      	subs	r3, r3, r1
 80116f4:	4543      	cmp	r3, r8
 80116f6:	dcf0      	bgt.n	80116da <_printf_float+0x40a>
 80116f8:	e6f8      	b.n	80114ec <_printf_float+0x21c>
 80116fa:	f04f 0800 	mov.w	r8, #0
 80116fe:	f104 0919 	add.w	r9, r4, #25
 8011702:	e7f4      	b.n	80116ee <_printf_float+0x41e>

08011704 <_printf_common>:
 8011704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011708:	4616      	mov	r6, r2
 801170a:	4698      	mov	r8, r3
 801170c:	688a      	ldr	r2, [r1, #8]
 801170e:	690b      	ldr	r3, [r1, #16]
 8011710:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011714:	4293      	cmp	r3, r2
 8011716:	bfb8      	it	lt
 8011718:	4613      	movlt	r3, r2
 801171a:	6033      	str	r3, [r6, #0]
 801171c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011720:	4607      	mov	r7, r0
 8011722:	460c      	mov	r4, r1
 8011724:	b10a      	cbz	r2, 801172a <_printf_common+0x26>
 8011726:	3301      	adds	r3, #1
 8011728:	6033      	str	r3, [r6, #0]
 801172a:	6823      	ldr	r3, [r4, #0]
 801172c:	0699      	lsls	r1, r3, #26
 801172e:	bf42      	ittt	mi
 8011730:	6833      	ldrmi	r3, [r6, #0]
 8011732:	3302      	addmi	r3, #2
 8011734:	6033      	strmi	r3, [r6, #0]
 8011736:	6825      	ldr	r5, [r4, #0]
 8011738:	f015 0506 	ands.w	r5, r5, #6
 801173c:	d106      	bne.n	801174c <_printf_common+0x48>
 801173e:	f104 0a19 	add.w	sl, r4, #25
 8011742:	68e3      	ldr	r3, [r4, #12]
 8011744:	6832      	ldr	r2, [r6, #0]
 8011746:	1a9b      	subs	r3, r3, r2
 8011748:	42ab      	cmp	r3, r5
 801174a:	dc26      	bgt.n	801179a <_printf_common+0x96>
 801174c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011750:	6822      	ldr	r2, [r4, #0]
 8011752:	3b00      	subs	r3, #0
 8011754:	bf18      	it	ne
 8011756:	2301      	movne	r3, #1
 8011758:	0692      	lsls	r2, r2, #26
 801175a:	d42b      	bmi.n	80117b4 <_printf_common+0xb0>
 801175c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011760:	4641      	mov	r1, r8
 8011762:	4638      	mov	r0, r7
 8011764:	47c8      	blx	r9
 8011766:	3001      	adds	r0, #1
 8011768:	d01e      	beq.n	80117a8 <_printf_common+0xa4>
 801176a:	6823      	ldr	r3, [r4, #0]
 801176c:	6922      	ldr	r2, [r4, #16]
 801176e:	f003 0306 	and.w	r3, r3, #6
 8011772:	2b04      	cmp	r3, #4
 8011774:	bf02      	ittt	eq
 8011776:	68e5      	ldreq	r5, [r4, #12]
 8011778:	6833      	ldreq	r3, [r6, #0]
 801177a:	1aed      	subeq	r5, r5, r3
 801177c:	68a3      	ldr	r3, [r4, #8]
 801177e:	bf0c      	ite	eq
 8011780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011784:	2500      	movne	r5, #0
 8011786:	4293      	cmp	r3, r2
 8011788:	bfc4      	itt	gt
 801178a:	1a9b      	subgt	r3, r3, r2
 801178c:	18ed      	addgt	r5, r5, r3
 801178e:	2600      	movs	r6, #0
 8011790:	341a      	adds	r4, #26
 8011792:	42b5      	cmp	r5, r6
 8011794:	d11a      	bne.n	80117cc <_printf_common+0xc8>
 8011796:	2000      	movs	r0, #0
 8011798:	e008      	b.n	80117ac <_printf_common+0xa8>
 801179a:	2301      	movs	r3, #1
 801179c:	4652      	mov	r2, sl
 801179e:	4641      	mov	r1, r8
 80117a0:	4638      	mov	r0, r7
 80117a2:	47c8      	blx	r9
 80117a4:	3001      	adds	r0, #1
 80117a6:	d103      	bne.n	80117b0 <_printf_common+0xac>
 80117a8:	f04f 30ff 	mov.w	r0, #4294967295
 80117ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117b0:	3501      	adds	r5, #1
 80117b2:	e7c6      	b.n	8011742 <_printf_common+0x3e>
 80117b4:	18e1      	adds	r1, r4, r3
 80117b6:	1c5a      	adds	r2, r3, #1
 80117b8:	2030      	movs	r0, #48	@ 0x30
 80117ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80117be:	4422      	add	r2, r4
 80117c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80117c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80117c8:	3302      	adds	r3, #2
 80117ca:	e7c7      	b.n	801175c <_printf_common+0x58>
 80117cc:	2301      	movs	r3, #1
 80117ce:	4622      	mov	r2, r4
 80117d0:	4641      	mov	r1, r8
 80117d2:	4638      	mov	r0, r7
 80117d4:	47c8      	blx	r9
 80117d6:	3001      	adds	r0, #1
 80117d8:	d0e6      	beq.n	80117a8 <_printf_common+0xa4>
 80117da:	3601      	adds	r6, #1
 80117dc:	e7d9      	b.n	8011792 <_printf_common+0x8e>
	...

080117e0 <_printf_i>:
 80117e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117e4:	7e0f      	ldrb	r7, [r1, #24]
 80117e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80117e8:	2f78      	cmp	r7, #120	@ 0x78
 80117ea:	4691      	mov	r9, r2
 80117ec:	4680      	mov	r8, r0
 80117ee:	460c      	mov	r4, r1
 80117f0:	469a      	mov	sl, r3
 80117f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80117f6:	d807      	bhi.n	8011808 <_printf_i+0x28>
 80117f8:	2f62      	cmp	r7, #98	@ 0x62
 80117fa:	d80a      	bhi.n	8011812 <_printf_i+0x32>
 80117fc:	2f00      	cmp	r7, #0
 80117fe:	f000 80d1 	beq.w	80119a4 <_printf_i+0x1c4>
 8011802:	2f58      	cmp	r7, #88	@ 0x58
 8011804:	f000 80b8 	beq.w	8011978 <_printf_i+0x198>
 8011808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801180c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011810:	e03a      	b.n	8011888 <_printf_i+0xa8>
 8011812:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011816:	2b15      	cmp	r3, #21
 8011818:	d8f6      	bhi.n	8011808 <_printf_i+0x28>
 801181a:	a101      	add	r1, pc, #4	@ (adr r1, 8011820 <_printf_i+0x40>)
 801181c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011820:	08011879 	.word	0x08011879
 8011824:	0801188d 	.word	0x0801188d
 8011828:	08011809 	.word	0x08011809
 801182c:	08011809 	.word	0x08011809
 8011830:	08011809 	.word	0x08011809
 8011834:	08011809 	.word	0x08011809
 8011838:	0801188d 	.word	0x0801188d
 801183c:	08011809 	.word	0x08011809
 8011840:	08011809 	.word	0x08011809
 8011844:	08011809 	.word	0x08011809
 8011848:	08011809 	.word	0x08011809
 801184c:	0801198b 	.word	0x0801198b
 8011850:	080118b7 	.word	0x080118b7
 8011854:	08011945 	.word	0x08011945
 8011858:	08011809 	.word	0x08011809
 801185c:	08011809 	.word	0x08011809
 8011860:	080119ad 	.word	0x080119ad
 8011864:	08011809 	.word	0x08011809
 8011868:	080118b7 	.word	0x080118b7
 801186c:	08011809 	.word	0x08011809
 8011870:	08011809 	.word	0x08011809
 8011874:	0801194d 	.word	0x0801194d
 8011878:	6833      	ldr	r3, [r6, #0]
 801187a:	1d1a      	adds	r2, r3, #4
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	6032      	str	r2, [r6, #0]
 8011880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011884:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011888:	2301      	movs	r3, #1
 801188a:	e09c      	b.n	80119c6 <_printf_i+0x1e6>
 801188c:	6833      	ldr	r3, [r6, #0]
 801188e:	6820      	ldr	r0, [r4, #0]
 8011890:	1d19      	adds	r1, r3, #4
 8011892:	6031      	str	r1, [r6, #0]
 8011894:	0606      	lsls	r6, r0, #24
 8011896:	d501      	bpl.n	801189c <_printf_i+0xbc>
 8011898:	681d      	ldr	r5, [r3, #0]
 801189a:	e003      	b.n	80118a4 <_printf_i+0xc4>
 801189c:	0645      	lsls	r5, r0, #25
 801189e:	d5fb      	bpl.n	8011898 <_printf_i+0xb8>
 80118a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80118a4:	2d00      	cmp	r5, #0
 80118a6:	da03      	bge.n	80118b0 <_printf_i+0xd0>
 80118a8:	232d      	movs	r3, #45	@ 0x2d
 80118aa:	426d      	negs	r5, r5
 80118ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118b0:	4858      	ldr	r0, [pc, #352]	@ (8011a14 <_printf_i+0x234>)
 80118b2:	230a      	movs	r3, #10
 80118b4:	e011      	b.n	80118da <_printf_i+0xfa>
 80118b6:	6821      	ldr	r1, [r4, #0]
 80118b8:	6833      	ldr	r3, [r6, #0]
 80118ba:	0608      	lsls	r0, r1, #24
 80118bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80118c0:	d402      	bmi.n	80118c8 <_printf_i+0xe8>
 80118c2:	0649      	lsls	r1, r1, #25
 80118c4:	bf48      	it	mi
 80118c6:	b2ad      	uxthmi	r5, r5
 80118c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80118ca:	4852      	ldr	r0, [pc, #328]	@ (8011a14 <_printf_i+0x234>)
 80118cc:	6033      	str	r3, [r6, #0]
 80118ce:	bf14      	ite	ne
 80118d0:	230a      	movne	r3, #10
 80118d2:	2308      	moveq	r3, #8
 80118d4:	2100      	movs	r1, #0
 80118d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80118da:	6866      	ldr	r6, [r4, #4]
 80118dc:	60a6      	str	r6, [r4, #8]
 80118de:	2e00      	cmp	r6, #0
 80118e0:	db05      	blt.n	80118ee <_printf_i+0x10e>
 80118e2:	6821      	ldr	r1, [r4, #0]
 80118e4:	432e      	orrs	r6, r5
 80118e6:	f021 0104 	bic.w	r1, r1, #4
 80118ea:	6021      	str	r1, [r4, #0]
 80118ec:	d04b      	beq.n	8011986 <_printf_i+0x1a6>
 80118ee:	4616      	mov	r6, r2
 80118f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80118f4:	fb03 5711 	mls	r7, r3, r1, r5
 80118f8:	5dc7      	ldrb	r7, [r0, r7]
 80118fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80118fe:	462f      	mov	r7, r5
 8011900:	42bb      	cmp	r3, r7
 8011902:	460d      	mov	r5, r1
 8011904:	d9f4      	bls.n	80118f0 <_printf_i+0x110>
 8011906:	2b08      	cmp	r3, #8
 8011908:	d10b      	bne.n	8011922 <_printf_i+0x142>
 801190a:	6823      	ldr	r3, [r4, #0]
 801190c:	07df      	lsls	r7, r3, #31
 801190e:	d508      	bpl.n	8011922 <_printf_i+0x142>
 8011910:	6923      	ldr	r3, [r4, #16]
 8011912:	6861      	ldr	r1, [r4, #4]
 8011914:	4299      	cmp	r1, r3
 8011916:	bfde      	ittt	le
 8011918:	2330      	movle	r3, #48	@ 0x30
 801191a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801191e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011922:	1b92      	subs	r2, r2, r6
 8011924:	6122      	str	r2, [r4, #16]
 8011926:	f8cd a000 	str.w	sl, [sp]
 801192a:	464b      	mov	r3, r9
 801192c:	aa03      	add	r2, sp, #12
 801192e:	4621      	mov	r1, r4
 8011930:	4640      	mov	r0, r8
 8011932:	f7ff fee7 	bl	8011704 <_printf_common>
 8011936:	3001      	adds	r0, #1
 8011938:	d14a      	bne.n	80119d0 <_printf_i+0x1f0>
 801193a:	f04f 30ff 	mov.w	r0, #4294967295
 801193e:	b004      	add	sp, #16
 8011940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011944:	6823      	ldr	r3, [r4, #0]
 8011946:	f043 0320 	orr.w	r3, r3, #32
 801194a:	6023      	str	r3, [r4, #0]
 801194c:	4832      	ldr	r0, [pc, #200]	@ (8011a18 <_printf_i+0x238>)
 801194e:	2778      	movs	r7, #120	@ 0x78
 8011950:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011954:	6823      	ldr	r3, [r4, #0]
 8011956:	6831      	ldr	r1, [r6, #0]
 8011958:	061f      	lsls	r7, r3, #24
 801195a:	f851 5b04 	ldr.w	r5, [r1], #4
 801195e:	d402      	bmi.n	8011966 <_printf_i+0x186>
 8011960:	065f      	lsls	r7, r3, #25
 8011962:	bf48      	it	mi
 8011964:	b2ad      	uxthmi	r5, r5
 8011966:	6031      	str	r1, [r6, #0]
 8011968:	07d9      	lsls	r1, r3, #31
 801196a:	bf44      	itt	mi
 801196c:	f043 0320 	orrmi.w	r3, r3, #32
 8011970:	6023      	strmi	r3, [r4, #0]
 8011972:	b11d      	cbz	r5, 801197c <_printf_i+0x19c>
 8011974:	2310      	movs	r3, #16
 8011976:	e7ad      	b.n	80118d4 <_printf_i+0xf4>
 8011978:	4826      	ldr	r0, [pc, #152]	@ (8011a14 <_printf_i+0x234>)
 801197a:	e7e9      	b.n	8011950 <_printf_i+0x170>
 801197c:	6823      	ldr	r3, [r4, #0]
 801197e:	f023 0320 	bic.w	r3, r3, #32
 8011982:	6023      	str	r3, [r4, #0]
 8011984:	e7f6      	b.n	8011974 <_printf_i+0x194>
 8011986:	4616      	mov	r6, r2
 8011988:	e7bd      	b.n	8011906 <_printf_i+0x126>
 801198a:	6833      	ldr	r3, [r6, #0]
 801198c:	6825      	ldr	r5, [r4, #0]
 801198e:	6961      	ldr	r1, [r4, #20]
 8011990:	1d18      	adds	r0, r3, #4
 8011992:	6030      	str	r0, [r6, #0]
 8011994:	062e      	lsls	r6, r5, #24
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	d501      	bpl.n	801199e <_printf_i+0x1be>
 801199a:	6019      	str	r1, [r3, #0]
 801199c:	e002      	b.n	80119a4 <_printf_i+0x1c4>
 801199e:	0668      	lsls	r0, r5, #25
 80119a0:	d5fb      	bpl.n	801199a <_printf_i+0x1ba>
 80119a2:	8019      	strh	r1, [r3, #0]
 80119a4:	2300      	movs	r3, #0
 80119a6:	6123      	str	r3, [r4, #16]
 80119a8:	4616      	mov	r6, r2
 80119aa:	e7bc      	b.n	8011926 <_printf_i+0x146>
 80119ac:	6833      	ldr	r3, [r6, #0]
 80119ae:	1d1a      	adds	r2, r3, #4
 80119b0:	6032      	str	r2, [r6, #0]
 80119b2:	681e      	ldr	r6, [r3, #0]
 80119b4:	6862      	ldr	r2, [r4, #4]
 80119b6:	2100      	movs	r1, #0
 80119b8:	4630      	mov	r0, r6
 80119ba:	f7ee fc91 	bl	80002e0 <memchr>
 80119be:	b108      	cbz	r0, 80119c4 <_printf_i+0x1e4>
 80119c0:	1b80      	subs	r0, r0, r6
 80119c2:	6060      	str	r0, [r4, #4]
 80119c4:	6863      	ldr	r3, [r4, #4]
 80119c6:	6123      	str	r3, [r4, #16]
 80119c8:	2300      	movs	r3, #0
 80119ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80119ce:	e7aa      	b.n	8011926 <_printf_i+0x146>
 80119d0:	6923      	ldr	r3, [r4, #16]
 80119d2:	4632      	mov	r2, r6
 80119d4:	4649      	mov	r1, r9
 80119d6:	4640      	mov	r0, r8
 80119d8:	47d0      	blx	sl
 80119da:	3001      	adds	r0, #1
 80119dc:	d0ad      	beq.n	801193a <_printf_i+0x15a>
 80119de:	6823      	ldr	r3, [r4, #0]
 80119e0:	079b      	lsls	r3, r3, #30
 80119e2:	d413      	bmi.n	8011a0c <_printf_i+0x22c>
 80119e4:	68e0      	ldr	r0, [r4, #12]
 80119e6:	9b03      	ldr	r3, [sp, #12]
 80119e8:	4298      	cmp	r0, r3
 80119ea:	bfb8      	it	lt
 80119ec:	4618      	movlt	r0, r3
 80119ee:	e7a6      	b.n	801193e <_printf_i+0x15e>
 80119f0:	2301      	movs	r3, #1
 80119f2:	4632      	mov	r2, r6
 80119f4:	4649      	mov	r1, r9
 80119f6:	4640      	mov	r0, r8
 80119f8:	47d0      	blx	sl
 80119fa:	3001      	adds	r0, #1
 80119fc:	d09d      	beq.n	801193a <_printf_i+0x15a>
 80119fe:	3501      	adds	r5, #1
 8011a00:	68e3      	ldr	r3, [r4, #12]
 8011a02:	9903      	ldr	r1, [sp, #12]
 8011a04:	1a5b      	subs	r3, r3, r1
 8011a06:	42ab      	cmp	r3, r5
 8011a08:	dcf2      	bgt.n	80119f0 <_printf_i+0x210>
 8011a0a:	e7eb      	b.n	80119e4 <_printf_i+0x204>
 8011a0c:	2500      	movs	r5, #0
 8011a0e:	f104 0619 	add.w	r6, r4, #25
 8011a12:	e7f5      	b.n	8011a00 <_printf_i+0x220>
 8011a14:	08015f62 	.word	0x08015f62
 8011a18:	08015f73 	.word	0x08015f73

08011a1c <_scanf_float>:
 8011a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a20:	b087      	sub	sp, #28
 8011a22:	4691      	mov	r9, r2
 8011a24:	9303      	str	r3, [sp, #12]
 8011a26:	688b      	ldr	r3, [r1, #8]
 8011a28:	1e5a      	subs	r2, r3, #1
 8011a2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011a2e:	bf81      	itttt	hi
 8011a30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011a34:	eb03 0b05 	addhi.w	fp, r3, r5
 8011a38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011a3c:	608b      	strhi	r3, [r1, #8]
 8011a3e:	680b      	ldr	r3, [r1, #0]
 8011a40:	460a      	mov	r2, r1
 8011a42:	f04f 0500 	mov.w	r5, #0
 8011a46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011a4a:	f842 3b1c 	str.w	r3, [r2], #28
 8011a4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011a52:	4680      	mov	r8, r0
 8011a54:	460c      	mov	r4, r1
 8011a56:	bf98      	it	ls
 8011a58:	f04f 0b00 	movls.w	fp, #0
 8011a5c:	9201      	str	r2, [sp, #4]
 8011a5e:	4616      	mov	r6, r2
 8011a60:	46aa      	mov	sl, r5
 8011a62:	462f      	mov	r7, r5
 8011a64:	9502      	str	r5, [sp, #8]
 8011a66:	68a2      	ldr	r2, [r4, #8]
 8011a68:	b15a      	cbz	r2, 8011a82 <_scanf_float+0x66>
 8011a6a:	f8d9 3000 	ldr.w	r3, [r9]
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	2b4e      	cmp	r3, #78	@ 0x4e
 8011a72:	d863      	bhi.n	8011b3c <_scanf_float+0x120>
 8011a74:	2b40      	cmp	r3, #64	@ 0x40
 8011a76:	d83b      	bhi.n	8011af0 <_scanf_float+0xd4>
 8011a78:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011a7c:	b2c8      	uxtb	r0, r1
 8011a7e:	280e      	cmp	r0, #14
 8011a80:	d939      	bls.n	8011af6 <_scanf_float+0xda>
 8011a82:	b11f      	cbz	r7, 8011a8c <_scanf_float+0x70>
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011a8a:	6023      	str	r3, [r4, #0]
 8011a8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011a90:	f1ba 0f01 	cmp.w	sl, #1
 8011a94:	f200 8114 	bhi.w	8011cc0 <_scanf_float+0x2a4>
 8011a98:	9b01      	ldr	r3, [sp, #4]
 8011a9a:	429e      	cmp	r6, r3
 8011a9c:	f200 8105 	bhi.w	8011caa <_scanf_float+0x28e>
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	b007      	add	sp, #28
 8011aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011aac:	2a0d      	cmp	r2, #13
 8011aae:	d8e8      	bhi.n	8011a82 <_scanf_float+0x66>
 8011ab0:	a101      	add	r1, pc, #4	@ (adr r1, 8011ab8 <_scanf_float+0x9c>)
 8011ab2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011ab6:	bf00      	nop
 8011ab8:	08011c01 	.word	0x08011c01
 8011abc:	08011a83 	.word	0x08011a83
 8011ac0:	08011a83 	.word	0x08011a83
 8011ac4:	08011a83 	.word	0x08011a83
 8011ac8:	08011c5d 	.word	0x08011c5d
 8011acc:	08011c37 	.word	0x08011c37
 8011ad0:	08011a83 	.word	0x08011a83
 8011ad4:	08011a83 	.word	0x08011a83
 8011ad8:	08011c0f 	.word	0x08011c0f
 8011adc:	08011a83 	.word	0x08011a83
 8011ae0:	08011a83 	.word	0x08011a83
 8011ae4:	08011a83 	.word	0x08011a83
 8011ae8:	08011a83 	.word	0x08011a83
 8011aec:	08011bcb 	.word	0x08011bcb
 8011af0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011af4:	e7da      	b.n	8011aac <_scanf_float+0x90>
 8011af6:	290e      	cmp	r1, #14
 8011af8:	d8c3      	bhi.n	8011a82 <_scanf_float+0x66>
 8011afa:	a001      	add	r0, pc, #4	@ (adr r0, 8011b00 <_scanf_float+0xe4>)
 8011afc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011b00:	08011bbb 	.word	0x08011bbb
 8011b04:	08011a83 	.word	0x08011a83
 8011b08:	08011bbb 	.word	0x08011bbb
 8011b0c:	08011c4b 	.word	0x08011c4b
 8011b10:	08011a83 	.word	0x08011a83
 8011b14:	08011b5d 	.word	0x08011b5d
 8011b18:	08011ba1 	.word	0x08011ba1
 8011b1c:	08011ba1 	.word	0x08011ba1
 8011b20:	08011ba1 	.word	0x08011ba1
 8011b24:	08011ba1 	.word	0x08011ba1
 8011b28:	08011ba1 	.word	0x08011ba1
 8011b2c:	08011ba1 	.word	0x08011ba1
 8011b30:	08011ba1 	.word	0x08011ba1
 8011b34:	08011ba1 	.word	0x08011ba1
 8011b38:	08011ba1 	.word	0x08011ba1
 8011b3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8011b3e:	d809      	bhi.n	8011b54 <_scanf_float+0x138>
 8011b40:	2b60      	cmp	r3, #96	@ 0x60
 8011b42:	d8b1      	bhi.n	8011aa8 <_scanf_float+0x8c>
 8011b44:	2b54      	cmp	r3, #84	@ 0x54
 8011b46:	d07b      	beq.n	8011c40 <_scanf_float+0x224>
 8011b48:	2b59      	cmp	r3, #89	@ 0x59
 8011b4a:	d19a      	bne.n	8011a82 <_scanf_float+0x66>
 8011b4c:	2d07      	cmp	r5, #7
 8011b4e:	d198      	bne.n	8011a82 <_scanf_float+0x66>
 8011b50:	2508      	movs	r5, #8
 8011b52:	e02f      	b.n	8011bb4 <_scanf_float+0x198>
 8011b54:	2b74      	cmp	r3, #116	@ 0x74
 8011b56:	d073      	beq.n	8011c40 <_scanf_float+0x224>
 8011b58:	2b79      	cmp	r3, #121	@ 0x79
 8011b5a:	e7f6      	b.n	8011b4a <_scanf_float+0x12e>
 8011b5c:	6821      	ldr	r1, [r4, #0]
 8011b5e:	05c8      	lsls	r0, r1, #23
 8011b60:	d51e      	bpl.n	8011ba0 <_scanf_float+0x184>
 8011b62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011b66:	6021      	str	r1, [r4, #0]
 8011b68:	3701      	adds	r7, #1
 8011b6a:	f1bb 0f00 	cmp.w	fp, #0
 8011b6e:	d003      	beq.n	8011b78 <_scanf_float+0x15c>
 8011b70:	3201      	adds	r2, #1
 8011b72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b76:	60a2      	str	r2, [r4, #8]
 8011b78:	68a3      	ldr	r3, [r4, #8]
 8011b7a:	3b01      	subs	r3, #1
 8011b7c:	60a3      	str	r3, [r4, #8]
 8011b7e:	6923      	ldr	r3, [r4, #16]
 8011b80:	3301      	adds	r3, #1
 8011b82:	6123      	str	r3, [r4, #16]
 8011b84:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011b88:	3b01      	subs	r3, #1
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	f8c9 3004 	str.w	r3, [r9, #4]
 8011b90:	f340 8082 	ble.w	8011c98 <_scanf_float+0x27c>
 8011b94:	f8d9 3000 	ldr.w	r3, [r9]
 8011b98:	3301      	adds	r3, #1
 8011b9a:	f8c9 3000 	str.w	r3, [r9]
 8011b9e:	e762      	b.n	8011a66 <_scanf_float+0x4a>
 8011ba0:	eb1a 0105 	adds.w	r1, sl, r5
 8011ba4:	f47f af6d 	bne.w	8011a82 <_scanf_float+0x66>
 8011ba8:	6822      	ldr	r2, [r4, #0]
 8011baa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011bae:	6022      	str	r2, [r4, #0]
 8011bb0:	460d      	mov	r5, r1
 8011bb2:	468a      	mov	sl, r1
 8011bb4:	f806 3b01 	strb.w	r3, [r6], #1
 8011bb8:	e7de      	b.n	8011b78 <_scanf_float+0x15c>
 8011bba:	6822      	ldr	r2, [r4, #0]
 8011bbc:	0610      	lsls	r0, r2, #24
 8011bbe:	f57f af60 	bpl.w	8011a82 <_scanf_float+0x66>
 8011bc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011bc6:	6022      	str	r2, [r4, #0]
 8011bc8:	e7f4      	b.n	8011bb4 <_scanf_float+0x198>
 8011bca:	f1ba 0f00 	cmp.w	sl, #0
 8011bce:	d10c      	bne.n	8011bea <_scanf_float+0x1ce>
 8011bd0:	b977      	cbnz	r7, 8011bf0 <_scanf_float+0x1d4>
 8011bd2:	6822      	ldr	r2, [r4, #0]
 8011bd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011bd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011bdc:	d108      	bne.n	8011bf0 <_scanf_float+0x1d4>
 8011bde:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011be2:	6022      	str	r2, [r4, #0]
 8011be4:	f04f 0a01 	mov.w	sl, #1
 8011be8:	e7e4      	b.n	8011bb4 <_scanf_float+0x198>
 8011bea:	f1ba 0f02 	cmp.w	sl, #2
 8011bee:	d050      	beq.n	8011c92 <_scanf_float+0x276>
 8011bf0:	2d01      	cmp	r5, #1
 8011bf2:	d002      	beq.n	8011bfa <_scanf_float+0x1de>
 8011bf4:	2d04      	cmp	r5, #4
 8011bf6:	f47f af44 	bne.w	8011a82 <_scanf_float+0x66>
 8011bfa:	3501      	adds	r5, #1
 8011bfc:	b2ed      	uxtb	r5, r5
 8011bfe:	e7d9      	b.n	8011bb4 <_scanf_float+0x198>
 8011c00:	f1ba 0f01 	cmp.w	sl, #1
 8011c04:	f47f af3d 	bne.w	8011a82 <_scanf_float+0x66>
 8011c08:	f04f 0a02 	mov.w	sl, #2
 8011c0c:	e7d2      	b.n	8011bb4 <_scanf_float+0x198>
 8011c0e:	b975      	cbnz	r5, 8011c2e <_scanf_float+0x212>
 8011c10:	2f00      	cmp	r7, #0
 8011c12:	f47f af37 	bne.w	8011a84 <_scanf_float+0x68>
 8011c16:	6822      	ldr	r2, [r4, #0]
 8011c18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011c1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011c20:	f040 80fc 	bne.w	8011e1c <_scanf_float+0x400>
 8011c24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011c28:	6022      	str	r2, [r4, #0]
 8011c2a:	2501      	movs	r5, #1
 8011c2c:	e7c2      	b.n	8011bb4 <_scanf_float+0x198>
 8011c2e:	2d03      	cmp	r5, #3
 8011c30:	d0e3      	beq.n	8011bfa <_scanf_float+0x1de>
 8011c32:	2d05      	cmp	r5, #5
 8011c34:	e7df      	b.n	8011bf6 <_scanf_float+0x1da>
 8011c36:	2d02      	cmp	r5, #2
 8011c38:	f47f af23 	bne.w	8011a82 <_scanf_float+0x66>
 8011c3c:	2503      	movs	r5, #3
 8011c3e:	e7b9      	b.n	8011bb4 <_scanf_float+0x198>
 8011c40:	2d06      	cmp	r5, #6
 8011c42:	f47f af1e 	bne.w	8011a82 <_scanf_float+0x66>
 8011c46:	2507      	movs	r5, #7
 8011c48:	e7b4      	b.n	8011bb4 <_scanf_float+0x198>
 8011c4a:	6822      	ldr	r2, [r4, #0]
 8011c4c:	0591      	lsls	r1, r2, #22
 8011c4e:	f57f af18 	bpl.w	8011a82 <_scanf_float+0x66>
 8011c52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011c56:	6022      	str	r2, [r4, #0]
 8011c58:	9702      	str	r7, [sp, #8]
 8011c5a:	e7ab      	b.n	8011bb4 <_scanf_float+0x198>
 8011c5c:	6822      	ldr	r2, [r4, #0]
 8011c5e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011c62:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011c66:	d005      	beq.n	8011c74 <_scanf_float+0x258>
 8011c68:	0550      	lsls	r0, r2, #21
 8011c6a:	f57f af0a 	bpl.w	8011a82 <_scanf_float+0x66>
 8011c6e:	2f00      	cmp	r7, #0
 8011c70:	f000 80d4 	beq.w	8011e1c <_scanf_float+0x400>
 8011c74:	0591      	lsls	r1, r2, #22
 8011c76:	bf58      	it	pl
 8011c78:	9902      	ldrpl	r1, [sp, #8]
 8011c7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011c7e:	bf58      	it	pl
 8011c80:	1a79      	subpl	r1, r7, r1
 8011c82:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011c86:	bf58      	it	pl
 8011c88:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011c8c:	6022      	str	r2, [r4, #0]
 8011c8e:	2700      	movs	r7, #0
 8011c90:	e790      	b.n	8011bb4 <_scanf_float+0x198>
 8011c92:	f04f 0a03 	mov.w	sl, #3
 8011c96:	e78d      	b.n	8011bb4 <_scanf_float+0x198>
 8011c98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011c9c:	4649      	mov	r1, r9
 8011c9e:	4640      	mov	r0, r8
 8011ca0:	4798      	blx	r3
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	f43f aedf 	beq.w	8011a66 <_scanf_float+0x4a>
 8011ca8:	e6eb      	b.n	8011a82 <_scanf_float+0x66>
 8011caa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011cae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011cb2:	464a      	mov	r2, r9
 8011cb4:	4640      	mov	r0, r8
 8011cb6:	4798      	blx	r3
 8011cb8:	6923      	ldr	r3, [r4, #16]
 8011cba:	3b01      	subs	r3, #1
 8011cbc:	6123      	str	r3, [r4, #16]
 8011cbe:	e6eb      	b.n	8011a98 <_scanf_float+0x7c>
 8011cc0:	1e6b      	subs	r3, r5, #1
 8011cc2:	2b06      	cmp	r3, #6
 8011cc4:	d824      	bhi.n	8011d10 <_scanf_float+0x2f4>
 8011cc6:	2d02      	cmp	r5, #2
 8011cc8:	d836      	bhi.n	8011d38 <_scanf_float+0x31c>
 8011cca:	9b01      	ldr	r3, [sp, #4]
 8011ccc:	429e      	cmp	r6, r3
 8011cce:	f67f aee7 	bls.w	8011aa0 <_scanf_float+0x84>
 8011cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011cd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011cda:	464a      	mov	r2, r9
 8011cdc:	4640      	mov	r0, r8
 8011cde:	4798      	blx	r3
 8011ce0:	6923      	ldr	r3, [r4, #16]
 8011ce2:	3b01      	subs	r3, #1
 8011ce4:	6123      	str	r3, [r4, #16]
 8011ce6:	e7f0      	b.n	8011cca <_scanf_float+0x2ae>
 8011ce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011cec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011cf0:	464a      	mov	r2, r9
 8011cf2:	4640      	mov	r0, r8
 8011cf4:	4798      	blx	r3
 8011cf6:	6923      	ldr	r3, [r4, #16]
 8011cf8:	3b01      	subs	r3, #1
 8011cfa:	6123      	str	r3, [r4, #16]
 8011cfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d00:	fa5f fa8a 	uxtb.w	sl, sl
 8011d04:	f1ba 0f02 	cmp.w	sl, #2
 8011d08:	d1ee      	bne.n	8011ce8 <_scanf_float+0x2cc>
 8011d0a:	3d03      	subs	r5, #3
 8011d0c:	b2ed      	uxtb	r5, r5
 8011d0e:	1b76      	subs	r6, r6, r5
 8011d10:	6823      	ldr	r3, [r4, #0]
 8011d12:	05da      	lsls	r2, r3, #23
 8011d14:	d530      	bpl.n	8011d78 <_scanf_float+0x35c>
 8011d16:	055b      	lsls	r3, r3, #21
 8011d18:	d511      	bpl.n	8011d3e <_scanf_float+0x322>
 8011d1a:	9b01      	ldr	r3, [sp, #4]
 8011d1c:	429e      	cmp	r6, r3
 8011d1e:	f67f aebf 	bls.w	8011aa0 <_scanf_float+0x84>
 8011d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011d26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011d2a:	464a      	mov	r2, r9
 8011d2c:	4640      	mov	r0, r8
 8011d2e:	4798      	blx	r3
 8011d30:	6923      	ldr	r3, [r4, #16]
 8011d32:	3b01      	subs	r3, #1
 8011d34:	6123      	str	r3, [r4, #16]
 8011d36:	e7f0      	b.n	8011d1a <_scanf_float+0x2fe>
 8011d38:	46aa      	mov	sl, r5
 8011d3a:	46b3      	mov	fp, r6
 8011d3c:	e7de      	b.n	8011cfc <_scanf_float+0x2e0>
 8011d3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011d42:	6923      	ldr	r3, [r4, #16]
 8011d44:	2965      	cmp	r1, #101	@ 0x65
 8011d46:	f103 33ff 	add.w	r3, r3, #4294967295
 8011d4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8011d4e:	6123      	str	r3, [r4, #16]
 8011d50:	d00c      	beq.n	8011d6c <_scanf_float+0x350>
 8011d52:	2945      	cmp	r1, #69	@ 0x45
 8011d54:	d00a      	beq.n	8011d6c <_scanf_float+0x350>
 8011d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011d5a:	464a      	mov	r2, r9
 8011d5c:	4640      	mov	r0, r8
 8011d5e:	4798      	blx	r3
 8011d60:	6923      	ldr	r3, [r4, #16]
 8011d62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011d66:	3b01      	subs	r3, #1
 8011d68:	1eb5      	subs	r5, r6, #2
 8011d6a:	6123      	str	r3, [r4, #16]
 8011d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011d70:	464a      	mov	r2, r9
 8011d72:	4640      	mov	r0, r8
 8011d74:	4798      	blx	r3
 8011d76:	462e      	mov	r6, r5
 8011d78:	6822      	ldr	r2, [r4, #0]
 8011d7a:	f012 0210 	ands.w	r2, r2, #16
 8011d7e:	d001      	beq.n	8011d84 <_scanf_float+0x368>
 8011d80:	2000      	movs	r0, #0
 8011d82:	e68e      	b.n	8011aa2 <_scanf_float+0x86>
 8011d84:	7032      	strb	r2, [r6, #0]
 8011d86:	6823      	ldr	r3, [r4, #0]
 8011d88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011d90:	d123      	bne.n	8011dda <_scanf_float+0x3be>
 8011d92:	9b02      	ldr	r3, [sp, #8]
 8011d94:	429f      	cmp	r7, r3
 8011d96:	d00a      	beq.n	8011dae <_scanf_float+0x392>
 8011d98:	1bda      	subs	r2, r3, r7
 8011d9a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011d9e:	429e      	cmp	r6, r3
 8011da0:	bf28      	it	cs
 8011da2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011da6:	491e      	ldr	r1, [pc, #120]	@ (8011e20 <_scanf_float+0x404>)
 8011da8:	4630      	mov	r0, r6
 8011daa:	f000 f9ad 	bl	8012108 <siprintf>
 8011dae:	9901      	ldr	r1, [sp, #4]
 8011db0:	2200      	movs	r2, #0
 8011db2:	4640      	mov	r0, r8
 8011db4:	f002 fc7a 	bl	80146ac <_strtod_r>
 8011db8:	9b03      	ldr	r3, [sp, #12]
 8011dba:	6821      	ldr	r1, [r4, #0]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f011 0f02 	tst.w	r1, #2
 8011dc2:	f103 0204 	add.w	r2, r3, #4
 8011dc6:	d015      	beq.n	8011df4 <_scanf_float+0x3d8>
 8011dc8:	9903      	ldr	r1, [sp, #12]
 8011dca:	600a      	str	r2, [r1, #0]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	ed83 0b00 	vstr	d0, [r3]
 8011dd2:	68e3      	ldr	r3, [r4, #12]
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	60e3      	str	r3, [r4, #12]
 8011dd8:	e7d2      	b.n	8011d80 <_scanf_float+0x364>
 8011dda:	9b04      	ldr	r3, [sp, #16]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d0e6      	beq.n	8011dae <_scanf_float+0x392>
 8011de0:	9905      	ldr	r1, [sp, #20]
 8011de2:	230a      	movs	r3, #10
 8011de4:	3101      	adds	r1, #1
 8011de6:	4640      	mov	r0, r8
 8011de8:	f002 fce0 	bl	80147ac <_strtol_r>
 8011dec:	9b04      	ldr	r3, [sp, #16]
 8011dee:	9e05      	ldr	r6, [sp, #20]
 8011df0:	1ac2      	subs	r2, r0, r3
 8011df2:	e7d2      	b.n	8011d9a <_scanf_float+0x37e>
 8011df4:	f011 0f04 	tst.w	r1, #4
 8011df8:	9903      	ldr	r1, [sp, #12]
 8011dfa:	600a      	str	r2, [r1, #0]
 8011dfc:	d1e6      	bne.n	8011dcc <_scanf_float+0x3b0>
 8011dfe:	eeb4 0b40 	vcmp.f64	d0, d0
 8011e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e06:	681d      	ldr	r5, [r3, #0]
 8011e08:	d705      	bvc.n	8011e16 <_scanf_float+0x3fa>
 8011e0a:	4806      	ldr	r0, [pc, #24]	@ (8011e24 <_scanf_float+0x408>)
 8011e0c:	f000 fb04 	bl	8012418 <nanf>
 8011e10:	ed85 0a00 	vstr	s0, [r5]
 8011e14:	e7dd      	b.n	8011dd2 <_scanf_float+0x3b6>
 8011e16:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011e1a:	e7f9      	b.n	8011e10 <_scanf_float+0x3f4>
 8011e1c:	2700      	movs	r7, #0
 8011e1e:	e635      	b.n	8011a8c <_scanf_float+0x70>
 8011e20:	08015f84 	.word	0x08015f84
 8011e24:	080160c5 	.word	0x080160c5

08011e28 <std>:
 8011e28:	2300      	movs	r3, #0
 8011e2a:	b510      	push	{r4, lr}
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8011e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e36:	6083      	str	r3, [r0, #8]
 8011e38:	8181      	strh	r1, [r0, #12]
 8011e3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8011e3c:	81c2      	strh	r2, [r0, #14]
 8011e3e:	6183      	str	r3, [r0, #24]
 8011e40:	4619      	mov	r1, r3
 8011e42:	2208      	movs	r2, #8
 8011e44:	305c      	adds	r0, #92	@ 0x5c
 8011e46:	f000 fa59 	bl	80122fc <memset>
 8011e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8011e80 <std+0x58>)
 8011e4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8011e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8011e84 <std+0x5c>)
 8011e50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011e52:	4b0d      	ldr	r3, [pc, #52]	@ (8011e88 <std+0x60>)
 8011e54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011e56:	4b0d      	ldr	r3, [pc, #52]	@ (8011e8c <std+0x64>)
 8011e58:	6323      	str	r3, [r4, #48]	@ 0x30
 8011e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8011e90 <std+0x68>)
 8011e5c:	6224      	str	r4, [r4, #32]
 8011e5e:	429c      	cmp	r4, r3
 8011e60:	d006      	beq.n	8011e70 <std+0x48>
 8011e62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011e66:	4294      	cmp	r4, r2
 8011e68:	d002      	beq.n	8011e70 <std+0x48>
 8011e6a:	33d0      	adds	r3, #208	@ 0xd0
 8011e6c:	429c      	cmp	r4, r3
 8011e6e:	d105      	bne.n	8011e7c <std+0x54>
 8011e70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e78:	f000 babc 	b.w	80123f4 <__retarget_lock_init_recursive>
 8011e7c:	bd10      	pop	{r4, pc}
 8011e7e:	bf00      	nop
 8011e80:	0801214d 	.word	0x0801214d
 8011e84:	0801216f 	.word	0x0801216f
 8011e88:	080121a7 	.word	0x080121a7
 8011e8c:	080121cb 	.word	0x080121cb
 8011e90:	24001504 	.word	0x24001504

08011e94 <stdio_exit_handler>:
 8011e94:	4a02      	ldr	r2, [pc, #8]	@ (8011ea0 <stdio_exit_handler+0xc>)
 8011e96:	4903      	ldr	r1, [pc, #12]	@ (8011ea4 <stdio_exit_handler+0x10>)
 8011e98:	4803      	ldr	r0, [pc, #12]	@ (8011ea8 <stdio_exit_handler+0x14>)
 8011e9a:	f000 b869 	b.w	8011f70 <_fwalk_sglue>
 8011e9e:	bf00      	nop
 8011ea0:	24000028 	.word	0x24000028
 8011ea4:	08014ded 	.word	0x08014ded
 8011ea8:	24000038 	.word	0x24000038

08011eac <cleanup_stdio>:
 8011eac:	6841      	ldr	r1, [r0, #4]
 8011eae:	4b0c      	ldr	r3, [pc, #48]	@ (8011ee0 <cleanup_stdio+0x34>)
 8011eb0:	4299      	cmp	r1, r3
 8011eb2:	b510      	push	{r4, lr}
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	d001      	beq.n	8011ebc <cleanup_stdio+0x10>
 8011eb8:	f002 ff98 	bl	8014dec <_fflush_r>
 8011ebc:	68a1      	ldr	r1, [r4, #8]
 8011ebe:	4b09      	ldr	r3, [pc, #36]	@ (8011ee4 <cleanup_stdio+0x38>)
 8011ec0:	4299      	cmp	r1, r3
 8011ec2:	d002      	beq.n	8011eca <cleanup_stdio+0x1e>
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	f002 ff91 	bl	8014dec <_fflush_r>
 8011eca:	68e1      	ldr	r1, [r4, #12]
 8011ecc:	4b06      	ldr	r3, [pc, #24]	@ (8011ee8 <cleanup_stdio+0x3c>)
 8011ece:	4299      	cmp	r1, r3
 8011ed0:	d004      	beq.n	8011edc <cleanup_stdio+0x30>
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ed8:	f002 bf88 	b.w	8014dec <_fflush_r>
 8011edc:	bd10      	pop	{r4, pc}
 8011ede:	bf00      	nop
 8011ee0:	24001504 	.word	0x24001504
 8011ee4:	2400156c 	.word	0x2400156c
 8011ee8:	240015d4 	.word	0x240015d4

08011eec <global_stdio_init.part.0>:
 8011eec:	b510      	push	{r4, lr}
 8011eee:	4b0b      	ldr	r3, [pc, #44]	@ (8011f1c <global_stdio_init.part.0+0x30>)
 8011ef0:	4c0b      	ldr	r4, [pc, #44]	@ (8011f20 <global_stdio_init.part.0+0x34>)
 8011ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8011f24 <global_stdio_init.part.0+0x38>)
 8011ef4:	601a      	str	r2, [r3, #0]
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	2200      	movs	r2, #0
 8011efa:	2104      	movs	r1, #4
 8011efc:	f7ff ff94 	bl	8011e28 <std>
 8011f00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011f04:	2201      	movs	r2, #1
 8011f06:	2109      	movs	r1, #9
 8011f08:	f7ff ff8e 	bl	8011e28 <std>
 8011f0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011f10:	2202      	movs	r2, #2
 8011f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f16:	2112      	movs	r1, #18
 8011f18:	f7ff bf86 	b.w	8011e28 <std>
 8011f1c:	2400163c 	.word	0x2400163c
 8011f20:	24001504 	.word	0x24001504
 8011f24:	08011e95 	.word	0x08011e95

08011f28 <__sfp_lock_acquire>:
 8011f28:	4801      	ldr	r0, [pc, #4]	@ (8011f30 <__sfp_lock_acquire+0x8>)
 8011f2a:	f000 ba64 	b.w	80123f6 <__retarget_lock_acquire_recursive>
 8011f2e:	bf00      	nop
 8011f30:	24001645 	.word	0x24001645

08011f34 <__sfp_lock_release>:
 8011f34:	4801      	ldr	r0, [pc, #4]	@ (8011f3c <__sfp_lock_release+0x8>)
 8011f36:	f000 ba5f 	b.w	80123f8 <__retarget_lock_release_recursive>
 8011f3a:	bf00      	nop
 8011f3c:	24001645 	.word	0x24001645

08011f40 <__sinit>:
 8011f40:	b510      	push	{r4, lr}
 8011f42:	4604      	mov	r4, r0
 8011f44:	f7ff fff0 	bl	8011f28 <__sfp_lock_acquire>
 8011f48:	6a23      	ldr	r3, [r4, #32]
 8011f4a:	b11b      	cbz	r3, 8011f54 <__sinit+0x14>
 8011f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f50:	f7ff bff0 	b.w	8011f34 <__sfp_lock_release>
 8011f54:	4b04      	ldr	r3, [pc, #16]	@ (8011f68 <__sinit+0x28>)
 8011f56:	6223      	str	r3, [r4, #32]
 8011f58:	4b04      	ldr	r3, [pc, #16]	@ (8011f6c <__sinit+0x2c>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1f5      	bne.n	8011f4c <__sinit+0xc>
 8011f60:	f7ff ffc4 	bl	8011eec <global_stdio_init.part.0>
 8011f64:	e7f2      	b.n	8011f4c <__sinit+0xc>
 8011f66:	bf00      	nop
 8011f68:	08011ead 	.word	0x08011ead
 8011f6c:	2400163c 	.word	0x2400163c

08011f70 <_fwalk_sglue>:
 8011f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f74:	4607      	mov	r7, r0
 8011f76:	4688      	mov	r8, r1
 8011f78:	4614      	mov	r4, r2
 8011f7a:	2600      	movs	r6, #0
 8011f7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011f80:	f1b9 0901 	subs.w	r9, r9, #1
 8011f84:	d505      	bpl.n	8011f92 <_fwalk_sglue+0x22>
 8011f86:	6824      	ldr	r4, [r4, #0]
 8011f88:	2c00      	cmp	r4, #0
 8011f8a:	d1f7      	bne.n	8011f7c <_fwalk_sglue+0xc>
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f92:	89ab      	ldrh	r3, [r5, #12]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d907      	bls.n	8011fa8 <_fwalk_sglue+0x38>
 8011f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	d003      	beq.n	8011fa8 <_fwalk_sglue+0x38>
 8011fa0:	4629      	mov	r1, r5
 8011fa2:	4638      	mov	r0, r7
 8011fa4:	47c0      	blx	r8
 8011fa6:	4306      	orrs	r6, r0
 8011fa8:	3568      	adds	r5, #104	@ 0x68
 8011faa:	e7e9      	b.n	8011f80 <_fwalk_sglue+0x10>

08011fac <iprintf>:
 8011fac:	b40f      	push	{r0, r1, r2, r3}
 8011fae:	b507      	push	{r0, r1, r2, lr}
 8011fb0:	4906      	ldr	r1, [pc, #24]	@ (8011fcc <iprintf+0x20>)
 8011fb2:	ab04      	add	r3, sp, #16
 8011fb4:	6808      	ldr	r0, [r1, #0]
 8011fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fba:	6881      	ldr	r1, [r0, #8]
 8011fbc:	9301      	str	r3, [sp, #4]
 8011fbe:	f002 fd79 	bl	8014ab4 <_vfiprintf_r>
 8011fc2:	b003      	add	sp, #12
 8011fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fc8:	b004      	add	sp, #16
 8011fca:	4770      	bx	lr
 8011fcc:	24000034 	.word	0x24000034

08011fd0 <putchar>:
 8011fd0:	4b02      	ldr	r3, [pc, #8]	@ (8011fdc <putchar+0xc>)
 8011fd2:	4601      	mov	r1, r0
 8011fd4:	6818      	ldr	r0, [r3, #0]
 8011fd6:	6882      	ldr	r2, [r0, #8]
 8011fd8:	f002 bf92 	b.w	8014f00 <_putc_r>
 8011fdc:	24000034 	.word	0x24000034

08011fe0 <_puts_r>:
 8011fe0:	6a03      	ldr	r3, [r0, #32]
 8011fe2:	b570      	push	{r4, r5, r6, lr}
 8011fe4:	6884      	ldr	r4, [r0, #8]
 8011fe6:	4605      	mov	r5, r0
 8011fe8:	460e      	mov	r6, r1
 8011fea:	b90b      	cbnz	r3, 8011ff0 <_puts_r+0x10>
 8011fec:	f7ff ffa8 	bl	8011f40 <__sinit>
 8011ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ff2:	07db      	lsls	r3, r3, #31
 8011ff4:	d405      	bmi.n	8012002 <_puts_r+0x22>
 8011ff6:	89a3      	ldrh	r3, [r4, #12]
 8011ff8:	0598      	lsls	r0, r3, #22
 8011ffa:	d402      	bmi.n	8012002 <_puts_r+0x22>
 8011ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ffe:	f000 f9fa 	bl	80123f6 <__retarget_lock_acquire_recursive>
 8012002:	89a3      	ldrh	r3, [r4, #12]
 8012004:	0719      	lsls	r1, r3, #28
 8012006:	d502      	bpl.n	801200e <_puts_r+0x2e>
 8012008:	6923      	ldr	r3, [r4, #16]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d135      	bne.n	801207a <_puts_r+0x9a>
 801200e:	4621      	mov	r1, r4
 8012010:	4628      	mov	r0, r5
 8012012:	f000 f91d 	bl	8012250 <__swsetup_r>
 8012016:	b380      	cbz	r0, 801207a <_puts_r+0x9a>
 8012018:	f04f 35ff 	mov.w	r5, #4294967295
 801201c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801201e:	07da      	lsls	r2, r3, #31
 8012020:	d405      	bmi.n	801202e <_puts_r+0x4e>
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	059b      	lsls	r3, r3, #22
 8012026:	d402      	bmi.n	801202e <_puts_r+0x4e>
 8012028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801202a:	f000 f9e5 	bl	80123f8 <__retarget_lock_release_recursive>
 801202e:	4628      	mov	r0, r5
 8012030:	bd70      	pop	{r4, r5, r6, pc}
 8012032:	2b00      	cmp	r3, #0
 8012034:	da04      	bge.n	8012040 <_puts_r+0x60>
 8012036:	69a2      	ldr	r2, [r4, #24]
 8012038:	429a      	cmp	r2, r3
 801203a:	dc17      	bgt.n	801206c <_puts_r+0x8c>
 801203c:	290a      	cmp	r1, #10
 801203e:	d015      	beq.n	801206c <_puts_r+0x8c>
 8012040:	6823      	ldr	r3, [r4, #0]
 8012042:	1c5a      	adds	r2, r3, #1
 8012044:	6022      	str	r2, [r4, #0]
 8012046:	7019      	strb	r1, [r3, #0]
 8012048:	68a3      	ldr	r3, [r4, #8]
 801204a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801204e:	3b01      	subs	r3, #1
 8012050:	60a3      	str	r3, [r4, #8]
 8012052:	2900      	cmp	r1, #0
 8012054:	d1ed      	bne.n	8012032 <_puts_r+0x52>
 8012056:	2b00      	cmp	r3, #0
 8012058:	da11      	bge.n	801207e <_puts_r+0x9e>
 801205a:	4622      	mov	r2, r4
 801205c:	210a      	movs	r1, #10
 801205e:	4628      	mov	r0, r5
 8012060:	f000 f8b7 	bl	80121d2 <__swbuf_r>
 8012064:	3001      	adds	r0, #1
 8012066:	d0d7      	beq.n	8012018 <_puts_r+0x38>
 8012068:	250a      	movs	r5, #10
 801206a:	e7d7      	b.n	801201c <_puts_r+0x3c>
 801206c:	4622      	mov	r2, r4
 801206e:	4628      	mov	r0, r5
 8012070:	f000 f8af 	bl	80121d2 <__swbuf_r>
 8012074:	3001      	adds	r0, #1
 8012076:	d1e7      	bne.n	8012048 <_puts_r+0x68>
 8012078:	e7ce      	b.n	8012018 <_puts_r+0x38>
 801207a:	3e01      	subs	r6, #1
 801207c:	e7e4      	b.n	8012048 <_puts_r+0x68>
 801207e:	6823      	ldr	r3, [r4, #0]
 8012080:	1c5a      	adds	r2, r3, #1
 8012082:	6022      	str	r2, [r4, #0]
 8012084:	220a      	movs	r2, #10
 8012086:	701a      	strb	r2, [r3, #0]
 8012088:	e7ee      	b.n	8012068 <_puts_r+0x88>
	...

0801208c <puts>:
 801208c:	4b02      	ldr	r3, [pc, #8]	@ (8012098 <puts+0xc>)
 801208e:	4601      	mov	r1, r0
 8012090:	6818      	ldr	r0, [r3, #0]
 8012092:	f7ff bfa5 	b.w	8011fe0 <_puts_r>
 8012096:	bf00      	nop
 8012098:	24000034 	.word	0x24000034

0801209c <sniprintf>:
 801209c:	b40c      	push	{r2, r3}
 801209e:	b530      	push	{r4, r5, lr}
 80120a0:	4b18      	ldr	r3, [pc, #96]	@ (8012104 <sniprintf+0x68>)
 80120a2:	1e0c      	subs	r4, r1, #0
 80120a4:	681d      	ldr	r5, [r3, #0]
 80120a6:	b09d      	sub	sp, #116	@ 0x74
 80120a8:	da08      	bge.n	80120bc <sniprintf+0x20>
 80120aa:	238b      	movs	r3, #139	@ 0x8b
 80120ac:	602b      	str	r3, [r5, #0]
 80120ae:	f04f 30ff 	mov.w	r0, #4294967295
 80120b2:	b01d      	add	sp, #116	@ 0x74
 80120b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120b8:	b002      	add	sp, #8
 80120ba:	4770      	bx	lr
 80120bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80120c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80120c4:	f04f 0300 	mov.w	r3, #0
 80120c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80120ca:	bf14      	ite	ne
 80120cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80120d0:	4623      	moveq	r3, r4
 80120d2:	9304      	str	r3, [sp, #16]
 80120d4:	9307      	str	r3, [sp, #28]
 80120d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80120da:	9002      	str	r0, [sp, #8]
 80120dc:	9006      	str	r0, [sp, #24]
 80120de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80120e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80120e4:	ab21      	add	r3, sp, #132	@ 0x84
 80120e6:	a902      	add	r1, sp, #8
 80120e8:	4628      	mov	r0, r5
 80120ea:	9301      	str	r3, [sp, #4]
 80120ec:	f002 fbbc 	bl	8014868 <_svfiprintf_r>
 80120f0:	1c43      	adds	r3, r0, #1
 80120f2:	bfbc      	itt	lt
 80120f4:	238b      	movlt	r3, #139	@ 0x8b
 80120f6:	602b      	strlt	r3, [r5, #0]
 80120f8:	2c00      	cmp	r4, #0
 80120fa:	d0da      	beq.n	80120b2 <sniprintf+0x16>
 80120fc:	9b02      	ldr	r3, [sp, #8]
 80120fe:	2200      	movs	r2, #0
 8012100:	701a      	strb	r2, [r3, #0]
 8012102:	e7d6      	b.n	80120b2 <sniprintf+0x16>
 8012104:	24000034 	.word	0x24000034

08012108 <siprintf>:
 8012108:	b40e      	push	{r1, r2, r3}
 801210a:	b510      	push	{r4, lr}
 801210c:	b09d      	sub	sp, #116	@ 0x74
 801210e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012110:	9002      	str	r0, [sp, #8]
 8012112:	9006      	str	r0, [sp, #24]
 8012114:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012118:	480a      	ldr	r0, [pc, #40]	@ (8012144 <siprintf+0x3c>)
 801211a:	9107      	str	r1, [sp, #28]
 801211c:	9104      	str	r1, [sp, #16]
 801211e:	490a      	ldr	r1, [pc, #40]	@ (8012148 <siprintf+0x40>)
 8012120:	f853 2b04 	ldr.w	r2, [r3], #4
 8012124:	9105      	str	r1, [sp, #20]
 8012126:	2400      	movs	r4, #0
 8012128:	a902      	add	r1, sp, #8
 801212a:	6800      	ldr	r0, [r0, #0]
 801212c:	9301      	str	r3, [sp, #4]
 801212e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012130:	f002 fb9a 	bl	8014868 <_svfiprintf_r>
 8012134:	9b02      	ldr	r3, [sp, #8]
 8012136:	701c      	strb	r4, [r3, #0]
 8012138:	b01d      	add	sp, #116	@ 0x74
 801213a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801213e:	b003      	add	sp, #12
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	24000034 	.word	0x24000034
 8012148:	ffff0208 	.word	0xffff0208

0801214c <__sread>:
 801214c:	b510      	push	{r4, lr}
 801214e:	460c      	mov	r4, r1
 8012150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012154:	f000 f900 	bl	8012358 <_read_r>
 8012158:	2800      	cmp	r0, #0
 801215a:	bfab      	itete	ge
 801215c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801215e:	89a3      	ldrhlt	r3, [r4, #12]
 8012160:	181b      	addge	r3, r3, r0
 8012162:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012166:	bfac      	ite	ge
 8012168:	6563      	strge	r3, [r4, #84]	@ 0x54
 801216a:	81a3      	strhlt	r3, [r4, #12]
 801216c:	bd10      	pop	{r4, pc}

0801216e <__swrite>:
 801216e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012172:	461f      	mov	r7, r3
 8012174:	898b      	ldrh	r3, [r1, #12]
 8012176:	05db      	lsls	r3, r3, #23
 8012178:	4605      	mov	r5, r0
 801217a:	460c      	mov	r4, r1
 801217c:	4616      	mov	r6, r2
 801217e:	d505      	bpl.n	801218c <__swrite+0x1e>
 8012180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012184:	2302      	movs	r3, #2
 8012186:	2200      	movs	r2, #0
 8012188:	f000 f8d4 	bl	8012334 <_lseek_r>
 801218c:	89a3      	ldrh	r3, [r4, #12]
 801218e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012196:	81a3      	strh	r3, [r4, #12]
 8012198:	4632      	mov	r2, r6
 801219a:	463b      	mov	r3, r7
 801219c:	4628      	mov	r0, r5
 801219e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121a2:	f000 b8eb 	b.w	801237c <_write_r>

080121a6 <__sseek>:
 80121a6:	b510      	push	{r4, lr}
 80121a8:	460c      	mov	r4, r1
 80121aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121ae:	f000 f8c1 	bl	8012334 <_lseek_r>
 80121b2:	1c43      	adds	r3, r0, #1
 80121b4:	89a3      	ldrh	r3, [r4, #12]
 80121b6:	bf15      	itete	ne
 80121b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80121ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80121be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80121c2:	81a3      	strheq	r3, [r4, #12]
 80121c4:	bf18      	it	ne
 80121c6:	81a3      	strhne	r3, [r4, #12]
 80121c8:	bd10      	pop	{r4, pc}

080121ca <__sclose>:
 80121ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121ce:	f000 b8a1 	b.w	8012314 <_close_r>

080121d2 <__swbuf_r>:
 80121d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d4:	460e      	mov	r6, r1
 80121d6:	4614      	mov	r4, r2
 80121d8:	4605      	mov	r5, r0
 80121da:	b118      	cbz	r0, 80121e4 <__swbuf_r+0x12>
 80121dc:	6a03      	ldr	r3, [r0, #32]
 80121de:	b90b      	cbnz	r3, 80121e4 <__swbuf_r+0x12>
 80121e0:	f7ff feae 	bl	8011f40 <__sinit>
 80121e4:	69a3      	ldr	r3, [r4, #24]
 80121e6:	60a3      	str	r3, [r4, #8]
 80121e8:	89a3      	ldrh	r3, [r4, #12]
 80121ea:	071a      	lsls	r2, r3, #28
 80121ec:	d501      	bpl.n	80121f2 <__swbuf_r+0x20>
 80121ee:	6923      	ldr	r3, [r4, #16]
 80121f0:	b943      	cbnz	r3, 8012204 <__swbuf_r+0x32>
 80121f2:	4621      	mov	r1, r4
 80121f4:	4628      	mov	r0, r5
 80121f6:	f000 f82b 	bl	8012250 <__swsetup_r>
 80121fa:	b118      	cbz	r0, 8012204 <__swbuf_r+0x32>
 80121fc:	f04f 37ff 	mov.w	r7, #4294967295
 8012200:	4638      	mov	r0, r7
 8012202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012204:	6823      	ldr	r3, [r4, #0]
 8012206:	6922      	ldr	r2, [r4, #16]
 8012208:	1a98      	subs	r0, r3, r2
 801220a:	6963      	ldr	r3, [r4, #20]
 801220c:	b2f6      	uxtb	r6, r6
 801220e:	4283      	cmp	r3, r0
 8012210:	4637      	mov	r7, r6
 8012212:	dc05      	bgt.n	8012220 <__swbuf_r+0x4e>
 8012214:	4621      	mov	r1, r4
 8012216:	4628      	mov	r0, r5
 8012218:	f002 fde8 	bl	8014dec <_fflush_r>
 801221c:	2800      	cmp	r0, #0
 801221e:	d1ed      	bne.n	80121fc <__swbuf_r+0x2a>
 8012220:	68a3      	ldr	r3, [r4, #8]
 8012222:	3b01      	subs	r3, #1
 8012224:	60a3      	str	r3, [r4, #8]
 8012226:	6823      	ldr	r3, [r4, #0]
 8012228:	1c5a      	adds	r2, r3, #1
 801222a:	6022      	str	r2, [r4, #0]
 801222c:	701e      	strb	r6, [r3, #0]
 801222e:	6962      	ldr	r2, [r4, #20]
 8012230:	1c43      	adds	r3, r0, #1
 8012232:	429a      	cmp	r2, r3
 8012234:	d004      	beq.n	8012240 <__swbuf_r+0x6e>
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	07db      	lsls	r3, r3, #31
 801223a:	d5e1      	bpl.n	8012200 <__swbuf_r+0x2e>
 801223c:	2e0a      	cmp	r6, #10
 801223e:	d1df      	bne.n	8012200 <__swbuf_r+0x2e>
 8012240:	4621      	mov	r1, r4
 8012242:	4628      	mov	r0, r5
 8012244:	f002 fdd2 	bl	8014dec <_fflush_r>
 8012248:	2800      	cmp	r0, #0
 801224a:	d0d9      	beq.n	8012200 <__swbuf_r+0x2e>
 801224c:	e7d6      	b.n	80121fc <__swbuf_r+0x2a>
	...

08012250 <__swsetup_r>:
 8012250:	b538      	push	{r3, r4, r5, lr}
 8012252:	4b29      	ldr	r3, [pc, #164]	@ (80122f8 <__swsetup_r+0xa8>)
 8012254:	4605      	mov	r5, r0
 8012256:	6818      	ldr	r0, [r3, #0]
 8012258:	460c      	mov	r4, r1
 801225a:	b118      	cbz	r0, 8012264 <__swsetup_r+0x14>
 801225c:	6a03      	ldr	r3, [r0, #32]
 801225e:	b90b      	cbnz	r3, 8012264 <__swsetup_r+0x14>
 8012260:	f7ff fe6e 	bl	8011f40 <__sinit>
 8012264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012268:	0719      	lsls	r1, r3, #28
 801226a:	d422      	bmi.n	80122b2 <__swsetup_r+0x62>
 801226c:	06da      	lsls	r2, r3, #27
 801226e:	d407      	bmi.n	8012280 <__swsetup_r+0x30>
 8012270:	2209      	movs	r2, #9
 8012272:	602a      	str	r2, [r5, #0]
 8012274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012278:	81a3      	strh	r3, [r4, #12]
 801227a:	f04f 30ff 	mov.w	r0, #4294967295
 801227e:	e033      	b.n	80122e8 <__swsetup_r+0x98>
 8012280:	0758      	lsls	r0, r3, #29
 8012282:	d512      	bpl.n	80122aa <__swsetup_r+0x5a>
 8012284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012286:	b141      	cbz	r1, 801229a <__swsetup_r+0x4a>
 8012288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801228c:	4299      	cmp	r1, r3
 801228e:	d002      	beq.n	8012296 <__swsetup_r+0x46>
 8012290:	4628      	mov	r0, r5
 8012292:	f000 feaf 	bl	8012ff4 <_free_r>
 8012296:	2300      	movs	r3, #0
 8012298:	6363      	str	r3, [r4, #52]	@ 0x34
 801229a:	89a3      	ldrh	r3, [r4, #12]
 801229c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80122a0:	81a3      	strh	r3, [r4, #12]
 80122a2:	2300      	movs	r3, #0
 80122a4:	6063      	str	r3, [r4, #4]
 80122a6:	6923      	ldr	r3, [r4, #16]
 80122a8:	6023      	str	r3, [r4, #0]
 80122aa:	89a3      	ldrh	r3, [r4, #12]
 80122ac:	f043 0308 	orr.w	r3, r3, #8
 80122b0:	81a3      	strh	r3, [r4, #12]
 80122b2:	6923      	ldr	r3, [r4, #16]
 80122b4:	b94b      	cbnz	r3, 80122ca <__swsetup_r+0x7a>
 80122b6:	89a3      	ldrh	r3, [r4, #12]
 80122b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80122bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122c0:	d003      	beq.n	80122ca <__swsetup_r+0x7a>
 80122c2:	4621      	mov	r1, r4
 80122c4:	4628      	mov	r0, r5
 80122c6:	f002 fddf 	bl	8014e88 <__smakebuf_r>
 80122ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ce:	f013 0201 	ands.w	r2, r3, #1
 80122d2:	d00a      	beq.n	80122ea <__swsetup_r+0x9a>
 80122d4:	2200      	movs	r2, #0
 80122d6:	60a2      	str	r2, [r4, #8]
 80122d8:	6962      	ldr	r2, [r4, #20]
 80122da:	4252      	negs	r2, r2
 80122dc:	61a2      	str	r2, [r4, #24]
 80122de:	6922      	ldr	r2, [r4, #16]
 80122e0:	b942      	cbnz	r2, 80122f4 <__swsetup_r+0xa4>
 80122e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80122e6:	d1c5      	bne.n	8012274 <__swsetup_r+0x24>
 80122e8:	bd38      	pop	{r3, r4, r5, pc}
 80122ea:	0799      	lsls	r1, r3, #30
 80122ec:	bf58      	it	pl
 80122ee:	6962      	ldrpl	r2, [r4, #20]
 80122f0:	60a2      	str	r2, [r4, #8]
 80122f2:	e7f4      	b.n	80122de <__swsetup_r+0x8e>
 80122f4:	2000      	movs	r0, #0
 80122f6:	e7f7      	b.n	80122e8 <__swsetup_r+0x98>
 80122f8:	24000034 	.word	0x24000034

080122fc <memset>:
 80122fc:	4402      	add	r2, r0
 80122fe:	4603      	mov	r3, r0
 8012300:	4293      	cmp	r3, r2
 8012302:	d100      	bne.n	8012306 <memset+0xa>
 8012304:	4770      	bx	lr
 8012306:	f803 1b01 	strb.w	r1, [r3], #1
 801230a:	e7f9      	b.n	8012300 <memset+0x4>

0801230c <_localeconv_r>:
 801230c:	4800      	ldr	r0, [pc, #0]	@ (8012310 <_localeconv_r+0x4>)
 801230e:	4770      	bx	lr
 8012310:	24000174 	.word	0x24000174

08012314 <_close_r>:
 8012314:	b538      	push	{r3, r4, r5, lr}
 8012316:	4d06      	ldr	r5, [pc, #24]	@ (8012330 <_close_r+0x1c>)
 8012318:	2300      	movs	r3, #0
 801231a:	4604      	mov	r4, r0
 801231c:	4608      	mov	r0, r1
 801231e:	602b      	str	r3, [r5, #0]
 8012320:	f7f1 fdf0 	bl	8003f04 <_close>
 8012324:	1c43      	adds	r3, r0, #1
 8012326:	d102      	bne.n	801232e <_close_r+0x1a>
 8012328:	682b      	ldr	r3, [r5, #0]
 801232a:	b103      	cbz	r3, 801232e <_close_r+0x1a>
 801232c:	6023      	str	r3, [r4, #0]
 801232e:	bd38      	pop	{r3, r4, r5, pc}
 8012330:	24001640 	.word	0x24001640

08012334 <_lseek_r>:
 8012334:	b538      	push	{r3, r4, r5, lr}
 8012336:	4d07      	ldr	r5, [pc, #28]	@ (8012354 <_lseek_r+0x20>)
 8012338:	4604      	mov	r4, r0
 801233a:	4608      	mov	r0, r1
 801233c:	4611      	mov	r1, r2
 801233e:	2200      	movs	r2, #0
 8012340:	602a      	str	r2, [r5, #0]
 8012342:	461a      	mov	r2, r3
 8012344:	f7f1 fe05 	bl	8003f52 <_lseek>
 8012348:	1c43      	adds	r3, r0, #1
 801234a:	d102      	bne.n	8012352 <_lseek_r+0x1e>
 801234c:	682b      	ldr	r3, [r5, #0]
 801234e:	b103      	cbz	r3, 8012352 <_lseek_r+0x1e>
 8012350:	6023      	str	r3, [r4, #0]
 8012352:	bd38      	pop	{r3, r4, r5, pc}
 8012354:	24001640 	.word	0x24001640

08012358 <_read_r>:
 8012358:	b538      	push	{r3, r4, r5, lr}
 801235a:	4d07      	ldr	r5, [pc, #28]	@ (8012378 <_read_r+0x20>)
 801235c:	4604      	mov	r4, r0
 801235e:	4608      	mov	r0, r1
 8012360:	4611      	mov	r1, r2
 8012362:	2200      	movs	r2, #0
 8012364:	602a      	str	r2, [r5, #0]
 8012366:	461a      	mov	r2, r3
 8012368:	f7f1 fdaf 	bl	8003eca <_read>
 801236c:	1c43      	adds	r3, r0, #1
 801236e:	d102      	bne.n	8012376 <_read_r+0x1e>
 8012370:	682b      	ldr	r3, [r5, #0]
 8012372:	b103      	cbz	r3, 8012376 <_read_r+0x1e>
 8012374:	6023      	str	r3, [r4, #0]
 8012376:	bd38      	pop	{r3, r4, r5, pc}
 8012378:	24001640 	.word	0x24001640

0801237c <_write_r>:
 801237c:	b538      	push	{r3, r4, r5, lr}
 801237e:	4d07      	ldr	r5, [pc, #28]	@ (801239c <_write_r+0x20>)
 8012380:	4604      	mov	r4, r0
 8012382:	4608      	mov	r0, r1
 8012384:	4611      	mov	r1, r2
 8012386:	2200      	movs	r2, #0
 8012388:	602a      	str	r2, [r5, #0]
 801238a:	461a      	mov	r2, r3
 801238c:	f7ef f8c4 	bl	8001518 <_write>
 8012390:	1c43      	adds	r3, r0, #1
 8012392:	d102      	bne.n	801239a <_write_r+0x1e>
 8012394:	682b      	ldr	r3, [r5, #0]
 8012396:	b103      	cbz	r3, 801239a <_write_r+0x1e>
 8012398:	6023      	str	r3, [r4, #0]
 801239a:	bd38      	pop	{r3, r4, r5, pc}
 801239c:	24001640 	.word	0x24001640

080123a0 <__errno>:
 80123a0:	4b01      	ldr	r3, [pc, #4]	@ (80123a8 <__errno+0x8>)
 80123a2:	6818      	ldr	r0, [r3, #0]
 80123a4:	4770      	bx	lr
 80123a6:	bf00      	nop
 80123a8:	24000034 	.word	0x24000034

080123ac <__libc_init_array>:
 80123ac:	b570      	push	{r4, r5, r6, lr}
 80123ae:	4d0d      	ldr	r5, [pc, #52]	@ (80123e4 <__libc_init_array+0x38>)
 80123b0:	4c0d      	ldr	r4, [pc, #52]	@ (80123e8 <__libc_init_array+0x3c>)
 80123b2:	1b64      	subs	r4, r4, r5
 80123b4:	10a4      	asrs	r4, r4, #2
 80123b6:	2600      	movs	r6, #0
 80123b8:	42a6      	cmp	r6, r4
 80123ba:	d109      	bne.n	80123d0 <__libc_init_array+0x24>
 80123bc:	4d0b      	ldr	r5, [pc, #44]	@ (80123ec <__libc_init_array+0x40>)
 80123be:	4c0c      	ldr	r4, [pc, #48]	@ (80123f0 <__libc_init_array+0x44>)
 80123c0:	f003 faee 	bl	80159a0 <_init>
 80123c4:	1b64      	subs	r4, r4, r5
 80123c6:	10a4      	asrs	r4, r4, #2
 80123c8:	2600      	movs	r6, #0
 80123ca:	42a6      	cmp	r6, r4
 80123cc:	d105      	bne.n	80123da <__libc_init_array+0x2e>
 80123ce:	bd70      	pop	{r4, r5, r6, pc}
 80123d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80123d4:	4798      	blx	r3
 80123d6:	3601      	adds	r6, #1
 80123d8:	e7ee      	b.n	80123b8 <__libc_init_array+0xc>
 80123da:	f855 3b04 	ldr.w	r3, [r5], #4
 80123de:	4798      	blx	r3
 80123e0:	3601      	adds	r6, #1
 80123e2:	e7f2      	b.n	80123ca <__libc_init_array+0x1e>
 80123e4:	080164a8 	.word	0x080164a8
 80123e8:	080164a8 	.word	0x080164a8
 80123ec:	080164a8 	.word	0x080164a8
 80123f0:	080164ac 	.word	0x080164ac

080123f4 <__retarget_lock_init_recursive>:
 80123f4:	4770      	bx	lr

080123f6 <__retarget_lock_acquire_recursive>:
 80123f6:	4770      	bx	lr

080123f8 <__retarget_lock_release_recursive>:
 80123f8:	4770      	bx	lr

080123fa <memcpy>:
 80123fa:	440a      	add	r2, r1
 80123fc:	4291      	cmp	r1, r2
 80123fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8012402:	d100      	bne.n	8012406 <memcpy+0xc>
 8012404:	4770      	bx	lr
 8012406:	b510      	push	{r4, lr}
 8012408:	f811 4b01 	ldrb.w	r4, [r1], #1
 801240c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012410:	4291      	cmp	r1, r2
 8012412:	d1f9      	bne.n	8012408 <memcpy+0xe>
 8012414:	bd10      	pop	{r4, pc}
	...

08012418 <nanf>:
 8012418:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012420 <nanf+0x8>
 801241c:	4770      	bx	lr
 801241e:	bf00      	nop
 8012420:	7fc00000 	.word	0x7fc00000

08012424 <quorem>:
 8012424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012428:	6903      	ldr	r3, [r0, #16]
 801242a:	690c      	ldr	r4, [r1, #16]
 801242c:	42a3      	cmp	r3, r4
 801242e:	4607      	mov	r7, r0
 8012430:	db7e      	blt.n	8012530 <quorem+0x10c>
 8012432:	3c01      	subs	r4, #1
 8012434:	f101 0814 	add.w	r8, r1, #20
 8012438:	00a3      	lsls	r3, r4, #2
 801243a:	f100 0514 	add.w	r5, r0, #20
 801243e:	9300      	str	r3, [sp, #0]
 8012440:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012444:	9301      	str	r3, [sp, #4]
 8012446:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801244a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801244e:	3301      	adds	r3, #1
 8012450:	429a      	cmp	r2, r3
 8012452:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012456:	fbb2 f6f3 	udiv	r6, r2, r3
 801245a:	d32e      	bcc.n	80124ba <quorem+0x96>
 801245c:	f04f 0a00 	mov.w	sl, #0
 8012460:	46c4      	mov	ip, r8
 8012462:	46ae      	mov	lr, r5
 8012464:	46d3      	mov	fp, sl
 8012466:	f85c 3b04 	ldr.w	r3, [ip], #4
 801246a:	b298      	uxth	r0, r3
 801246c:	fb06 a000 	mla	r0, r6, r0, sl
 8012470:	0c02      	lsrs	r2, r0, #16
 8012472:	0c1b      	lsrs	r3, r3, #16
 8012474:	fb06 2303 	mla	r3, r6, r3, r2
 8012478:	f8de 2000 	ldr.w	r2, [lr]
 801247c:	b280      	uxth	r0, r0
 801247e:	b292      	uxth	r2, r2
 8012480:	1a12      	subs	r2, r2, r0
 8012482:	445a      	add	r2, fp
 8012484:	f8de 0000 	ldr.w	r0, [lr]
 8012488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801248c:	b29b      	uxth	r3, r3
 801248e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012492:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012496:	b292      	uxth	r2, r2
 8012498:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801249c:	45e1      	cmp	r9, ip
 801249e:	f84e 2b04 	str.w	r2, [lr], #4
 80124a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80124a6:	d2de      	bcs.n	8012466 <quorem+0x42>
 80124a8:	9b00      	ldr	r3, [sp, #0]
 80124aa:	58eb      	ldr	r3, [r5, r3]
 80124ac:	b92b      	cbnz	r3, 80124ba <quorem+0x96>
 80124ae:	9b01      	ldr	r3, [sp, #4]
 80124b0:	3b04      	subs	r3, #4
 80124b2:	429d      	cmp	r5, r3
 80124b4:	461a      	mov	r2, r3
 80124b6:	d32f      	bcc.n	8012518 <quorem+0xf4>
 80124b8:	613c      	str	r4, [r7, #16]
 80124ba:	4638      	mov	r0, r7
 80124bc:	f001 f956 	bl	801376c <__mcmp>
 80124c0:	2800      	cmp	r0, #0
 80124c2:	db25      	blt.n	8012510 <quorem+0xec>
 80124c4:	4629      	mov	r1, r5
 80124c6:	2000      	movs	r0, #0
 80124c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80124cc:	f8d1 c000 	ldr.w	ip, [r1]
 80124d0:	fa1f fe82 	uxth.w	lr, r2
 80124d4:	fa1f f38c 	uxth.w	r3, ip
 80124d8:	eba3 030e 	sub.w	r3, r3, lr
 80124dc:	4403      	add	r3, r0
 80124de:	0c12      	lsrs	r2, r2, #16
 80124e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80124e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124ee:	45c1      	cmp	r9, r8
 80124f0:	f841 3b04 	str.w	r3, [r1], #4
 80124f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80124f8:	d2e6      	bcs.n	80124c8 <quorem+0xa4>
 80124fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80124fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012502:	b922      	cbnz	r2, 801250e <quorem+0xea>
 8012504:	3b04      	subs	r3, #4
 8012506:	429d      	cmp	r5, r3
 8012508:	461a      	mov	r2, r3
 801250a:	d30b      	bcc.n	8012524 <quorem+0x100>
 801250c:	613c      	str	r4, [r7, #16]
 801250e:	3601      	adds	r6, #1
 8012510:	4630      	mov	r0, r6
 8012512:	b003      	add	sp, #12
 8012514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012518:	6812      	ldr	r2, [r2, #0]
 801251a:	3b04      	subs	r3, #4
 801251c:	2a00      	cmp	r2, #0
 801251e:	d1cb      	bne.n	80124b8 <quorem+0x94>
 8012520:	3c01      	subs	r4, #1
 8012522:	e7c6      	b.n	80124b2 <quorem+0x8e>
 8012524:	6812      	ldr	r2, [r2, #0]
 8012526:	3b04      	subs	r3, #4
 8012528:	2a00      	cmp	r2, #0
 801252a:	d1ef      	bne.n	801250c <quorem+0xe8>
 801252c:	3c01      	subs	r4, #1
 801252e:	e7ea      	b.n	8012506 <quorem+0xe2>
 8012530:	2000      	movs	r0, #0
 8012532:	e7ee      	b.n	8012512 <quorem+0xee>
 8012534:	0000      	movs	r0, r0
	...

08012538 <_dtoa_r>:
 8012538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801253c:	ed2d 8b02 	vpush	{d8}
 8012540:	69c7      	ldr	r7, [r0, #28]
 8012542:	b091      	sub	sp, #68	@ 0x44
 8012544:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012548:	ec55 4b10 	vmov	r4, r5, d0
 801254c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801254e:	9107      	str	r1, [sp, #28]
 8012550:	4681      	mov	r9, r0
 8012552:	9209      	str	r2, [sp, #36]	@ 0x24
 8012554:	930d      	str	r3, [sp, #52]	@ 0x34
 8012556:	b97f      	cbnz	r7, 8012578 <_dtoa_r+0x40>
 8012558:	2010      	movs	r0, #16
 801255a:	f000 fd95 	bl	8013088 <malloc>
 801255e:	4602      	mov	r2, r0
 8012560:	f8c9 001c 	str.w	r0, [r9, #28]
 8012564:	b920      	cbnz	r0, 8012570 <_dtoa_r+0x38>
 8012566:	4ba0      	ldr	r3, [pc, #640]	@ (80127e8 <_dtoa_r+0x2b0>)
 8012568:	21ef      	movs	r1, #239	@ 0xef
 801256a:	48a0      	ldr	r0, [pc, #640]	@ (80127ec <_dtoa_r+0x2b4>)
 801256c:	f002 fd64 	bl	8015038 <__assert_func>
 8012570:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012574:	6007      	str	r7, [r0, #0]
 8012576:	60c7      	str	r7, [r0, #12]
 8012578:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801257c:	6819      	ldr	r1, [r3, #0]
 801257e:	b159      	cbz	r1, 8012598 <_dtoa_r+0x60>
 8012580:	685a      	ldr	r2, [r3, #4]
 8012582:	604a      	str	r2, [r1, #4]
 8012584:	2301      	movs	r3, #1
 8012586:	4093      	lsls	r3, r2
 8012588:	608b      	str	r3, [r1, #8]
 801258a:	4648      	mov	r0, r9
 801258c:	f000 fe72 	bl	8013274 <_Bfree>
 8012590:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012594:	2200      	movs	r2, #0
 8012596:	601a      	str	r2, [r3, #0]
 8012598:	1e2b      	subs	r3, r5, #0
 801259a:	bfbb      	ittet	lt
 801259c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80125a0:	9303      	strlt	r3, [sp, #12]
 80125a2:	2300      	movge	r3, #0
 80125a4:	2201      	movlt	r2, #1
 80125a6:	bfac      	ite	ge
 80125a8:	6033      	strge	r3, [r6, #0]
 80125aa:	6032      	strlt	r2, [r6, #0]
 80125ac:	4b90      	ldr	r3, [pc, #576]	@ (80127f0 <_dtoa_r+0x2b8>)
 80125ae:	9e03      	ldr	r6, [sp, #12]
 80125b0:	43b3      	bics	r3, r6
 80125b2:	d110      	bne.n	80125d6 <_dtoa_r+0x9e>
 80125b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80125b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80125ba:	6013      	str	r3, [r2, #0]
 80125bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80125c0:	4323      	orrs	r3, r4
 80125c2:	f000 84e6 	beq.w	8012f92 <_dtoa_r+0xa5a>
 80125c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80125c8:	4f8a      	ldr	r7, [pc, #552]	@ (80127f4 <_dtoa_r+0x2bc>)
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	f000 84e8 	beq.w	8012fa0 <_dtoa_r+0xa68>
 80125d0:	1cfb      	adds	r3, r7, #3
 80125d2:	f000 bce3 	b.w	8012f9c <_dtoa_r+0xa64>
 80125d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80125da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80125de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e2:	d10a      	bne.n	80125fa <_dtoa_r+0xc2>
 80125e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80125e6:	2301      	movs	r3, #1
 80125e8:	6013      	str	r3, [r2, #0]
 80125ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80125ec:	b113      	cbz	r3, 80125f4 <_dtoa_r+0xbc>
 80125ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80125f0:	4b81      	ldr	r3, [pc, #516]	@ (80127f8 <_dtoa_r+0x2c0>)
 80125f2:	6013      	str	r3, [r2, #0]
 80125f4:	4f81      	ldr	r7, [pc, #516]	@ (80127fc <_dtoa_r+0x2c4>)
 80125f6:	f000 bcd3 	b.w	8012fa0 <_dtoa_r+0xa68>
 80125fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80125fc:	a90f      	add	r1, sp, #60	@ 0x3c
 80125fe:	4648      	mov	r0, r9
 8012600:	eeb0 0b48 	vmov.f64	d0, d8
 8012604:	f001 f9d2 	bl	80139ac <__d2b>
 8012608:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801260c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801260e:	9001      	str	r0, [sp, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d045      	beq.n	80126a0 <_dtoa_r+0x168>
 8012614:	eeb0 7b48 	vmov.f64	d7, d8
 8012618:	ee18 1a90 	vmov	r1, s17
 801261c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012620:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012624:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012628:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801262c:	2500      	movs	r5, #0
 801262e:	ee07 1a90 	vmov	s15, r1
 8012632:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012636:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80127d0 <_dtoa_r+0x298>
 801263a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801263e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80127d8 <_dtoa_r+0x2a0>
 8012642:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012646:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80127e0 <_dtoa_r+0x2a8>
 801264a:	ee07 3a90 	vmov	s15, r3
 801264e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012652:	eeb0 7b46 	vmov.f64	d7, d6
 8012656:	eea4 7b05 	vfma.f64	d7, d4, d5
 801265a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801265e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012666:	ee16 8a90 	vmov	r8, s13
 801266a:	d508      	bpl.n	801267e <_dtoa_r+0x146>
 801266c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012670:	eeb4 6b47 	vcmp.f64	d6, d7
 8012674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012678:	bf18      	it	ne
 801267a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801267e:	f1b8 0f16 	cmp.w	r8, #22
 8012682:	d82b      	bhi.n	80126dc <_dtoa_r+0x1a4>
 8012684:	495e      	ldr	r1, [pc, #376]	@ (8012800 <_dtoa_r+0x2c8>)
 8012686:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801268a:	ed91 7b00 	vldr	d7, [r1]
 801268e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012696:	d501      	bpl.n	801269c <_dtoa_r+0x164>
 8012698:	f108 38ff 	add.w	r8, r8, #4294967295
 801269c:	2100      	movs	r1, #0
 801269e:	e01e      	b.n	80126de <_dtoa_r+0x1a6>
 80126a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126a2:	4413      	add	r3, r2
 80126a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80126a8:	2920      	cmp	r1, #32
 80126aa:	bfc1      	itttt	gt
 80126ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80126b0:	408e      	lslgt	r6, r1
 80126b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80126b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80126ba:	bfd6      	itet	le
 80126bc:	f1c1 0120 	rsble	r1, r1, #32
 80126c0:	4331      	orrgt	r1, r6
 80126c2:	fa04 f101 	lslle.w	r1, r4, r1
 80126c6:	ee07 1a90 	vmov	s15, r1
 80126ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80126ce:	3b01      	subs	r3, #1
 80126d0:	ee17 1a90 	vmov	r1, s15
 80126d4:	2501      	movs	r5, #1
 80126d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80126da:	e7a8      	b.n	801262e <_dtoa_r+0xf6>
 80126dc:	2101      	movs	r1, #1
 80126de:	1ad2      	subs	r2, r2, r3
 80126e0:	1e53      	subs	r3, r2, #1
 80126e2:	9306      	str	r3, [sp, #24]
 80126e4:	bf45      	ittet	mi
 80126e6:	f1c2 0301 	rsbmi	r3, r2, #1
 80126ea:	9304      	strmi	r3, [sp, #16]
 80126ec:	2300      	movpl	r3, #0
 80126ee:	2300      	movmi	r3, #0
 80126f0:	bf4c      	ite	mi
 80126f2:	9306      	strmi	r3, [sp, #24]
 80126f4:	9304      	strpl	r3, [sp, #16]
 80126f6:	f1b8 0f00 	cmp.w	r8, #0
 80126fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80126fc:	db18      	blt.n	8012730 <_dtoa_r+0x1f8>
 80126fe:	9b06      	ldr	r3, [sp, #24]
 8012700:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012704:	4443      	add	r3, r8
 8012706:	9306      	str	r3, [sp, #24]
 8012708:	2300      	movs	r3, #0
 801270a:	9a07      	ldr	r2, [sp, #28]
 801270c:	2a09      	cmp	r2, #9
 801270e:	d845      	bhi.n	801279c <_dtoa_r+0x264>
 8012710:	2a05      	cmp	r2, #5
 8012712:	bfc4      	itt	gt
 8012714:	3a04      	subgt	r2, #4
 8012716:	9207      	strgt	r2, [sp, #28]
 8012718:	9a07      	ldr	r2, [sp, #28]
 801271a:	f1a2 0202 	sub.w	r2, r2, #2
 801271e:	bfcc      	ite	gt
 8012720:	2400      	movgt	r4, #0
 8012722:	2401      	movle	r4, #1
 8012724:	2a03      	cmp	r2, #3
 8012726:	d844      	bhi.n	80127b2 <_dtoa_r+0x27a>
 8012728:	e8df f002 	tbb	[pc, r2]
 801272c:	0b173634 	.word	0x0b173634
 8012730:	9b04      	ldr	r3, [sp, #16]
 8012732:	2200      	movs	r2, #0
 8012734:	eba3 0308 	sub.w	r3, r3, r8
 8012738:	9304      	str	r3, [sp, #16]
 801273a:	920a      	str	r2, [sp, #40]	@ 0x28
 801273c:	f1c8 0300 	rsb	r3, r8, #0
 8012740:	e7e3      	b.n	801270a <_dtoa_r+0x1d2>
 8012742:	2201      	movs	r2, #1
 8012744:	9208      	str	r2, [sp, #32]
 8012746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012748:	eb08 0b02 	add.w	fp, r8, r2
 801274c:	f10b 0a01 	add.w	sl, fp, #1
 8012750:	4652      	mov	r2, sl
 8012752:	2a01      	cmp	r2, #1
 8012754:	bfb8      	it	lt
 8012756:	2201      	movlt	r2, #1
 8012758:	e006      	b.n	8012768 <_dtoa_r+0x230>
 801275a:	2201      	movs	r2, #1
 801275c:	9208      	str	r2, [sp, #32]
 801275e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012760:	2a00      	cmp	r2, #0
 8012762:	dd29      	ble.n	80127b8 <_dtoa_r+0x280>
 8012764:	4693      	mov	fp, r2
 8012766:	4692      	mov	sl, r2
 8012768:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801276c:	2100      	movs	r1, #0
 801276e:	2004      	movs	r0, #4
 8012770:	f100 0614 	add.w	r6, r0, #20
 8012774:	4296      	cmp	r6, r2
 8012776:	d926      	bls.n	80127c6 <_dtoa_r+0x28e>
 8012778:	6079      	str	r1, [r7, #4]
 801277a:	4648      	mov	r0, r9
 801277c:	9305      	str	r3, [sp, #20]
 801277e:	f000 fd39 	bl	80131f4 <_Balloc>
 8012782:	9b05      	ldr	r3, [sp, #20]
 8012784:	4607      	mov	r7, r0
 8012786:	2800      	cmp	r0, #0
 8012788:	d13e      	bne.n	8012808 <_dtoa_r+0x2d0>
 801278a:	4b1e      	ldr	r3, [pc, #120]	@ (8012804 <_dtoa_r+0x2cc>)
 801278c:	4602      	mov	r2, r0
 801278e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012792:	e6ea      	b.n	801256a <_dtoa_r+0x32>
 8012794:	2200      	movs	r2, #0
 8012796:	e7e1      	b.n	801275c <_dtoa_r+0x224>
 8012798:	2200      	movs	r2, #0
 801279a:	e7d3      	b.n	8012744 <_dtoa_r+0x20c>
 801279c:	2401      	movs	r4, #1
 801279e:	2200      	movs	r2, #0
 80127a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80127a4:	f04f 3bff 	mov.w	fp, #4294967295
 80127a8:	2100      	movs	r1, #0
 80127aa:	46da      	mov	sl, fp
 80127ac:	2212      	movs	r2, #18
 80127ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80127b0:	e7da      	b.n	8012768 <_dtoa_r+0x230>
 80127b2:	2201      	movs	r2, #1
 80127b4:	9208      	str	r2, [sp, #32]
 80127b6:	e7f5      	b.n	80127a4 <_dtoa_r+0x26c>
 80127b8:	f04f 0b01 	mov.w	fp, #1
 80127bc:	46da      	mov	sl, fp
 80127be:	465a      	mov	r2, fp
 80127c0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80127c4:	e7d0      	b.n	8012768 <_dtoa_r+0x230>
 80127c6:	3101      	adds	r1, #1
 80127c8:	0040      	lsls	r0, r0, #1
 80127ca:	e7d1      	b.n	8012770 <_dtoa_r+0x238>
 80127cc:	f3af 8000 	nop.w
 80127d0:	636f4361 	.word	0x636f4361
 80127d4:	3fd287a7 	.word	0x3fd287a7
 80127d8:	8b60c8b3 	.word	0x8b60c8b3
 80127dc:	3fc68a28 	.word	0x3fc68a28
 80127e0:	509f79fb 	.word	0x509f79fb
 80127e4:	3fd34413 	.word	0x3fd34413
 80127e8:	08015f96 	.word	0x08015f96
 80127ec:	08015fad 	.word	0x08015fad
 80127f0:	7ff00000 	.word	0x7ff00000
 80127f4:	08015f92 	.word	0x08015f92
 80127f8:	08015f61 	.word	0x08015f61
 80127fc:	08015f60 	.word	0x08015f60
 8012800:	08016160 	.word	0x08016160
 8012804:	08016005 	.word	0x08016005
 8012808:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801280c:	f1ba 0f0e 	cmp.w	sl, #14
 8012810:	6010      	str	r0, [r2, #0]
 8012812:	d86e      	bhi.n	80128f2 <_dtoa_r+0x3ba>
 8012814:	2c00      	cmp	r4, #0
 8012816:	d06c      	beq.n	80128f2 <_dtoa_r+0x3ba>
 8012818:	f1b8 0f00 	cmp.w	r8, #0
 801281c:	f340 80b4 	ble.w	8012988 <_dtoa_r+0x450>
 8012820:	4ac8      	ldr	r2, [pc, #800]	@ (8012b44 <_dtoa_r+0x60c>)
 8012822:	f008 010f 	and.w	r1, r8, #15
 8012826:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801282a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801282e:	ed92 7b00 	vldr	d7, [r2]
 8012832:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012836:	f000 809b 	beq.w	8012970 <_dtoa_r+0x438>
 801283a:	4ac3      	ldr	r2, [pc, #780]	@ (8012b48 <_dtoa_r+0x610>)
 801283c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012840:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012844:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012848:	f001 010f 	and.w	r1, r1, #15
 801284c:	2203      	movs	r2, #3
 801284e:	48be      	ldr	r0, [pc, #760]	@ (8012b48 <_dtoa_r+0x610>)
 8012850:	2900      	cmp	r1, #0
 8012852:	f040 808f 	bne.w	8012974 <_dtoa_r+0x43c>
 8012856:	ed9d 6b02 	vldr	d6, [sp, #8]
 801285a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801285e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012862:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012864:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012868:	2900      	cmp	r1, #0
 801286a:	f000 80b3 	beq.w	80129d4 <_dtoa_r+0x49c>
 801286e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012872:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801287a:	f140 80ab 	bpl.w	80129d4 <_dtoa_r+0x49c>
 801287e:	f1ba 0f00 	cmp.w	sl, #0
 8012882:	f000 80a7 	beq.w	80129d4 <_dtoa_r+0x49c>
 8012886:	f1bb 0f00 	cmp.w	fp, #0
 801288a:	dd30      	ble.n	80128ee <_dtoa_r+0x3b6>
 801288c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012890:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012894:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012898:	f108 31ff 	add.w	r1, r8, #4294967295
 801289c:	9105      	str	r1, [sp, #20]
 801289e:	3201      	adds	r2, #1
 80128a0:	465c      	mov	r4, fp
 80128a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80128a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80128aa:	ee07 2a90 	vmov	s15, r2
 80128ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80128b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80128b6:	ee15 2a90 	vmov	r2, s11
 80128ba:	ec51 0b15 	vmov	r0, r1, d5
 80128be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80128c2:	2c00      	cmp	r4, #0
 80128c4:	f040 808a 	bne.w	80129dc <_dtoa_r+0x4a4>
 80128c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80128cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80128d0:	ec41 0b17 	vmov	d7, r0, r1
 80128d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128dc:	f300 826a 	bgt.w	8012db4 <_dtoa_r+0x87c>
 80128e0:	eeb1 7b47 	vneg.f64	d7, d7
 80128e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ec:	d423      	bmi.n	8012936 <_dtoa_r+0x3fe>
 80128ee:	ed8d 8b02 	vstr	d8, [sp, #8]
 80128f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80128f4:	2a00      	cmp	r2, #0
 80128f6:	f2c0 8129 	blt.w	8012b4c <_dtoa_r+0x614>
 80128fa:	f1b8 0f0e 	cmp.w	r8, #14
 80128fe:	f300 8125 	bgt.w	8012b4c <_dtoa_r+0x614>
 8012902:	4b90      	ldr	r3, [pc, #576]	@ (8012b44 <_dtoa_r+0x60c>)
 8012904:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012908:	ed93 6b00 	vldr	d6, [r3]
 801290c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801290e:	2b00      	cmp	r3, #0
 8012910:	f280 80c8 	bge.w	8012aa4 <_dtoa_r+0x56c>
 8012914:	f1ba 0f00 	cmp.w	sl, #0
 8012918:	f300 80c4 	bgt.w	8012aa4 <_dtoa_r+0x56c>
 801291c:	d10b      	bne.n	8012936 <_dtoa_r+0x3fe>
 801291e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012922:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012926:	ed9d 7b02 	vldr	d7, [sp, #8]
 801292a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012932:	f2c0 823c 	blt.w	8012dae <_dtoa_r+0x876>
 8012936:	2400      	movs	r4, #0
 8012938:	4625      	mov	r5, r4
 801293a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801293c:	43db      	mvns	r3, r3
 801293e:	9305      	str	r3, [sp, #20]
 8012940:	463e      	mov	r6, r7
 8012942:	f04f 0800 	mov.w	r8, #0
 8012946:	4621      	mov	r1, r4
 8012948:	4648      	mov	r0, r9
 801294a:	f000 fc93 	bl	8013274 <_Bfree>
 801294e:	2d00      	cmp	r5, #0
 8012950:	f000 80a2 	beq.w	8012a98 <_dtoa_r+0x560>
 8012954:	f1b8 0f00 	cmp.w	r8, #0
 8012958:	d005      	beq.n	8012966 <_dtoa_r+0x42e>
 801295a:	45a8      	cmp	r8, r5
 801295c:	d003      	beq.n	8012966 <_dtoa_r+0x42e>
 801295e:	4641      	mov	r1, r8
 8012960:	4648      	mov	r0, r9
 8012962:	f000 fc87 	bl	8013274 <_Bfree>
 8012966:	4629      	mov	r1, r5
 8012968:	4648      	mov	r0, r9
 801296a:	f000 fc83 	bl	8013274 <_Bfree>
 801296e:	e093      	b.n	8012a98 <_dtoa_r+0x560>
 8012970:	2202      	movs	r2, #2
 8012972:	e76c      	b.n	801284e <_dtoa_r+0x316>
 8012974:	07cc      	lsls	r4, r1, #31
 8012976:	d504      	bpl.n	8012982 <_dtoa_r+0x44a>
 8012978:	ed90 6b00 	vldr	d6, [r0]
 801297c:	3201      	adds	r2, #1
 801297e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012982:	1049      	asrs	r1, r1, #1
 8012984:	3008      	adds	r0, #8
 8012986:	e763      	b.n	8012850 <_dtoa_r+0x318>
 8012988:	d022      	beq.n	80129d0 <_dtoa_r+0x498>
 801298a:	f1c8 0100 	rsb	r1, r8, #0
 801298e:	4a6d      	ldr	r2, [pc, #436]	@ (8012b44 <_dtoa_r+0x60c>)
 8012990:	f001 000f 	and.w	r0, r1, #15
 8012994:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012998:	ed92 7b00 	vldr	d7, [r2]
 801299c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80129a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129a4:	4868      	ldr	r0, [pc, #416]	@ (8012b48 <_dtoa_r+0x610>)
 80129a6:	1109      	asrs	r1, r1, #4
 80129a8:	2400      	movs	r4, #0
 80129aa:	2202      	movs	r2, #2
 80129ac:	b929      	cbnz	r1, 80129ba <_dtoa_r+0x482>
 80129ae:	2c00      	cmp	r4, #0
 80129b0:	f43f af57 	beq.w	8012862 <_dtoa_r+0x32a>
 80129b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129b8:	e753      	b.n	8012862 <_dtoa_r+0x32a>
 80129ba:	07ce      	lsls	r6, r1, #31
 80129bc:	d505      	bpl.n	80129ca <_dtoa_r+0x492>
 80129be:	ed90 6b00 	vldr	d6, [r0]
 80129c2:	3201      	adds	r2, #1
 80129c4:	2401      	movs	r4, #1
 80129c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80129ca:	1049      	asrs	r1, r1, #1
 80129cc:	3008      	adds	r0, #8
 80129ce:	e7ed      	b.n	80129ac <_dtoa_r+0x474>
 80129d0:	2202      	movs	r2, #2
 80129d2:	e746      	b.n	8012862 <_dtoa_r+0x32a>
 80129d4:	f8cd 8014 	str.w	r8, [sp, #20]
 80129d8:	4654      	mov	r4, sl
 80129da:	e762      	b.n	80128a2 <_dtoa_r+0x36a>
 80129dc:	4a59      	ldr	r2, [pc, #356]	@ (8012b44 <_dtoa_r+0x60c>)
 80129de:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80129e2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80129e6:	9a08      	ldr	r2, [sp, #32]
 80129e8:	ec41 0b17 	vmov	d7, r0, r1
 80129ec:	443c      	add	r4, r7
 80129ee:	b34a      	cbz	r2, 8012a44 <_dtoa_r+0x50c>
 80129f0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80129f4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80129f8:	463e      	mov	r6, r7
 80129fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80129fe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012a02:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012a06:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012a0a:	ee14 2a90 	vmov	r2, s9
 8012a0e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012a12:	3230      	adds	r2, #48	@ 0x30
 8012a14:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012a18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a20:	f806 2b01 	strb.w	r2, [r6], #1
 8012a24:	d438      	bmi.n	8012a98 <_dtoa_r+0x560>
 8012a26:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012a2a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a32:	d46e      	bmi.n	8012b12 <_dtoa_r+0x5da>
 8012a34:	42a6      	cmp	r6, r4
 8012a36:	f43f af5a 	beq.w	80128ee <_dtoa_r+0x3b6>
 8012a3a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012a3e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012a42:	e7e0      	b.n	8012a06 <_dtoa_r+0x4ce>
 8012a44:	4621      	mov	r1, r4
 8012a46:	463e      	mov	r6, r7
 8012a48:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012a4c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012a50:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012a54:	ee14 2a90 	vmov	r2, s9
 8012a58:	3230      	adds	r2, #48	@ 0x30
 8012a5a:	f806 2b01 	strb.w	r2, [r6], #1
 8012a5e:	42a6      	cmp	r6, r4
 8012a60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012a64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012a68:	d119      	bne.n	8012a9e <_dtoa_r+0x566>
 8012a6a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012a6e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012a72:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a7a:	dc4a      	bgt.n	8012b12 <_dtoa_r+0x5da>
 8012a7c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012a80:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a88:	f57f af31 	bpl.w	80128ee <_dtoa_r+0x3b6>
 8012a8c:	460e      	mov	r6, r1
 8012a8e:	3901      	subs	r1, #1
 8012a90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012a94:	2b30      	cmp	r3, #48	@ 0x30
 8012a96:	d0f9      	beq.n	8012a8c <_dtoa_r+0x554>
 8012a98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012a9c:	e027      	b.n	8012aee <_dtoa_r+0x5b6>
 8012a9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012aa2:	e7d5      	b.n	8012a50 <_dtoa_r+0x518>
 8012aa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012aa8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012aac:	463e      	mov	r6, r7
 8012aae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012ab2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012ab6:	ee15 3a10 	vmov	r3, s10
 8012aba:	3330      	adds	r3, #48	@ 0x30
 8012abc:	f806 3b01 	strb.w	r3, [r6], #1
 8012ac0:	1bf3      	subs	r3, r6, r7
 8012ac2:	459a      	cmp	sl, r3
 8012ac4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012ac8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012acc:	d132      	bne.n	8012b34 <_dtoa_r+0x5fc>
 8012ace:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012ad2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ada:	dc18      	bgt.n	8012b0e <_dtoa_r+0x5d6>
 8012adc:	eeb4 7b46 	vcmp.f64	d7, d6
 8012ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae4:	d103      	bne.n	8012aee <_dtoa_r+0x5b6>
 8012ae6:	ee15 3a10 	vmov	r3, s10
 8012aea:	07db      	lsls	r3, r3, #31
 8012aec:	d40f      	bmi.n	8012b0e <_dtoa_r+0x5d6>
 8012aee:	9901      	ldr	r1, [sp, #4]
 8012af0:	4648      	mov	r0, r9
 8012af2:	f000 fbbf 	bl	8013274 <_Bfree>
 8012af6:	2300      	movs	r3, #0
 8012af8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012afa:	7033      	strb	r3, [r6, #0]
 8012afc:	f108 0301 	add.w	r3, r8, #1
 8012b00:	6013      	str	r3, [r2, #0]
 8012b02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f000 824b 	beq.w	8012fa0 <_dtoa_r+0xa68>
 8012b0a:	601e      	str	r6, [r3, #0]
 8012b0c:	e248      	b.n	8012fa0 <_dtoa_r+0xa68>
 8012b0e:	f8cd 8014 	str.w	r8, [sp, #20]
 8012b12:	4633      	mov	r3, r6
 8012b14:	461e      	mov	r6, r3
 8012b16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b1a:	2a39      	cmp	r2, #57	@ 0x39
 8012b1c:	d106      	bne.n	8012b2c <_dtoa_r+0x5f4>
 8012b1e:	429f      	cmp	r7, r3
 8012b20:	d1f8      	bne.n	8012b14 <_dtoa_r+0x5dc>
 8012b22:	9a05      	ldr	r2, [sp, #20]
 8012b24:	3201      	adds	r2, #1
 8012b26:	9205      	str	r2, [sp, #20]
 8012b28:	2230      	movs	r2, #48	@ 0x30
 8012b2a:	703a      	strb	r2, [r7, #0]
 8012b2c:	781a      	ldrb	r2, [r3, #0]
 8012b2e:	3201      	adds	r2, #1
 8012b30:	701a      	strb	r2, [r3, #0]
 8012b32:	e7b1      	b.n	8012a98 <_dtoa_r+0x560>
 8012b34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b40:	d1b5      	bne.n	8012aae <_dtoa_r+0x576>
 8012b42:	e7d4      	b.n	8012aee <_dtoa_r+0x5b6>
 8012b44:	08016160 	.word	0x08016160
 8012b48:	08016138 	.word	0x08016138
 8012b4c:	9908      	ldr	r1, [sp, #32]
 8012b4e:	2900      	cmp	r1, #0
 8012b50:	f000 80e9 	beq.w	8012d26 <_dtoa_r+0x7ee>
 8012b54:	9907      	ldr	r1, [sp, #28]
 8012b56:	2901      	cmp	r1, #1
 8012b58:	f300 80cb 	bgt.w	8012cf2 <_dtoa_r+0x7ba>
 8012b5c:	2d00      	cmp	r5, #0
 8012b5e:	f000 80c4 	beq.w	8012cea <_dtoa_r+0x7b2>
 8012b62:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012b66:	9e04      	ldr	r6, [sp, #16]
 8012b68:	461c      	mov	r4, r3
 8012b6a:	9305      	str	r3, [sp, #20]
 8012b6c:	9b04      	ldr	r3, [sp, #16]
 8012b6e:	4413      	add	r3, r2
 8012b70:	9304      	str	r3, [sp, #16]
 8012b72:	9b06      	ldr	r3, [sp, #24]
 8012b74:	2101      	movs	r1, #1
 8012b76:	4413      	add	r3, r2
 8012b78:	4648      	mov	r0, r9
 8012b7a:	9306      	str	r3, [sp, #24]
 8012b7c:	f000 fc78 	bl	8013470 <__i2b>
 8012b80:	9b05      	ldr	r3, [sp, #20]
 8012b82:	4605      	mov	r5, r0
 8012b84:	b166      	cbz	r6, 8012ba0 <_dtoa_r+0x668>
 8012b86:	9a06      	ldr	r2, [sp, #24]
 8012b88:	2a00      	cmp	r2, #0
 8012b8a:	dd09      	ble.n	8012ba0 <_dtoa_r+0x668>
 8012b8c:	42b2      	cmp	r2, r6
 8012b8e:	9904      	ldr	r1, [sp, #16]
 8012b90:	bfa8      	it	ge
 8012b92:	4632      	movge	r2, r6
 8012b94:	1a89      	subs	r1, r1, r2
 8012b96:	9104      	str	r1, [sp, #16]
 8012b98:	9906      	ldr	r1, [sp, #24]
 8012b9a:	1ab6      	subs	r6, r6, r2
 8012b9c:	1a8a      	subs	r2, r1, r2
 8012b9e:	9206      	str	r2, [sp, #24]
 8012ba0:	b30b      	cbz	r3, 8012be6 <_dtoa_r+0x6ae>
 8012ba2:	9a08      	ldr	r2, [sp, #32]
 8012ba4:	2a00      	cmp	r2, #0
 8012ba6:	f000 80c5 	beq.w	8012d34 <_dtoa_r+0x7fc>
 8012baa:	2c00      	cmp	r4, #0
 8012bac:	f000 80bf 	beq.w	8012d2e <_dtoa_r+0x7f6>
 8012bb0:	4629      	mov	r1, r5
 8012bb2:	4622      	mov	r2, r4
 8012bb4:	4648      	mov	r0, r9
 8012bb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012bb8:	f000 fd12 	bl	80135e0 <__pow5mult>
 8012bbc:	9a01      	ldr	r2, [sp, #4]
 8012bbe:	4601      	mov	r1, r0
 8012bc0:	4605      	mov	r5, r0
 8012bc2:	4648      	mov	r0, r9
 8012bc4:	f000 fc6a 	bl	801349c <__multiply>
 8012bc8:	9901      	ldr	r1, [sp, #4]
 8012bca:	9005      	str	r0, [sp, #20]
 8012bcc:	4648      	mov	r0, r9
 8012bce:	f000 fb51 	bl	8013274 <_Bfree>
 8012bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012bd4:	1b1b      	subs	r3, r3, r4
 8012bd6:	f000 80b0 	beq.w	8012d3a <_dtoa_r+0x802>
 8012bda:	9905      	ldr	r1, [sp, #20]
 8012bdc:	461a      	mov	r2, r3
 8012bde:	4648      	mov	r0, r9
 8012be0:	f000 fcfe 	bl	80135e0 <__pow5mult>
 8012be4:	9001      	str	r0, [sp, #4]
 8012be6:	2101      	movs	r1, #1
 8012be8:	4648      	mov	r0, r9
 8012bea:	f000 fc41 	bl	8013470 <__i2b>
 8012bee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bf0:	4604      	mov	r4, r0
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f000 81da 	beq.w	8012fac <_dtoa_r+0xa74>
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	4601      	mov	r1, r0
 8012bfc:	4648      	mov	r0, r9
 8012bfe:	f000 fcef 	bl	80135e0 <__pow5mult>
 8012c02:	9b07      	ldr	r3, [sp, #28]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	4604      	mov	r4, r0
 8012c08:	f300 80a0 	bgt.w	8012d4c <_dtoa_r+0x814>
 8012c0c:	9b02      	ldr	r3, [sp, #8]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	f040 8096 	bne.w	8012d40 <_dtoa_r+0x808>
 8012c14:	9b03      	ldr	r3, [sp, #12]
 8012c16:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012c1a:	2a00      	cmp	r2, #0
 8012c1c:	f040 8092 	bne.w	8012d44 <_dtoa_r+0x80c>
 8012c20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012c24:	0d12      	lsrs	r2, r2, #20
 8012c26:	0512      	lsls	r2, r2, #20
 8012c28:	2a00      	cmp	r2, #0
 8012c2a:	f000 808d 	beq.w	8012d48 <_dtoa_r+0x810>
 8012c2e:	9b04      	ldr	r3, [sp, #16]
 8012c30:	3301      	adds	r3, #1
 8012c32:	9304      	str	r3, [sp, #16]
 8012c34:	9b06      	ldr	r3, [sp, #24]
 8012c36:	3301      	adds	r3, #1
 8012c38:	9306      	str	r3, [sp, #24]
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f000 81b9 	beq.w	8012fb8 <_dtoa_r+0xa80>
 8012c46:	6922      	ldr	r2, [r4, #16]
 8012c48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012c4c:	6910      	ldr	r0, [r2, #16]
 8012c4e:	f000 fbc3 	bl	80133d8 <__hi0bits>
 8012c52:	f1c0 0020 	rsb	r0, r0, #32
 8012c56:	9b06      	ldr	r3, [sp, #24]
 8012c58:	4418      	add	r0, r3
 8012c5a:	f010 001f 	ands.w	r0, r0, #31
 8012c5e:	f000 8081 	beq.w	8012d64 <_dtoa_r+0x82c>
 8012c62:	f1c0 0220 	rsb	r2, r0, #32
 8012c66:	2a04      	cmp	r2, #4
 8012c68:	dd73      	ble.n	8012d52 <_dtoa_r+0x81a>
 8012c6a:	9b04      	ldr	r3, [sp, #16]
 8012c6c:	f1c0 001c 	rsb	r0, r0, #28
 8012c70:	4403      	add	r3, r0
 8012c72:	9304      	str	r3, [sp, #16]
 8012c74:	9b06      	ldr	r3, [sp, #24]
 8012c76:	4406      	add	r6, r0
 8012c78:	4403      	add	r3, r0
 8012c7a:	9306      	str	r3, [sp, #24]
 8012c7c:	9b04      	ldr	r3, [sp, #16]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	dd05      	ble.n	8012c8e <_dtoa_r+0x756>
 8012c82:	9901      	ldr	r1, [sp, #4]
 8012c84:	461a      	mov	r2, r3
 8012c86:	4648      	mov	r0, r9
 8012c88:	f000 fd04 	bl	8013694 <__lshift>
 8012c8c:	9001      	str	r0, [sp, #4]
 8012c8e:	9b06      	ldr	r3, [sp, #24]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	dd05      	ble.n	8012ca0 <_dtoa_r+0x768>
 8012c94:	4621      	mov	r1, r4
 8012c96:	461a      	mov	r2, r3
 8012c98:	4648      	mov	r0, r9
 8012c9a:	f000 fcfb 	bl	8013694 <__lshift>
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d060      	beq.n	8012d68 <_dtoa_r+0x830>
 8012ca6:	9801      	ldr	r0, [sp, #4]
 8012ca8:	4621      	mov	r1, r4
 8012caa:	f000 fd5f 	bl	801376c <__mcmp>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	da5a      	bge.n	8012d68 <_dtoa_r+0x830>
 8012cb2:	f108 33ff 	add.w	r3, r8, #4294967295
 8012cb6:	9305      	str	r3, [sp, #20]
 8012cb8:	9901      	ldr	r1, [sp, #4]
 8012cba:	2300      	movs	r3, #0
 8012cbc:	220a      	movs	r2, #10
 8012cbe:	4648      	mov	r0, r9
 8012cc0:	f000 fafa 	bl	80132b8 <__multadd>
 8012cc4:	9b08      	ldr	r3, [sp, #32]
 8012cc6:	9001      	str	r0, [sp, #4]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	f000 8177 	beq.w	8012fbc <_dtoa_r+0xa84>
 8012cce:	4629      	mov	r1, r5
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	220a      	movs	r2, #10
 8012cd4:	4648      	mov	r0, r9
 8012cd6:	f000 faef 	bl	80132b8 <__multadd>
 8012cda:	f1bb 0f00 	cmp.w	fp, #0
 8012cde:	4605      	mov	r5, r0
 8012ce0:	dc6e      	bgt.n	8012dc0 <_dtoa_r+0x888>
 8012ce2:	9b07      	ldr	r3, [sp, #28]
 8012ce4:	2b02      	cmp	r3, #2
 8012ce6:	dc48      	bgt.n	8012d7a <_dtoa_r+0x842>
 8012ce8:	e06a      	b.n	8012dc0 <_dtoa_r+0x888>
 8012cea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012cec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012cf0:	e739      	b.n	8012b66 <_dtoa_r+0x62e>
 8012cf2:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012cf6:	42a3      	cmp	r3, r4
 8012cf8:	db07      	blt.n	8012d0a <_dtoa_r+0x7d2>
 8012cfa:	f1ba 0f00 	cmp.w	sl, #0
 8012cfe:	eba3 0404 	sub.w	r4, r3, r4
 8012d02:	db0b      	blt.n	8012d1c <_dtoa_r+0x7e4>
 8012d04:	9e04      	ldr	r6, [sp, #16]
 8012d06:	4652      	mov	r2, sl
 8012d08:	e72f      	b.n	8012b6a <_dtoa_r+0x632>
 8012d0a:	1ae2      	subs	r2, r4, r3
 8012d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d0e:	9e04      	ldr	r6, [sp, #16]
 8012d10:	4413      	add	r3, r2
 8012d12:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d14:	4652      	mov	r2, sl
 8012d16:	4623      	mov	r3, r4
 8012d18:	2400      	movs	r4, #0
 8012d1a:	e726      	b.n	8012b6a <_dtoa_r+0x632>
 8012d1c:	9a04      	ldr	r2, [sp, #16]
 8012d1e:	eba2 060a 	sub.w	r6, r2, sl
 8012d22:	2200      	movs	r2, #0
 8012d24:	e721      	b.n	8012b6a <_dtoa_r+0x632>
 8012d26:	9e04      	ldr	r6, [sp, #16]
 8012d28:	9d08      	ldr	r5, [sp, #32]
 8012d2a:	461c      	mov	r4, r3
 8012d2c:	e72a      	b.n	8012b84 <_dtoa_r+0x64c>
 8012d2e:	9a01      	ldr	r2, [sp, #4]
 8012d30:	9205      	str	r2, [sp, #20]
 8012d32:	e752      	b.n	8012bda <_dtoa_r+0x6a2>
 8012d34:	9901      	ldr	r1, [sp, #4]
 8012d36:	461a      	mov	r2, r3
 8012d38:	e751      	b.n	8012bde <_dtoa_r+0x6a6>
 8012d3a:	9b05      	ldr	r3, [sp, #20]
 8012d3c:	9301      	str	r3, [sp, #4]
 8012d3e:	e752      	b.n	8012be6 <_dtoa_r+0x6ae>
 8012d40:	2300      	movs	r3, #0
 8012d42:	e77b      	b.n	8012c3c <_dtoa_r+0x704>
 8012d44:	9b02      	ldr	r3, [sp, #8]
 8012d46:	e779      	b.n	8012c3c <_dtoa_r+0x704>
 8012d48:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012d4a:	e778      	b.n	8012c3e <_dtoa_r+0x706>
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d50:	e779      	b.n	8012c46 <_dtoa_r+0x70e>
 8012d52:	d093      	beq.n	8012c7c <_dtoa_r+0x744>
 8012d54:	9b04      	ldr	r3, [sp, #16]
 8012d56:	321c      	adds	r2, #28
 8012d58:	4413      	add	r3, r2
 8012d5a:	9304      	str	r3, [sp, #16]
 8012d5c:	9b06      	ldr	r3, [sp, #24]
 8012d5e:	4416      	add	r6, r2
 8012d60:	4413      	add	r3, r2
 8012d62:	e78a      	b.n	8012c7a <_dtoa_r+0x742>
 8012d64:	4602      	mov	r2, r0
 8012d66:	e7f5      	b.n	8012d54 <_dtoa_r+0x81c>
 8012d68:	f1ba 0f00 	cmp.w	sl, #0
 8012d6c:	f8cd 8014 	str.w	r8, [sp, #20]
 8012d70:	46d3      	mov	fp, sl
 8012d72:	dc21      	bgt.n	8012db8 <_dtoa_r+0x880>
 8012d74:	9b07      	ldr	r3, [sp, #28]
 8012d76:	2b02      	cmp	r3, #2
 8012d78:	dd1e      	ble.n	8012db8 <_dtoa_r+0x880>
 8012d7a:	f1bb 0f00 	cmp.w	fp, #0
 8012d7e:	f47f addc 	bne.w	801293a <_dtoa_r+0x402>
 8012d82:	4621      	mov	r1, r4
 8012d84:	465b      	mov	r3, fp
 8012d86:	2205      	movs	r2, #5
 8012d88:	4648      	mov	r0, r9
 8012d8a:	f000 fa95 	bl	80132b8 <__multadd>
 8012d8e:	4601      	mov	r1, r0
 8012d90:	4604      	mov	r4, r0
 8012d92:	9801      	ldr	r0, [sp, #4]
 8012d94:	f000 fcea 	bl	801376c <__mcmp>
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	f77f adce 	ble.w	801293a <_dtoa_r+0x402>
 8012d9e:	463e      	mov	r6, r7
 8012da0:	2331      	movs	r3, #49	@ 0x31
 8012da2:	f806 3b01 	strb.w	r3, [r6], #1
 8012da6:	9b05      	ldr	r3, [sp, #20]
 8012da8:	3301      	adds	r3, #1
 8012daa:	9305      	str	r3, [sp, #20]
 8012dac:	e5c9      	b.n	8012942 <_dtoa_r+0x40a>
 8012dae:	f8cd 8014 	str.w	r8, [sp, #20]
 8012db2:	4654      	mov	r4, sl
 8012db4:	4625      	mov	r5, r4
 8012db6:	e7f2      	b.n	8012d9e <_dtoa_r+0x866>
 8012db8:	9b08      	ldr	r3, [sp, #32]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f000 8102 	beq.w	8012fc4 <_dtoa_r+0xa8c>
 8012dc0:	2e00      	cmp	r6, #0
 8012dc2:	dd05      	ble.n	8012dd0 <_dtoa_r+0x898>
 8012dc4:	4629      	mov	r1, r5
 8012dc6:	4632      	mov	r2, r6
 8012dc8:	4648      	mov	r0, r9
 8012dca:	f000 fc63 	bl	8013694 <__lshift>
 8012dce:	4605      	mov	r5, r0
 8012dd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d058      	beq.n	8012e88 <_dtoa_r+0x950>
 8012dd6:	6869      	ldr	r1, [r5, #4]
 8012dd8:	4648      	mov	r0, r9
 8012dda:	f000 fa0b 	bl	80131f4 <_Balloc>
 8012dde:	4606      	mov	r6, r0
 8012de0:	b928      	cbnz	r0, 8012dee <_dtoa_r+0x8b6>
 8012de2:	4b82      	ldr	r3, [pc, #520]	@ (8012fec <_dtoa_r+0xab4>)
 8012de4:	4602      	mov	r2, r0
 8012de6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012dea:	f7ff bbbe 	b.w	801256a <_dtoa_r+0x32>
 8012dee:	692a      	ldr	r2, [r5, #16]
 8012df0:	3202      	adds	r2, #2
 8012df2:	0092      	lsls	r2, r2, #2
 8012df4:	f105 010c 	add.w	r1, r5, #12
 8012df8:	300c      	adds	r0, #12
 8012dfa:	f7ff fafe 	bl	80123fa <memcpy>
 8012dfe:	2201      	movs	r2, #1
 8012e00:	4631      	mov	r1, r6
 8012e02:	4648      	mov	r0, r9
 8012e04:	f000 fc46 	bl	8013694 <__lshift>
 8012e08:	1c7b      	adds	r3, r7, #1
 8012e0a:	9304      	str	r3, [sp, #16]
 8012e0c:	eb07 030b 	add.w	r3, r7, fp
 8012e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e12:	9b02      	ldr	r3, [sp, #8]
 8012e14:	f003 0301 	and.w	r3, r3, #1
 8012e18:	46a8      	mov	r8, r5
 8012e1a:	9308      	str	r3, [sp, #32]
 8012e1c:	4605      	mov	r5, r0
 8012e1e:	9b04      	ldr	r3, [sp, #16]
 8012e20:	9801      	ldr	r0, [sp, #4]
 8012e22:	4621      	mov	r1, r4
 8012e24:	f103 3bff 	add.w	fp, r3, #4294967295
 8012e28:	f7ff fafc 	bl	8012424 <quorem>
 8012e2c:	4641      	mov	r1, r8
 8012e2e:	9002      	str	r0, [sp, #8]
 8012e30:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012e34:	9801      	ldr	r0, [sp, #4]
 8012e36:	f000 fc99 	bl	801376c <__mcmp>
 8012e3a:	462a      	mov	r2, r5
 8012e3c:	9006      	str	r0, [sp, #24]
 8012e3e:	4621      	mov	r1, r4
 8012e40:	4648      	mov	r0, r9
 8012e42:	f000 fcaf 	bl	80137a4 <__mdiff>
 8012e46:	68c2      	ldr	r2, [r0, #12]
 8012e48:	4606      	mov	r6, r0
 8012e4a:	b9fa      	cbnz	r2, 8012e8c <_dtoa_r+0x954>
 8012e4c:	4601      	mov	r1, r0
 8012e4e:	9801      	ldr	r0, [sp, #4]
 8012e50:	f000 fc8c 	bl	801376c <__mcmp>
 8012e54:	4602      	mov	r2, r0
 8012e56:	4631      	mov	r1, r6
 8012e58:	4648      	mov	r0, r9
 8012e5a:	920a      	str	r2, [sp, #40]	@ 0x28
 8012e5c:	f000 fa0a 	bl	8013274 <_Bfree>
 8012e60:	9b07      	ldr	r3, [sp, #28]
 8012e62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012e64:	9e04      	ldr	r6, [sp, #16]
 8012e66:	ea42 0103 	orr.w	r1, r2, r3
 8012e6a:	9b08      	ldr	r3, [sp, #32]
 8012e6c:	4319      	orrs	r1, r3
 8012e6e:	d10f      	bne.n	8012e90 <_dtoa_r+0x958>
 8012e70:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012e74:	d028      	beq.n	8012ec8 <_dtoa_r+0x990>
 8012e76:	9b06      	ldr	r3, [sp, #24]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	dd02      	ble.n	8012e82 <_dtoa_r+0x94a>
 8012e7c:	9b02      	ldr	r3, [sp, #8]
 8012e7e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012e82:	f88b a000 	strb.w	sl, [fp]
 8012e86:	e55e      	b.n	8012946 <_dtoa_r+0x40e>
 8012e88:	4628      	mov	r0, r5
 8012e8a:	e7bd      	b.n	8012e08 <_dtoa_r+0x8d0>
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	e7e2      	b.n	8012e56 <_dtoa_r+0x91e>
 8012e90:	9b06      	ldr	r3, [sp, #24]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	db04      	blt.n	8012ea0 <_dtoa_r+0x968>
 8012e96:	9907      	ldr	r1, [sp, #28]
 8012e98:	430b      	orrs	r3, r1
 8012e9a:	9908      	ldr	r1, [sp, #32]
 8012e9c:	430b      	orrs	r3, r1
 8012e9e:	d120      	bne.n	8012ee2 <_dtoa_r+0x9aa>
 8012ea0:	2a00      	cmp	r2, #0
 8012ea2:	ddee      	ble.n	8012e82 <_dtoa_r+0x94a>
 8012ea4:	9901      	ldr	r1, [sp, #4]
 8012ea6:	2201      	movs	r2, #1
 8012ea8:	4648      	mov	r0, r9
 8012eaa:	f000 fbf3 	bl	8013694 <__lshift>
 8012eae:	4621      	mov	r1, r4
 8012eb0:	9001      	str	r0, [sp, #4]
 8012eb2:	f000 fc5b 	bl	801376c <__mcmp>
 8012eb6:	2800      	cmp	r0, #0
 8012eb8:	dc03      	bgt.n	8012ec2 <_dtoa_r+0x98a>
 8012eba:	d1e2      	bne.n	8012e82 <_dtoa_r+0x94a>
 8012ebc:	f01a 0f01 	tst.w	sl, #1
 8012ec0:	d0df      	beq.n	8012e82 <_dtoa_r+0x94a>
 8012ec2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012ec6:	d1d9      	bne.n	8012e7c <_dtoa_r+0x944>
 8012ec8:	2339      	movs	r3, #57	@ 0x39
 8012eca:	f88b 3000 	strb.w	r3, [fp]
 8012ece:	4633      	mov	r3, r6
 8012ed0:	461e      	mov	r6, r3
 8012ed2:	3b01      	subs	r3, #1
 8012ed4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012ed8:	2a39      	cmp	r2, #57	@ 0x39
 8012eda:	d052      	beq.n	8012f82 <_dtoa_r+0xa4a>
 8012edc:	3201      	adds	r2, #1
 8012ede:	701a      	strb	r2, [r3, #0]
 8012ee0:	e531      	b.n	8012946 <_dtoa_r+0x40e>
 8012ee2:	2a00      	cmp	r2, #0
 8012ee4:	dd07      	ble.n	8012ef6 <_dtoa_r+0x9be>
 8012ee6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012eea:	d0ed      	beq.n	8012ec8 <_dtoa_r+0x990>
 8012eec:	f10a 0301 	add.w	r3, sl, #1
 8012ef0:	f88b 3000 	strb.w	r3, [fp]
 8012ef4:	e527      	b.n	8012946 <_dtoa_r+0x40e>
 8012ef6:	9b04      	ldr	r3, [sp, #16]
 8012ef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012efa:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012efe:	4293      	cmp	r3, r2
 8012f00:	d029      	beq.n	8012f56 <_dtoa_r+0xa1e>
 8012f02:	9901      	ldr	r1, [sp, #4]
 8012f04:	2300      	movs	r3, #0
 8012f06:	220a      	movs	r2, #10
 8012f08:	4648      	mov	r0, r9
 8012f0a:	f000 f9d5 	bl	80132b8 <__multadd>
 8012f0e:	45a8      	cmp	r8, r5
 8012f10:	9001      	str	r0, [sp, #4]
 8012f12:	f04f 0300 	mov.w	r3, #0
 8012f16:	f04f 020a 	mov.w	r2, #10
 8012f1a:	4641      	mov	r1, r8
 8012f1c:	4648      	mov	r0, r9
 8012f1e:	d107      	bne.n	8012f30 <_dtoa_r+0x9f8>
 8012f20:	f000 f9ca 	bl	80132b8 <__multadd>
 8012f24:	4680      	mov	r8, r0
 8012f26:	4605      	mov	r5, r0
 8012f28:	9b04      	ldr	r3, [sp, #16]
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	9304      	str	r3, [sp, #16]
 8012f2e:	e776      	b.n	8012e1e <_dtoa_r+0x8e6>
 8012f30:	f000 f9c2 	bl	80132b8 <__multadd>
 8012f34:	4629      	mov	r1, r5
 8012f36:	4680      	mov	r8, r0
 8012f38:	2300      	movs	r3, #0
 8012f3a:	220a      	movs	r2, #10
 8012f3c:	4648      	mov	r0, r9
 8012f3e:	f000 f9bb 	bl	80132b8 <__multadd>
 8012f42:	4605      	mov	r5, r0
 8012f44:	e7f0      	b.n	8012f28 <_dtoa_r+0x9f0>
 8012f46:	f1bb 0f00 	cmp.w	fp, #0
 8012f4a:	bfcc      	ite	gt
 8012f4c:	465e      	movgt	r6, fp
 8012f4e:	2601      	movle	r6, #1
 8012f50:	443e      	add	r6, r7
 8012f52:	f04f 0800 	mov.w	r8, #0
 8012f56:	9901      	ldr	r1, [sp, #4]
 8012f58:	2201      	movs	r2, #1
 8012f5a:	4648      	mov	r0, r9
 8012f5c:	f000 fb9a 	bl	8013694 <__lshift>
 8012f60:	4621      	mov	r1, r4
 8012f62:	9001      	str	r0, [sp, #4]
 8012f64:	f000 fc02 	bl	801376c <__mcmp>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	dcb0      	bgt.n	8012ece <_dtoa_r+0x996>
 8012f6c:	d102      	bne.n	8012f74 <_dtoa_r+0xa3c>
 8012f6e:	f01a 0f01 	tst.w	sl, #1
 8012f72:	d1ac      	bne.n	8012ece <_dtoa_r+0x996>
 8012f74:	4633      	mov	r3, r6
 8012f76:	461e      	mov	r6, r3
 8012f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f7c:	2a30      	cmp	r2, #48	@ 0x30
 8012f7e:	d0fa      	beq.n	8012f76 <_dtoa_r+0xa3e>
 8012f80:	e4e1      	b.n	8012946 <_dtoa_r+0x40e>
 8012f82:	429f      	cmp	r7, r3
 8012f84:	d1a4      	bne.n	8012ed0 <_dtoa_r+0x998>
 8012f86:	9b05      	ldr	r3, [sp, #20]
 8012f88:	3301      	adds	r3, #1
 8012f8a:	9305      	str	r3, [sp, #20]
 8012f8c:	2331      	movs	r3, #49	@ 0x31
 8012f8e:	703b      	strb	r3, [r7, #0]
 8012f90:	e4d9      	b.n	8012946 <_dtoa_r+0x40e>
 8012f92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012f94:	4f16      	ldr	r7, [pc, #88]	@ (8012ff0 <_dtoa_r+0xab8>)
 8012f96:	b11b      	cbz	r3, 8012fa0 <_dtoa_r+0xa68>
 8012f98:	f107 0308 	add.w	r3, r7, #8
 8012f9c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012f9e:	6013      	str	r3, [r2, #0]
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	b011      	add	sp, #68	@ 0x44
 8012fa4:	ecbd 8b02 	vpop	{d8}
 8012fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fac:	9b07      	ldr	r3, [sp, #28]
 8012fae:	2b01      	cmp	r3, #1
 8012fb0:	f77f ae2c 	ble.w	8012c0c <_dtoa_r+0x6d4>
 8012fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fb8:	2001      	movs	r0, #1
 8012fba:	e64c      	b.n	8012c56 <_dtoa_r+0x71e>
 8012fbc:	f1bb 0f00 	cmp.w	fp, #0
 8012fc0:	f77f aed8 	ble.w	8012d74 <_dtoa_r+0x83c>
 8012fc4:	463e      	mov	r6, r7
 8012fc6:	9801      	ldr	r0, [sp, #4]
 8012fc8:	4621      	mov	r1, r4
 8012fca:	f7ff fa2b 	bl	8012424 <quorem>
 8012fce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012fd2:	f806 ab01 	strb.w	sl, [r6], #1
 8012fd6:	1bf2      	subs	r2, r6, r7
 8012fd8:	4593      	cmp	fp, r2
 8012fda:	ddb4      	ble.n	8012f46 <_dtoa_r+0xa0e>
 8012fdc:	9901      	ldr	r1, [sp, #4]
 8012fde:	2300      	movs	r3, #0
 8012fe0:	220a      	movs	r2, #10
 8012fe2:	4648      	mov	r0, r9
 8012fe4:	f000 f968 	bl	80132b8 <__multadd>
 8012fe8:	9001      	str	r0, [sp, #4]
 8012fea:	e7ec      	b.n	8012fc6 <_dtoa_r+0xa8e>
 8012fec:	08016005 	.word	0x08016005
 8012ff0:	08015f89 	.word	0x08015f89

08012ff4 <_free_r>:
 8012ff4:	b538      	push	{r3, r4, r5, lr}
 8012ff6:	4605      	mov	r5, r0
 8012ff8:	2900      	cmp	r1, #0
 8012ffa:	d041      	beq.n	8013080 <_free_r+0x8c>
 8012ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013000:	1f0c      	subs	r4, r1, #4
 8013002:	2b00      	cmp	r3, #0
 8013004:	bfb8      	it	lt
 8013006:	18e4      	addlt	r4, r4, r3
 8013008:	f000 f8e8 	bl	80131dc <__malloc_lock>
 801300c:	4a1d      	ldr	r2, [pc, #116]	@ (8013084 <_free_r+0x90>)
 801300e:	6813      	ldr	r3, [r2, #0]
 8013010:	b933      	cbnz	r3, 8013020 <_free_r+0x2c>
 8013012:	6063      	str	r3, [r4, #4]
 8013014:	6014      	str	r4, [r2, #0]
 8013016:	4628      	mov	r0, r5
 8013018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801301c:	f000 b8e4 	b.w	80131e8 <__malloc_unlock>
 8013020:	42a3      	cmp	r3, r4
 8013022:	d908      	bls.n	8013036 <_free_r+0x42>
 8013024:	6820      	ldr	r0, [r4, #0]
 8013026:	1821      	adds	r1, r4, r0
 8013028:	428b      	cmp	r3, r1
 801302a:	bf01      	itttt	eq
 801302c:	6819      	ldreq	r1, [r3, #0]
 801302e:	685b      	ldreq	r3, [r3, #4]
 8013030:	1809      	addeq	r1, r1, r0
 8013032:	6021      	streq	r1, [r4, #0]
 8013034:	e7ed      	b.n	8013012 <_free_r+0x1e>
 8013036:	461a      	mov	r2, r3
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	b10b      	cbz	r3, 8013040 <_free_r+0x4c>
 801303c:	42a3      	cmp	r3, r4
 801303e:	d9fa      	bls.n	8013036 <_free_r+0x42>
 8013040:	6811      	ldr	r1, [r2, #0]
 8013042:	1850      	adds	r0, r2, r1
 8013044:	42a0      	cmp	r0, r4
 8013046:	d10b      	bne.n	8013060 <_free_r+0x6c>
 8013048:	6820      	ldr	r0, [r4, #0]
 801304a:	4401      	add	r1, r0
 801304c:	1850      	adds	r0, r2, r1
 801304e:	4283      	cmp	r3, r0
 8013050:	6011      	str	r1, [r2, #0]
 8013052:	d1e0      	bne.n	8013016 <_free_r+0x22>
 8013054:	6818      	ldr	r0, [r3, #0]
 8013056:	685b      	ldr	r3, [r3, #4]
 8013058:	6053      	str	r3, [r2, #4]
 801305a:	4408      	add	r0, r1
 801305c:	6010      	str	r0, [r2, #0]
 801305e:	e7da      	b.n	8013016 <_free_r+0x22>
 8013060:	d902      	bls.n	8013068 <_free_r+0x74>
 8013062:	230c      	movs	r3, #12
 8013064:	602b      	str	r3, [r5, #0]
 8013066:	e7d6      	b.n	8013016 <_free_r+0x22>
 8013068:	6820      	ldr	r0, [r4, #0]
 801306a:	1821      	adds	r1, r4, r0
 801306c:	428b      	cmp	r3, r1
 801306e:	bf04      	itt	eq
 8013070:	6819      	ldreq	r1, [r3, #0]
 8013072:	685b      	ldreq	r3, [r3, #4]
 8013074:	6063      	str	r3, [r4, #4]
 8013076:	bf04      	itt	eq
 8013078:	1809      	addeq	r1, r1, r0
 801307a:	6021      	streq	r1, [r4, #0]
 801307c:	6054      	str	r4, [r2, #4]
 801307e:	e7ca      	b.n	8013016 <_free_r+0x22>
 8013080:	bd38      	pop	{r3, r4, r5, pc}
 8013082:	bf00      	nop
 8013084:	2400164c 	.word	0x2400164c

08013088 <malloc>:
 8013088:	4b02      	ldr	r3, [pc, #8]	@ (8013094 <malloc+0xc>)
 801308a:	4601      	mov	r1, r0
 801308c:	6818      	ldr	r0, [r3, #0]
 801308e:	f000 b825 	b.w	80130dc <_malloc_r>
 8013092:	bf00      	nop
 8013094:	24000034 	.word	0x24000034

08013098 <sbrk_aligned>:
 8013098:	b570      	push	{r4, r5, r6, lr}
 801309a:	4e0f      	ldr	r6, [pc, #60]	@ (80130d8 <sbrk_aligned+0x40>)
 801309c:	460c      	mov	r4, r1
 801309e:	6831      	ldr	r1, [r6, #0]
 80130a0:	4605      	mov	r5, r0
 80130a2:	b911      	cbnz	r1, 80130aa <sbrk_aligned+0x12>
 80130a4:	f001 ffae 	bl	8015004 <_sbrk_r>
 80130a8:	6030      	str	r0, [r6, #0]
 80130aa:	4621      	mov	r1, r4
 80130ac:	4628      	mov	r0, r5
 80130ae:	f001 ffa9 	bl	8015004 <_sbrk_r>
 80130b2:	1c43      	adds	r3, r0, #1
 80130b4:	d103      	bne.n	80130be <sbrk_aligned+0x26>
 80130b6:	f04f 34ff 	mov.w	r4, #4294967295
 80130ba:	4620      	mov	r0, r4
 80130bc:	bd70      	pop	{r4, r5, r6, pc}
 80130be:	1cc4      	adds	r4, r0, #3
 80130c0:	f024 0403 	bic.w	r4, r4, #3
 80130c4:	42a0      	cmp	r0, r4
 80130c6:	d0f8      	beq.n	80130ba <sbrk_aligned+0x22>
 80130c8:	1a21      	subs	r1, r4, r0
 80130ca:	4628      	mov	r0, r5
 80130cc:	f001 ff9a 	bl	8015004 <_sbrk_r>
 80130d0:	3001      	adds	r0, #1
 80130d2:	d1f2      	bne.n	80130ba <sbrk_aligned+0x22>
 80130d4:	e7ef      	b.n	80130b6 <sbrk_aligned+0x1e>
 80130d6:	bf00      	nop
 80130d8:	24001648 	.word	0x24001648

080130dc <_malloc_r>:
 80130dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130e0:	1ccd      	adds	r5, r1, #3
 80130e2:	f025 0503 	bic.w	r5, r5, #3
 80130e6:	3508      	adds	r5, #8
 80130e8:	2d0c      	cmp	r5, #12
 80130ea:	bf38      	it	cc
 80130ec:	250c      	movcc	r5, #12
 80130ee:	2d00      	cmp	r5, #0
 80130f0:	4606      	mov	r6, r0
 80130f2:	db01      	blt.n	80130f8 <_malloc_r+0x1c>
 80130f4:	42a9      	cmp	r1, r5
 80130f6:	d904      	bls.n	8013102 <_malloc_r+0x26>
 80130f8:	230c      	movs	r3, #12
 80130fa:	6033      	str	r3, [r6, #0]
 80130fc:	2000      	movs	r0, #0
 80130fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80131d8 <_malloc_r+0xfc>
 8013106:	f000 f869 	bl	80131dc <__malloc_lock>
 801310a:	f8d8 3000 	ldr.w	r3, [r8]
 801310e:	461c      	mov	r4, r3
 8013110:	bb44      	cbnz	r4, 8013164 <_malloc_r+0x88>
 8013112:	4629      	mov	r1, r5
 8013114:	4630      	mov	r0, r6
 8013116:	f7ff ffbf 	bl	8013098 <sbrk_aligned>
 801311a:	1c43      	adds	r3, r0, #1
 801311c:	4604      	mov	r4, r0
 801311e:	d158      	bne.n	80131d2 <_malloc_r+0xf6>
 8013120:	f8d8 4000 	ldr.w	r4, [r8]
 8013124:	4627      	mov	r7, r4
 8013126:	2f00      	cmp	r7, #0
 8013128:	d143      	bne.n	80131b2 <_malloc_r+0xd6>
 801312a:	2c00      	cmp	r4, #0
 801312c:	d04b      	beq.n	80131c6 <_malloc_r+0xea>
 801312e:	6823      	ldr	r3, [r4, #0]
 8013130:	4639      	mov	r1, r7
 8013132:	4630      	mov	r0, r6
 8013134:	eb04 0903 	add.w	r9, r4, r3
 8013138:	f001 ff64 	bl	8015004 <_sbrk_r>
 801313c:	4581      	cmp	r9, r0
 801313e:	d142      	bne.n	80131c6 <_malloc_r+0xea>
 8013140:	6821      	ldr	r1, [r4, #0]
 8013142:	1a6d      	subs	r5, r5, r1
 8013144:	4629      	mov	r1, r5
 8013146:	4630      	mov	r0, r6
 8013148:	f7ff ffa6 	bl	8013098 <sbrk_aligned>
 801314c:	3001      	adds	r0, #1
 801314e:	d03a      	beq.n	80131c6 <_malloc_r+0xea>
 8013150:	6823      	ldr	r3, [r4, #0]
 8013152:	442b      	add	r3, r5
 8013154:	6023      	str	r3, [r4, #0]
 8013156:	f8d8 3000 	ldr.w	r3, [r8]
 801315a:	685a      	ldr	r2, [r3, #4]
 801315c:	bb62      	cbnz	r2, 80131b8 <_malloc_r+0xdc>
 801315e:	f8c8 7000 	str.w	r7, [r8]
 8013162:	e00f      	b.n	8013184 <_malloc_r+0xa8>
 8013164:	6822      	ldr	r2, [r4, #0]
 8013166:	1b52      	subs	r2, r2, r5
 8013168:	d420      	bmi.n	80131ac <_malloc_r+0xd0>
 801316a:	2a0b      	cmp	r2, #11
 801316c:	d917      	bls.n	801319e <_malloc_r+0xc2>
 801316e:	1961      	adds	r1, r4, r5
 8013170:	42a3      	cmp	r3, r4
 8013172:	6025      	str	r5, [r4, #0]
 8013174:	bf18      	it	ne
 8013176:	6059      	strne	r1, [r3, #4]
 8013178:	6863      	ldr	r3, [r4, #4]
 801317a:	bf08      	it	eq
 801317c:	f8c8 1000 	streq.w	r1, [r8]
 8013180:	5162      	str	r2, [r4, r5]
 8013182:	604b      	str	r3, [r1, #4]
 8013184:	4630      	mov	r0, r6
 8013186:	f000 f82f 	bl	80131e8 <__malloc_unlock>
 801318a:	f104 000b 	add.w	r0, r4, #11
 801318e:	1d23      	adds	r3, r4, #4
 8013190:	f020 0007 	bic.w	r0, r0, #7
 8013194:	1ac2      	subs	r2, r0, r3
 8013196:	bf1c      	itt	ne
 8013198:	1a1b      	subne	r3, r3, r0
 801319a:	50a3      	strne	r3, [r4, r2]
 801319c:	e7af      	b.n	80130fe <_malloc_r+0x22>
 801319e:	6862      	ldr	r2, [r4, #4]
 80131a0:	42a3      	cmp	r3, r4
 80131a2:	bf0c      	ite	eq
 80131a4:	f8c8 2000 	streq.w	r2, [r8]
 80131a8:	605a      	strne	r2, [r3, #4]
 80131aa:	e7eb      	b.n	8013184 <_malloc_r+0xa8>
 80131ac:	4623      	mov	r3, r4
 80131ae:	6864      	ldr	r4, [r4, #4]
 80131b0:	e7ae      	b.n	8013110 <_malloc_r+0x34>
 80131b2:	463c      	mov	r4, r7
 80131b4:	687f      	ldr	r7, [r7, #4]
 80131b6:	e7b6      	b.n	8013126 <_malloc_r+0x4a>
 80131b8:	461a      	mov	r2, r3
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	42a3      	cmp	r3, r4
 80131be:	d1fb      	bne.n	80131b8 <_malloc_r+0xdc>
 80131c0:	2300      	movs	r3, #0
 80131c2:	6053      	str	r3, [r2, #4]
 80131c4:	e7de      	b.n	8013184 <_malloc_r+0xa8>
 80131c6:	230c      	movs	r3, #12
 80131c8:	6033      	str	r3, [r6, #0]
 80131ca:	4630      	mov	r0, r6
 80131cc:	f000 f80c 	bl	80131e8 <__malloc_unlock>
 80131d0:	e794      	b.n	80130fc <_malloc_r+0x20>
 80131d2:	6005      	str	r5, [r0, #0]
 80131d4:	e7d6      	b.n	8013184 <_malloc_r+0xa8>
 80131d6:	bf00      	nop
 80131d8:	2400164c 	.word	0x2400164c

080131dc <__malloc_lock>:
 80131dc:	4801      	ldr	r0, [pc, #4]	@ (80131e4 <__malloc_lock+0x8>)
 80131de:	f7ff b90a 	b.w	80123f6 <__retarget_lock_acquire_recursive>
 80131e2:	bf00      	nop
 80131e4:	24001644 	.word	0x24001644

080131e8 <__malloc_unlock>:
 80131e8:	4801      	ldr	r0, [pc, #4]	@ (80131f0 <__malloc_unlock+0x8>)
 80131ea:	f7ff b905 	b.w	80123f8 <__retarget_lock_release_recursive>
 80131ee:	bf00      	nop
 80131f0:	24001644 	.word	0x24001644

080131f4 <_Balloc>:
 80131f4:	b570      	push	{r4, r5, r6, lr}
 80131f6:	69c6      	ldr	r6, [r0, #28]
 80131f8:	4604      	mov	r4, r0
 80131fa:	460d      	mov	r5, r1
 80131fc:	b976      	cbnz	r6, 801321c <_Balloc+0x28>
 80131fe:	2010      	movs	r0, #16
 8013200:	f7ff ff42 	bl	8013088 <malloc>
 8013204:	4602      	mov	r2, r0
 8013206:	61e0      	str	r0, [r4, #28]
 8013208:	b920      	cbnz	r0, 8013214 <_Balloc+0x20>
 801320a:	4b18      	ldr	r3, [pc, #96]	@ (801326c <_Balloc+0x78>)
 801320c:	4818      	ldr	r0, [pc, #96]	@ (8013270 <_Balloc+0x7c>)
 801320e:	216b      	movs	r1, #107	@ 0x6b
 8013210:	f001 ff12 	bl	8015038 <__assert_func>
 8013214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013218:	6006      	str	r6, [r0, #0]
 801321a:	60c6      	str	r6, [r0, #12]
 801321c:	69e6      	ldr	r6, [r4, #28]
 801321e:	68f3      	ldr	r3, [r6, #12]
 8013220:	b183      	cbz	r3, 8013244 <_Balloc+0x50>
 8013222:	69e3      	ldr	r3, [r4, #28]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801322a:	b9b8      	cbnz	r0, 801325c <_Balloc+0x68>
 801322c:	2101      	movs	r1, #1
 801322e:	fa01 f605 	lsl.w	r6, r1, r5
 8013232:	1d72      	adds	r2, r6, #5
 8013234:	0092      	lsls	r2, r2, #2
 8013236:	4620      	mov	r0, r4
 8013238:	f001 ff1c 	bl	8015074 <_calloc_r>
 801323c:	b160      	cbz	r0, 8013258 <_Balloc+0x64>
 801323e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013242:	e00e      	b.n	8013262 <_Balloc+0x6e>
 8013244:	2221      	movs	r2, #33	@ 0x21
 8013246:	2104      	movs	r1, #4
 8013248:	4620      	mov	r0, r4
 801324a:	f001 ff13 	bl	8015074 <_calloc_r>
 801324e:	69e3      	ldr	r3, [r4, #28]
 8013250:	60f0      	str	r0, [r6, #12]
 8013252:	68db      	ldr	r3, [r3, #12]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d1e4      	bne.n	8013222 <_Balloc+0x2e>
 8013258:	2000      	movs	r0, #0
 801325a:	bd70      	pop	{r4, r5, r6, pc}
 801325c:	6802      	ldr	r2, [r0, #0]
 801325e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013262:	2300      	movs	r3, #0
 8013264:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013268:	e7f7      	b.n	801325a <_Balloc+0x66>
 801326a:	bf00      	nop
 801326c:	08015f96 	.word	0x08015f96
 8013270:	08016016 	.word	0x08016016

08013274 <_Bfree>:
 8013274:	b570      	push	{r4, r5, r6, lr}
 8013276:	69c6      	ldr	r6, [r0, #28]
 8013278:	4605      	mov	r5, r0
 801327a:	460c      	mov	r4, r1
 801327c:	b976      	cbnz	r6, 801329c <_Bfree+0x28>
 801327e:	2010      	movs	r0, #16
 8013280:	f7ff ff02 	bl	8013088 <malloc>
 8013284:	4602      	mov	r2, r0
 8013286:	61e8      	str	r0, [r5, #28]
 8013288:	b920      	cbnz	r0, 8013294 <_Bfree+0x20>
 801328a:	4b09      	ldr	r3, [pc, #36]	@ (80132b0 <_Bfree+0x3c>)
 801328c:	4809      	ldr	r0, [pc, #36]	@ (80132b4 <_Bfree+0x40>)
 801328e:	218f      	movs	r1, #143	@ 0x8f
 8013290:	f001 fed2 	bl	8015038 <__assert_func>
 8013294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013298:	6006      	str	r6, [r0, #0]
 801329a:	60c6      	str	r6, [r0, #12]
 801329c:	b13c      	cbz	r4, 80132ae <_Bfree+0x3a>
 801329e:	69eb      	ldr	r3, [r5, #28]
 80132a0:	6862      	ldr	r2, [r4, #4]
 80132a2:	68db      	ldr	r3, [r3, #12]
 80132a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80132a8:	6021      	str	r1, [r4, #0]
 80132aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80132ae:	bd70      	pop	{r4, r5, r6, pc}
 80132b0:	08015f96 	.word	0x08015f96
 80132b4:	08016016 	.word	0x08016016

080132b8 <__multadd>:
 80132b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132bc:	690d      	ldr	r5, [r1, #16]
 80132be:	4607      	mov	r7, r0
 80132c0:	460c      	mov	r4, r1
 80132c2:	461e      	mov	r6, r3
 80132c4:	f101 0c14 	add.w	ip, r1, #20
 80132c8:	2000      	movs	r0, #0
 80132ca:	f8dc 3000 	ldr.w	r3, [ip]
 80132ce:	b299      	uxth	r1, r3
 80132d0:	fb02 6101 	mla	r1, r2, r1, r6
 80132d4:	0c1e      	lsrs	r6, r3, #16
 80132d6:	0c0b      	lsrs	r3, r1, #16
 80132d8:	fb02 3306 	mla	r3, r2, r6, r3
 80132dc:	b289      	uxth	r1, r1
 80132de:	3001      	adds	r0, #1
 80132e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80132e4:	4285      	cmp	r5, r0
 80132e6:	f84c 1b04 	str.w	r1, [ip], #4
 80132ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80132ee:	dcec      	bgt.n	80132ca <__multadd+0x12>
 80132f0:	b30e      	cbz	r6, 8013336 <__multadd+0x7e>
 80132f2:	68a3      	ldr	r3, [r4, #8]
 80132f4:	42ab      	cmp	r3, r5
 80132f6:	dc19      	bgt.n	801332c <__multadd+0x74>
 80132f8:	6861      	ldr	r1, [r4, #4]
 80132fa:	4638      	mov	r0, r7
 80132fc:	3101      	adds	r1, #1
 80132fe:	f7ff ff79 	bl	80131f4 <_Balloc>
 8013302:	4680      	mov	r8, r0
 8013304:	b928      	cbnz	r0, 8013312 <__multadd+0x5a>
 8013306:	4602      	mov	r2, r0
 8013308:	4b0c      	ldr	r3, [pc, #48]	@ (801333c <__multadd+0x84>)
 801330a:	480d      	ldr	r0, [pc, #52]	@ (8013340 <__multadd+0x88>)
 801330c:	21ba      	movs	r1, #186	@ 0xba
 801330e:	f001 fe93 	bl	8015038 <__assert_func>
 8013312:	6922      	ldr	r2, [r4, #16]
 8013314:	3202      	adds	r2, #2
 8013316:	f104 010c 	add.w	r1, r4, #12
 801331a:	0092      	lsls	r2, r2, #2
 801331c:	300c      	adds	r0, #12
 801331e:	f7ff f86c 	bl	80123fa <memcpy>
 8013322:	4621      	mov	r1, r4
 8013324:	4638      	mov	r0, r7
 8013326:	f7ff ffa5 	bl	8013274 <_Bfree>
 801332a:	4644      	mov	r4, r8
 801332c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013330:	3501      	adds	r5, #1
 8013332:	615e      	str	r6, [r3, #20]
 8013334:	6125      	str	r5, [r4, #16]
 8013336:	4620      	mov	r0, r4
 8013338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801333c:	08016005 	.word	0x08016005
 8013340:	08016016 	.word	0x08016016

08013344 <__s2b>:
 8013344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013348:	460c      	mov	r4, r1
 801334a:	4615      	mov	r5, r2
 801334c:	461f      	mov	r7, r3
 801334e:	2209      	movs	r2, #9
 8013350:	3308      	adds	r3, #8
 8013352:	4606      	mov	r6, r0
 8013354:	fb93 f3f2 	sdiv	r3, r3, r2
 8013358:	2100      	movs	r1, #0
 801335a:	2201      	movs	r2, #1
 801335c:	429a      	cmp	r2, r3
 801335e:	db09      	blt.n	8013374 <__s2b+0x30>
 8013360:	4630      	mov	r0, r6
 8013362:	f7ff ff47 	bl	80131f4 <_Balloc>
 8013366:	b940      	cbnz	r0, 801337a <__s2b+0x36>
 8013368:	4602      	mov	r2, r0
 801336a:	4b19      	ldr	r3, [pc, #100]	@ (80133d0 <__s2b+0x8c>)
 801336c:	4819      	ldr	r0, [pc, #100]	@ (80133d4 <__s2b+0x90>)
 801336e:	21d3      	movs	r1, #211	@ 0xd3
 8013370:	f001 fe62 	bl	8015038 <__assert_func>
 8013374:	0052      	lsls	r2, r2, #1
 8013376:	3101      	adds	r1, #1
 8013378:	e7f0      	b.n	801335c <__s2b+0x18>
 801337a:	9b08      	ldr	r3, [sp, #32]
 801337c:	6143      	str	r3, [r0, #20]
 801337e:	2d09      	cmp	r5, #9
 8013380:	f04f 0301 	mov.w	r3, #1
 8013384:	6103      	str	r3, [r0, #16]
 8013386:	dd16      	ble.n	80133b6 <__s2b+0x72>
 8013388:	f104 0909 	add.w	r9, r4, #9
 801338c:	46c8      	mov	r8, r9
 801338e:	442c      	add	r4, r5
 8013390:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013394:	4601      	mov	r1, r0
 8013396:	3b30      	subs	r3, #48	@ 0x30
 8013398:	220a      	movs	r2, #10
 801339a:	4630      	mov	r0, r6
 801339c:	f7ff ff8c 	bl	80132b8 <__multadd>
 80133a0:	45a0      	cmp	r8, r4
 80133a2:	d1f5      	bne.n	8013390 <__s2b+0x4c>
 80133a4:	f1a5 0408 	sub.w	r4, r5, #8
 80133a8:	444c      	add	r4, r9
 80133aa:	1b2d      	subs	r5, r5, r4
 80133ac:	1963      	adds	r3, r4, r5
 80133ae:	42bb      	cmp	r3, r7
 80133b0:	db04      	blt.n	80133bc <__s2b+0x78>
 80133b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133b6:	340a      	adds	r4, #10
 80133b8:	2509      	movs	r5, #9
 80133ba:	e7f6      	b.n	80133aa <__s2b+0x66>
 80133bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80133c0:	4601      	mov	r1, r0
 80133c2:	3b30      	subs	r3, #48	@ 0x30
 80133c4:	220a      	movs	r2, #10
 80133c6:	4630      	mov	r0, r6
 80133c8:	f7ff ff76 	bl	80132b8 <__multadd>
 80133cc:	e7ee      	b.n	80133ac <__s2b+0x68>
 80133ce:	bf00      	nop
 80133d0:	08016005 	.word	0x08016005
 80133d4:	08016016 	.word	0x08016016

080133d8 <__hi0bits>:
 80133d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80133dc:	4603      	mov	r3, r0
 80133de:	bf36      	itet	cc
 80133e0:	0403      	lslcc	r3, r0, #16
 80133e2:	2000      	movcs	r0, #0
 80133e4:	2010      	movcc	r0, #16
 80133e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80133ea:	bf3c      	itt	cc
 80133ec:	021b      	lslcc	r3, r3, #8
 80133ee:	3008      	addcc	r0, #8
 80133f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80133f4:	bf3c      	itt	cc
 80133f6:	011b      	lslcc	r3, r3, #4
 80133f8:	3004      	addcc	r0, #4
 80133fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133fe:	bf3c      	itt	cc
 8013400:	009b      	lslcc	r3, r3, #2
 8013402:	3002      	addcc	r0, #2
 8013404:	2b00      	cmp	r3, #0
 8013406:	db05      	blt.n	8013414 <__hi0bits+0x3c>
 8013408:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801340c:	f100 0001 	add.w	r0, r0, #1
 8013410:	bf08      	it	eq
 8013412:	2020      	moveq	r0, #32
 8013414:	4770      	bx	lr

08013416 <__lo0bits>:
 8013416:	6803      	ldr	r3, [r0, #0]
 8013418:	4602      	mov	r2, r0
 801341a:	f013 0007 	ands.w	r0, r3, #7
 801341e:	d00b      	beq.n	8013438 <__lo0bits+0x22>
 8013420:	07d9      	lsls	r1, r3, #31
 8013422:	d421      	bmi.n	8013468 <__lo0bits+0x52>
 8013424:	0798      	lsls	r0, r3, #30
 8013426:	bf49      	itett	mi
 8013428:	085b      	lsrmi	r3, r3, #1
 801342a:	089b      	lsrpl	r3, r3, #2
 801342c:	2001      	movmi	r0, #1
 801342e:	6013      	strmi	r3, [r2, #0]
 8013430:	bf5c      	itt	pl
 8013432:	6013      	strpl	r3, [r2, #0]
 8013434:	2002      	movpl	r0, #2
 8013436:	4770      	bx	lr
 8013438:	b299      	uxth	r1, r3
 801343a:	b909      	cbnz	r1, 8013440 <__lo0bits+0x2a>
 801343c:	0c1b      	lsrs	r3, r3, #16
 801343e:	2010      	movs	r0, #16
 8013440:	b2d9      	uxtb	r1, r3
 8013442:	b909      	cbnz	r1, 8013448 <__lo0bits+0x32>
 8013444:	3008      	adds	r0, #8
 8013446:	0a1b      	lsrs	r3, r3, #8
 8013448:	0719      	lsls	r1, r3, #28
 801344a:	bf04      	itt	eq
 801344c:	091b      	lsreq	r3, r3, #4
 801344e:	3004      	addeq	r0, #4
 8013450:	0799      	lsls	r1, r3, #30
 8013452:	bf04      	itt	eq
 8013454:	089b      	lsreq	r3, r3, #2
 8013456:	3002      	addeq	r0, #2
 8013458:	07d9      	lsls	r1, r3, #31
 801345a:	d403      	bmi.n	8013464 <__lo0bits+0x4e>
 801345c:	085b      	lsrs	r3, r3, #1
 801345e:	f100 0001 	add.w	r0, r0, #1
 8013462:	d003      	beq.n	801346c <__lo0bits+0x56>
 8013464:	6013      	str	r3, [r2, #0]
 8013466:	4770      	bx	lr
 8013468:	2000      	movs	r0, #0
 801346a:	4770      	bx	lr
 801346c:	2020      	movs	r0, #32
 801346e:	4770      	bx	lr

08013470 <__i2b>:
 8013470:	b510      	push	{r4, lr}
 8013472:	460c      	mov	r4, r1
 8013474:	2101      	movs	r1, #1
 8013476:	f7ff febd 	bl	80131f4 <_Balloc>
 801347a:	4602      	mov	r2, r0
 801347c:	b928      	cbnz	r0, 801348a <__i2b+0x1a>
 801347e:	4b05      	ldr	r3, [pc, #20]	@ (8013494 <__i2b+0x24>)
 8013480:	4805      	ldr	r0, [pc, #20]	@ (8013498 <__i2b+0x28>)
 8013482:	f240 1145 	movw	r1, #325	@ 0x145
 8013486:	f001 fdd7 	bl	8015038 <__assert_func>
 801348a:	2301      	movs	r3, #1
 801348c:	6144      	str	r4, [r0, #20]
 801348e:	6103      	str	r3, [r0, #16]
 8013490:	bd10      	pop	{r4, pc}
 8013492:	bf00      	nop
 8013494:	08016005 	.word	0x08016005
 8013498:	08016016 	.word	0x08016016

0801349c <__multiply>:
 801349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a0:	4617      	mov	r7, r2
 80134a2:	690a      	ldr	r2, [r1, #16]
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	429a      	cmp	r2, r3
 80134a8:	bfa8      	it	ge
 80134aa:	463b      	movge	r3, r7
 80134ac:	4689      	mov	r9, r1
 80134ae:	bfa4      	itt	ge
 80134b0:	460f      	movge	r7, r1
 80134b2:	4699      	movge	r9, r3
 80134b4:	693d      	ldr	r5, [r7, #16]
 80134b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	6879      	ldr	r1, [r7, #4]
 80134be:	eb05 060a 	add.w	r6, r5, sl
 80134c2:	42b3      	cmp	r3, r6
 80134c4:	b085      	sub	sp, #20
 80134c6:	bfb8      	it	lt
 80134c8:	3101      	addlt	r1, #1
 80134ca:	f7ff fe93 	bl	80131f4 <_Balloc>
 80134ce:	b930      	cbnz	r0, 80134de <__multiply+0x42>
 80134d0:	4602      	mov	r2, r0
 80134d2:	4b41      	ldr	r3, [pc, #260]	@ (80135d8 <__multiply+0x13c>)
 80134d4:	4841      	ldr	r0, [pc, #260]	@ (80135dc <__multiply+0x140>)
 80134d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80134da:	f001 fdad 	bl	8015038 <__assert_func>
 80134de:	f100 0414 	add.w	r4, r0, #20
 80134e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80134e6:	4623      	mov	r3, r4
 80134e8:	2200      	movs	r2, #0
 80134ea:	4573      	cmp	r3, lr
 80134ec:	d320      	bcc.n	8013530 <__multiply+0x94>
 80134ee:	f107 0814 	add.w	r8, r7, #20
 80134f2:	f109 0114 	add.w	r1, r9, #20
 80134f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80134fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80134fe:	9302      	str	r3, [sp, #8]
 8013500:	1beb      	subs	r3, r5, r7
 8013502:	3b15      	subs	r3, #21
 8013504:	f023 0303 	bic.w	r3, r3, #3
 8013508:	3304      	adds	r3, #4
 801350a:	3715      	adds	r7, #21
 801350c:	42bd      	cmp	r5, r7
 801350e:	bf38      	it	cc
 8013510:	2304      	movcc	r3, #4
 8013512:	9301      	str	r3, [sp, #4]
 8013514:	9b02      	ldr	r3, [sp, #8]
 8013516:	9103      	str	r1, [sp, #12]
 8013518:	428b      	cmp	r3, r1
 801351a:	d80c      	bhi.n	8013536 <__multiply+0x9a>
 801351c:	2e00      	cmp	r6, #0
 801351e:	dd03      	ble.n	8013528 <__multiply+0x8c>
 8013520:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013524:	2b00      	cmp	r3, #0
 8013526:	d055      	beq.n	80135d4 <__multiply+0x138>
 8013528:	6106      	str	r6, [r0, #16]
 801352a:	b005      	add	sp, #20
 801352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013530:	f843 2b04 	str.w	r2, [r3], #4
 8013534:	e7d9      	b.n	80134ea <__multiply+0x4e>
 8013536:	f8b1 a000 	ldrh.w	sl, [r1]
 801353a:	f1ba 0f00 	cmp.w	sl, #0
 801353e:	d01f      	beq.n	8013580 <__multiply+0xe4>
 8013540:	46c4      	mov	ip, r8
 8013542:	46a1      	mov	r9, r4
 8013544:	2700      	movs	r7, #0
 8013546:	f85c 2b04 	ldr.w	r2, [ip], #4
 801354a:	f8d9 3000 	ldr.w	r3, [r9]
 801354e:	fa1f fb82 	uxth.w	fp, r2
 8013552:	b29b      	uxth	r3, r3
 8013554:	fb0a 330b 	mla	r3, sl, fp, r3
 8013558:	443b      	add	r3, r7
 801355a:	f8d9 7000 	ldr.w	r7, [r9]
 801355e:	0c12      	lsrs	r2, r2, #16
 8013560:	0c3f      	lsrs	r7, r7, #16
 8013562:	fb0a 7202 	mla	r2, sl, r2, r7
 8013566:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801356a:	b29b      	uxth	r3, r3
 801356c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013570:	4565      	cmp	r5, ip
 8013572:	f849 3b04 	str.w	r3, [r9], #4
 8013576:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801357a:	d8e4      	bhi.n	8013546 <__multiply+0xaa>
 801357c:	9b01      	ldr	r3, [sp, #4]
 801357e:	50e7      	str	r7, [r4, r3]
 8013580:	9b03      	ldr	r3, [sp, #12]
 8013582:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013586:	3104      	adds	r1, #4
 8013588:	f1b9 0f00 	cmp.w	r9, #0
 801358c:	d020      	beq.n	80135d0 <__multiply+0x134>
 801358e:	6823      	ldr	r3, [r4, #0]
 8013590:	4647      	mov	r7, r8
 8013592:	46a4      	mov	ip, r4
 8013594:	f04f 0a00 	mov.w	sl, #0
 8013598:	f8b7 b000 	ldrh.w	fp, [r7]
 801359c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80135a0:	fb09 220b 	mla	r2, r9, fp, r2
 80135a4:	4452      	add	r2, sl
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135ac:	f84c 3b04 	str.w	r3, [ip], #4
 80135b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80135b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80135b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80135bc:	fb09 330a 	mla	r3, r9, sl, r3
 80135c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80135c4:	42bd      	cmp	r5, r7
 80135c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80135ca:	d8e5      	bhi.n	8013598 <__multiply+0xfc>
 80135cc:	9a01      	ldr	r2, [sp, #4]
 80135ce:	50a3      	str	r3, [r4, r2]
 80135d0:	3404      	adds	r4, #4
 80135d2:	e79f      	b.n	8013514 <__multiply+0x78>
 80135d4:	3e01      	subs	r6, #1
 80135d6:	e7a1      	b.n	801351c <__multiply+0x80>
 80135d8:	08016005 	.word	0x08016005
 80135dc:	08016016 	.word	0x08016016

080135e0 <__pow5mult>:
 80135e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135e4:	4615      	mov	r5, r2
 80135e6:	f012 0203 	ands.w	r2, r2, #3
 80135ea:	4607      	mov	r7, r0
 80135ec:	460e      	mov	r6, r1
 80135ee:	d007      	beq.n	8013600 <__pow5mult+0x20>
 80135f0:	4c25      	ldr	r4, [pc, #148]	@ (8013688 <__pow5mult+0xa8>)
 80135f2:	3a01      	subs	r2, #1
 80135f4:	2300      	movs	r3, #0
 80135f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80135fa:	f7ff fe5d 	bl	80132b8 <__multadd>
 80135fe:	4606      	mov	r6, r0
 8013600:	10ad      	asrs	r5, r5, #2
 8013602:	d03d      	beq.n	8013680 <__pow5mult+0xa0>
 8013604:	69fc      	ldr	r4, [r7, #28]
 8013606:	b97c      	cbnz	r4, 8013628 <__pow5mult+0x48>
 8013608:	2010      	movs	r0, #16
 801360a:	f7ff fd3d 	bl	8013088 <malloc>
 801360e:	4602      	mov	r2, r0
 8013610:	61f8      	str	r0, [r7, #28]
 8013612:	b928      	cbnz	r0, 8013620 <__pow5mult+0x40>
 8013614:	4b1d      	ldr	r3, [pc, #116]	@ (801368c <__pow5mult+0xac>)
 8013616:	481e      	ldr	r0, [pc, #120]	@ (8013690 <__pow5mult+0xb0>)
 8013618:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801361c:	f001 fd0c 	bl	8015038 <__assert_func>
 8013620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013624:	6004      	str	r4, [r0, #0]
 8013626:	60c4      	str	r4, [r0, #12]
 8013628:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801362c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013630:	b94c      	cbnz	r4, 8013646 <__pow5mult+0x66>
 8013632:	f240 2171 	movw	r1, #625	@ 0x271
 8013636:	4638      	mov	r0, r7
 8013638:	f7ff ff1a 	bl	8013470 <__i2b>
 801363c:	2300      	movs	r3, #0
 801363e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013642:	4604      	mov	r4, r0
 8013644:	6003      	str	r3, [r0, #0]
 8013646:	f04f 0900 	mov.w	r9, #0
 801364a:	07eb      	lsls	r3, r5, #31
 801364c:	d50a      	bpl.n	8013664 <__pow5mult+0x84>
 801364e:	4631      	mov	r1, r6
 8013650:	4622      	mov	r2, r4
 8013652:	4638      	mov	r0, r7
 8013654:	f7ff ff22 	bl	801349c <__multiply>
 8013658:	4631      	mov	r1, r6
 801365a:	4680      	mov	r8, r0
 801365c:	4638      	mov	r0, r7
 801365e:	f7ff fe09 	bl	8013274 <_Bfree>
 8013662:	4646      	mov	r6, r8
 8013664:	106d      	asrs	r5, r5, #1
 8013666:	d00b      	beq.n	8013680 <__pow5mult+0xa0>
 8013668:	6820      	ldr	r0, [r4, #0]
 801366a:	b938      	cbnz	r0, 801367c <__pow5mult+0x9c>
 801366c:	4622      	mov	r2, r4
 801366e:	4621      	mov	r1, r4
 8013670:	4638      	mov	r0, r7
 8013672:	f7ff ff13 	bl	801349c <__multiply>
 8013676:	6020      	str	r0, [r4, #0]
 8013678:	f8c0 9000 	str.w	r9, [r0]
 801367c:	4604      	mov	r4, r0
 801367e:	e7e4      	b.n	801364a <__pow5mult+0x6a>
 8013680:	4630      	mov	r0, r6
 8013682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013686:	bf00      	nop
 8013688:	08016128 	.word	0x08016128
 801368c:	08015f96 	.word	0x08015f96
 8013690:	08016016 	.word	0x08016016

08013694 <__lshift>:
 8013694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013698:	460c      	mov	r4, r1
 801369a:	6849      	ldr	r1, [r1, #4]
 801369c:	6923      	ldr	r3, [r4, #16]
 801369e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80136a2:	68a3      	ldr	r3, [r4, #8]
 80136a4:	4607      	mov	r7, r0
 80136a6:	4691      	mov	r9, r2
 80136a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80136ac:	f108 0601 	add.w	r6, r8, #1
 80136b0:	42b3      	cmp	r3, r6
 80136b2:	db0b      	blt.n	80136cc <__lshift+0x38>
 80136b4:	4638      	mov	r0, r7
 80136b6:	f7ff fd9d 	bl	80131f4 <_Balloc>
 80136ba:	4605      	mov	r5, r0
 80136bc:	b948      	cbnz	r0, 80136d2 <__lshift+0x3e>
 80136be:	4602      	mov	r2, r0
 80136c0:	4b28      	ldr	r3, [pc, #160]	@ (8013764 <__lshift+0xd0>)
 80136c2:	4829      	ldr	r0, [pc, #164]	@ (8013768 <__lshift+0xd4>)
 80136c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80136c8:	f001 fcb6 	bl	8015038 <__assert_func>
 80136cc:	3101      	adds	r1, #1
 80136ce:	005b      	lsls	r3, r3, #1
 80136d0:	e7ee      	b.n	80136b0 <__lshift+0x1c>
 80136d2:	2300      	movs	r3, #0
 80136d4:	f100 0114 	add.w	r1, r0, #20
 80136d8:	f100 0210 	add.w	r2, r0, #16
 80136dc:	4618      	mov	r0, r3
 80136de:	4553      	cmp	r3, sl
 80136e0:	db33      	blt.n	801374a <__lshift+0xb6>
 80136e2:	6920      	ldr	r0, [r4, #16]
 80136e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80136e8:	f104 0314 	add.w	r3, r4, #20
 80136ec:	f019 091f 	ands.w	r9, r9, #31
 80136f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80136f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80136f8:	d02b      	beq.n	8013752 <__lshift+0xbe>
 80136fa:	f1c9 0e20 	rsb	lr, r9, #32
 80136fe:	468a      	mov	sl, r1
 8013700:	2200      	movs	r2, #0
 8013702:	6818      	ldr	r0, [r3, #0]
 8013704:	fa00 f009 	lsl.w	r0, r0, r9
 8013708:	4310      	orrs	r0, r2
 801370a:	f84a 0b04 	str.w	r0, [sl], #4
 801370e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013712:	459c      	cmp	ip, r3
 8013714:	fa22 f20e 	lsr.w	r2, r2, lr
 8013718:	d8f3      	bhi.n	8013702 <__lshift+0x6e>
 801371a:	ebac 0304 	sub.w	r3, ip, r4
 801371e:	3b15      	subs	r3, #21
 8013720:	f023 0303 	bic.w	r3, r3, #3
 8013724:	3304      	adds	r3, #4
 8013726:	f104 0015 	add.w	r0, r4, #21
 801372a:	4560      	cmp	r0, ip
 801372c:	bf88      	it	hi
 801372e:	2304      	movhi	r3, #4
 8013730:	50ca      	str	r2, [r1, r3]
 8013732:	b10a      	cbz	r2, 8013738 <__lshift+0xa4>
 8013734:	f108 0602 	add.w	r6, r8, #2
 8013738:	3e01      	subs	r6, #1
 801373a:	4638      	mov	r0, r7
 801373c:	612e      	str	r6, [r5, #16]
 801373e:	4621      	mov	r1, r4
 8013740:	f7ff fd98 	bl	8013274 <_Bfree>
 8013744:	4628      	mov	r0, r5
 8013746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801374a:	f842 0f04 	str.w	r0, [r2, #4]!
 801374e:	3301      	adds	r3, #1
 8013750:	e7c5      	b.n	80136de <__lshift+0x4a>
 8013752:	3904      	subs	r1, #4
 8013754:	f853 2b04 	ldr.w	r2, [r3], #4
 8013758:	f841 2f04 	str.w	r2, [r1, #4]!
 801375c:	459c      	cmp	ip, r3
 801375e:	d8f9      	bhi.n	8013754 <__lshift+0xc0>
 8013760:	e7ea      	b.n	8013738 <__lshift+0xa4>
 8013762:	bf00      	nop
 8013764:	08016005 	.word	0x08016005
 8013768:	08016016 	.word	0x08016016

0801376c <__mcmp>:
 801376c:	690a      	ldr	r2, [r1, #16]
 801376e:	4603      	mov	r3, r0
 8013770:	6900      	ldr	r0, [r0, #16]
 8013772:	1a80      	subs	r0, r0, r2
 8013774:	b530      	push	{r4, r5, lr}
 8013776:	d10e      	bne.n	8013796 <__mcmp+0x2a>
 8013778:	3314      	adds	r3, #20
 801377a:	3114      	adds	r1, #20
 801377c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013780:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013784:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013788:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801378c:	4295      	cmp	r5, r2
 801378e:	d003      	beq.n	8013798 <__mcmp+0x2c>
 8013790:	d205      	bcs.n	801379e <__mcmp+0x32>
 8013792:	f04f 30ff 	mov.w	r0, #4294967295
 8013796:	bd30      	pop	{r4, r5, pc}
 8013798:	42a3      	cmp	r3, r4
 801379a:	d3f3      	bcc.n	8013784 <__mcmp+0x18>
 801379c:	e7fb      	b.n	8013796 <__mcmp+0x2a>
 801379e:	2001      	movs	r0, #1
 80137a0:	e7f9      	b.n	8013796 <__mcmp+0x2a>
	...

080137a4 <__mdiff>:
 80137a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a8:	4689      	mov	r9, r1
 80137aa:	4606      	mov	r6, r0
 80137ac:	4611      	mov	r1, r2
 80137ae:	4648      	mov	r0, r9
 80137b0:	4614      	mov	r4, r2
 80137b2:	f7ff ffdb 	bl	801376c <__mcmp>
 80137b6:	1e05      	subs	r5, r0, #0
 80137b8:	d112      	bne.n	80137e0 <__mdiff+0x3c>
 80137ba:	4629      	mov	r1, r5
 80137bc:	4630      	mov	r0, r6
 80137be:	f7ff fd19 	bl	80131f4 <_Balloc>
 80137c2:	4602      	mov	r2, r0
 80137c4:	b928      	cbnz	r0, 80137d2 <__mdiff+0x2e>
 80137c6:	4b3f      	ldr	r3, [pc, #252]	@ (80138c4 <__mdiff+0x120>)
 80137c8:	f240 2137 	movw	r1, #567	@ 0x237
 80137cc:	483e      	ldr	r0, [pc, #248]	@ (80138c8 <__mdiff+0x124>)
 80137ce:	f001 fc33 	bl	8015038 <__assert_func>
 80137d2:	2301      	movs	r3, #1
 80137d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80137d8:	4610      	mov	r0, r2
 80137da:	b003      	add	sp, #12
 80137dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e0:	bfbc      	itt	lt
 80137e2:	464b      	movlt	r3, r9
 80137e4:	46a1      	movlt	r9, r4
 80137e6:	4630      	mov	r0, r6
 80137e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80137ec:	bfba      	itte	lt
 80137ee:	461c      	movlt	r4, r3
 80137f0:	2501      	movlt	r5, #1
 80137f2:	2500      	movge	r5, #0
 80137f4:	f7ff fcfe 	bl	80131f4 <_Balloc>
 80137f8:	4602      	mov	r2, r0
 80137fa:	b918      	cbnz	r0, 8013804 <__mdiff+0x60>
 80137fc:	4b31      	ldr	r3, [pc, #196]	@ (80138c4 <__mdiff+0x120>)
 80137fe:	f240 2145 	movw	r1, #581	@ 0x245
 8013802:	e7e3      	b.n	80137cc <__mdiff+0x28>
 8013804:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013808:	6926      	ldr	r6, [r4, #16]
 801380a:	60c5      	str	r5, [r0, #12]
 801380c:	f109 0310 	add.w	r3, r9, #16
 8013810:	f109 0514 	add.w	r5, r9, #20
 8013814:	f104 0e14 	add.w	lr, r4, #20
 8013818:	f100 0b14 	add.w	fp, r0, #20
 801381c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013820:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013824:	9301      	str	r3, [sp, #4]
 8013826:	46d9      	mov	r9, fp
 8013828:	f04f 0c00 	mov.w	ip, #0
 801382c:	9b01      	ldr	r3, [sp, #4]
 801382e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013832:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013836:	9301      	str	r3, [sp, #4]
 8013838:	fa1f f38a 	uxth.w	r3, sl
 801383c:	4619      	mov	r1, r3
 801383e:	b283      	uxth	r3, r0
 8013840:	1acb      	subs	r3, r1, r3
 8013842:	0c00      	lsrs	r0, r0, #16
 8013844:	4463      	add	r3, ip
 8013846:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801384a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801384e:	b29b      	uxth	r3, r3
 8013850:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013854:	4576      	cmp	r6, lr
 8013856:	f849 3b04 	str.w	r3, [r9], #4
 801385a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801385e:	d8e5      	bhi.n	801382c <__mdiff+0x88>
 8013860:	1b33      	subs	r3, r6, r4
 8013862:	3b15      	subs	r3, #21
 8013864:	f023 0303 	bic.w	r3, r3, #3
 8013868:	3415      	adds	r4, #21
 801386a:	3304      	adds	r3, #4
 801386c:	42a6      	cmp	r6, r4
 801386e:	bf38      	it	cc
 8013870:	2304      	movcc	r3, #4
 8013872:	441d      	add	r5, r3
 8013874:	445b      	add	r3, fp
 8013876:	461e      	mov	r6, r3
 8013878:	462c      	mov	r4, r5
 801387a:	4544      	cmp	r4, r8
 801387c:	d30e      	bcc.n	801389c <__mdiff+0xf8>
 801387e:	f108 0103 	add.w	r1, r8, #3
 8013882:	1b49      	subs	r1, r1, r5
 8013884:	f021 0103 	bic.w	r1, r1, #3
 8013888:	3d03      	subs	r5, #3
 801388a:	45a8      	cmp	r8, r5
 801388c:	bf38      	it	cc
 801388e:	2100      	movcc	r1, #0
 8013890:	440b      	add	r3, r1
 8013892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013896:	b191      	cbz	r1, 80138be <__mdiff+0x11a>
 8013898:	6117      	str	r7, [r2, #16]
 801389a:	e79d      	b.n	80137d8 <__mdiff+0x34>
 801389c:	f854 1b04 	ldr.w	r1, [r4], #4
 80138a0:	46e6      	mov	lr, ip
 80138a2:	0c08      	lsrs	r0, r1, #16
 80138a4:	fa1c fc81 	uxtah	ip, ip, r1
 80138a8:	4471      	add	r1, lr
 80138aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80138ae:	b289      	uxth	r1, r1
 80138b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80138b4:	f846 1b04 	str.w	r1, [r6], #4
 80138b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80138bc:	e7dd      	b.n	801387a <__mdiff+0xd6>
 80138be:	3f01      	subs	r7, #1
 80138c0:	e7e7      	b.n	8013892 <__mdiff+0xee>
 80138c2:	bf00      	nop
 80138c4:	08016005 	.word	0x08016005
 80138c8:	08016016 	.word	0x08016016

080138cc <__ulp>:
 80138cc:	b082      	sub	sp, #8
 80138ce:	ed8d 0b00 	vstr	d0, [sp]
 80138d2:	9a01      	ldr	r2, [sp, #4]
 80138d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013914 <__ulp+0x48>)
 80138d6:	4013      	ands	r3, r2
 80138d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80138dc:	2b00      	cmp	r3, #0
 80138de:	dc08      	bgt.n	80138f2 <__ulp+0x26>
 80138e0:	425b      	negs	r3, r3
 80138e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80138e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80138ea:	da04      	bge.n	80138f6 <__ulp+0x2a>
 80138ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80138f0:	4113      	asrs	r3, r2
 80138f2:	2200      	movs	r2, #0
 80138f4:	e008      	b.n	8013908 <__ulp+0x3c>
 80138f6:	f1a2 0314 	sub.w	r3, r2, #20
 80138fa:	2b1e      	cmp	r3, #30
 80138fc:	bfda      	itte	le
 80138fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013902:	40da      	lsrle	r2, r3
 8013904:	2201      	movgt	r2, #1
 8013906:	2300      	movs	r3, #0
 8013908:	4619      	mov	r1, r3
 801390a:	4610      	mov	r0, r2
 801390c:	ec41 0b10 	vmov	d0, r0, r1
 8013910:	b002      	add	sp, #8
 8013912:	4770      	bx	lr
 8013914:	7ff00000 	.word	0x7ff00000

08013918 <__b2d>:
 8013918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801391c:	6906      	ldr	r6, [r0, #16]
 801391e:	f100 0814 	add.w	r8, r0, #20
 8013922:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013926:	1f37      	subs	r7, r6, #4
 8013928:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801392c:	4610      	mov	r0, r2
 801392e:	f7ff fd53 	bl	80133d8 <__hi0bits>
 8013932:	f1c0 0320 	rsb	r3, r0, #32
 8013936:	280a      	cmp	r0, #10
 8013938:	600b      	str	r3, [r1, #0]
 801393a:	491b      	ldr	r1, [pc, #108]	@ (80139a8 <__b2d+0x90>)
 801393c:	dc15      	bgt.n	801396a <__b2d+0x52>
 801393e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013942:	fa22 f30c 	lsr.w	r3, r2, ip
 8013946:	45b8      	cmp	r8, r7
 8013948:	ea43 0501 	orr.w	r5, r3, r1
 801394c:	bf34      	ite	cc
 801394e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013952:	2300      	movcs	r3, #0
 8013954:	3015      	adds	r0, #21
 8013956:	fa02 f000 	lsl.w	r0, r2, r0
 801395a:	fa23 f30c 	lsr.w	r3, r3, ip
 801395e:	4303      	orrs	r3, r0
 8013960:	461c      	mov	r4, r3
 8013962:	ec45 4b10 	vmov	d0, r4, r5
 8013966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801396a:	45b8      	cmp	r8, r7
 801396c:	bf3a      	itte	cc
 801396e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013972:	f1a6 0708 	subcc.w	r7, r6, #8
 8013976:	2300      	movcs	r3, #0
 8013978:	380b      	subs	r0, #11
 801397a:	d012      	beq.n	80139a2 <__b2d+0x8a>
 801397c:	f1c0 0120 	rsb	r1, r0, #32
 8013980:	fa23 f401 	lsr.w	r4, r3, r1
 8013984:	4082      	lsls	r2, r0
 8013986:	4322      	orrs	r2, r4
 8013988:	4547      	cmp	r7, r8
 801398a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801398e:	bf8c      	ite	hi
 8013990:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013994:	2200      	movls	r2, #0
 8013996:	4083      	lsls	r3, r0
 8013998:	40ca      	lsrs	r2, r1
 801399a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801399e:	4313      	orrs	r3, r2
 80139a0:	e7de      	b.n	8013960 <__b2d+0x48>
 80139a2:	ea42 0501 	orr.w	r5, r2, r1
 80139a6:	e7db      	b.n	8013960 <__b2d+0x48>
 80139a8:	3ff00000 	.word	0x3ff00000

080139ac <__d2b>:
 80139ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80139b0:	460f      	mov	r7, r1
 80139b2:	2101      	movs	r1, #1
 80139b4:	ec59 8b10 	vmov	r8, r9, d0
 80139b8:	4616      	mov	r6, r2
 80139ba:	f7ff fc1b 	bl	80131f4 <_Balloc>
 80139be:	4604      	mov	r4, r0
 80139c0:	b930      	cbnz	r0, 80139d0 <__d2b+0x24>
 80139c2:	4602      	mov	r2, r0
 80139c4:	4b23      	ldr	r3, [pc, #140]	@ (8013a54 <__d2b+0xa8>)
 80139c6:	4824      	ldr	r0, [pc, #144]	@ (8013a58 <__d2b+0xac>)
 80139c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80139cc:	f001 fb34 	bl	8015038 <__assert_func>
 80139d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80139d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80139d8:	b10d      	cbz	r5, 80139de <__d2b+0x32>
 80139da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80139de:	9301      	str	r3, [sp, #4]
 80139e0:	f1b8 0300 	subs.w	r3, r8, #0
 80139e4:	d023      	beq.n	8013a2e <__d2b+0x82>
 80139e6:	4668      	mov	r0, sp
 80139e8:	9300      	str	r3, [sp, #0]
 80139ea:	f7ff fd14 	bl	8013416 <__lo0bits>
 80139ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80139f2:	b1d0      	cbz	r0, 8013a2a <__d2b+0x7e>
 80139f4:	f1c0 0320 	rsb	r3, r0, #32
 80139f8:	fa02 f303 	lsl.w	r3, r2, r3
 80139fc:	430b      	orrs	r3, r1
 80139fe:	40c2      	lsrs	r2, r0
 8013a00:	6163      	str	r3, [r4, #20]
 8013a02:	9201      	str	r2, [sp, #4]
 8013a04:	9b01      	ldr	r3, [sp, #4]
 8013a06:	61a3      	str	r3, [r4, #24]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	bf0c      	ite	eq
 8013a0c:	2201      	moveq	r2, #1
 8013a0e:	2202      	movne	r2, #2
 8013a10:	6122      	str	r2, [r4, #16]
 8013a12:	b1a5      	cbz	r5, 8013a3e <__d2b+0x92>
 8013a14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013a18:	4405      	add	r5, r0
 8013a1a:	603d      	str	r5, [r7, #0]
 8013a1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013a20:	6030      	str	r0, [r6, #0]
 8013a22:	4620      	mov	r0, r4
 8013a24:	b003      	add	sp, #12
 8013a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a2a:	6161      	str	r1, [r4, #20]
 8013a2c:	e7ea      	b.n	8013a04 <__d2b+0x58>
 8013a2e:	a801      	add	r0, sp, #4
 8013a30:	f7ff fcf1 	bl	8013416 <__lo0bits>
 8013a34:	9b01      	ldr	r3, [sp, #4]
 8013a36:	6163      	str	r3, [r4, #20]
 8013a38:	3020      	adds	r0, #32
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	e7e8      	b.n	8013a10 <__d2b+0x64>
 8013a3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013a42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013a46:	6038      	str	r0, [r7, #0]
 8013a48:	6918      	ldr	r0, [r3, #16]
 8013a4a:	f7ff fcc5 	bl	80133d8 <__hi0bits>
 8013a4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013a52:	e7e5      	b.n	8013a20 <__d2b+0x74>
 8013a54:	08016005 	.word	0x08016005
 8013a58:	08016016 	.word	0x08016016

08013a5c <__ratio>:
 8013a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a60:	4688      	mov	r8, r1
 8013a62:	4669      	mov	r1, sp
 8013a64:	4681      	mov	r9, r0
 8013a66:	f7ff ff57 	bl	8013918 <__b2d>
 8013a6a:	a901      	add	r1, sp, #4
 8013a6c:	4640      	mov	r0, r8
 8013a6e:	ec55 4b10 	vmov	r4, r5, d0
 8013a72:	f7ff ff51 	bl	8013918 <__b2d>
 8013a76:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013a7a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013a7e:	1ad2      	subs	r2, r2, r3
 8013a80:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013a84:	1a5b      	subs	r3, r3, r1
 8013a86:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8013a8a:	ec57 6b10 	vmov	r6, r7, d0
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	bfd6      	itet	le
 8013a92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013a96:	462a      	movgt	r2, r5
 8013a98:	463a      	movle	r2, r7
 8013a9a:	46ab      	mov	fp, r5
 8013a9c:	46a2      	mov	sl, r4
 8013a9e:	bfce      	itee	gt
 8013aa0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013aa4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8013aa8:	ee00 3a90 	vmovle	s1, r3
 8013aac:	ec4b ab17 	vmov	d7, sl, fp
 8013ab0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013ab4:	b003      	add	sp, #12
 8013ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013aba <__copybits>:
 8013aba:	3901      	subs	r1, #1
 8013abc:	b570      	push	{r4, r5, r6, lr}
 8013abe:	1149      	asrs	r1, r1, #5
 8013ac0:	6914      	ldr	r4, [r2, #16]
 8013ac2:	3101      	adds	r1, #1
 8013ac4:	f102 0314 	add.w	r3, r2, #20
 8013ac8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013acc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013ad0:	1f05      	subs	r5, r0, #4
 8013ad2:	42a3      	cmp	r3, r4
 8013ad4:	d30c      	bcc.n	8013af0 <__copybits+0x36>
 8013ad6:	1aa3      	subs	r3, r4, r2
 8013ad8:	3b11      	subs	r3, #17
 8013ada:	f023 0303 	bic.w	r3, r3, #3
 8013ade:	3211      	adds	r2, #17
 8013ae0:	42a2      	cmp	r2, r4
 8013ae2:	bf88      	it	hi
 8013ae4:	2300      	movhi	r3, #0
 8013ae6:	4418      	add	r0, r3
 8013ae8:	2300      	movs	r3, #0
 8013aea:	4288      	cmp	r0, r1
 8013aec:	d305      	bcc.n	8013afa <__copybits+0x40>
 8013aee:	bd70      	pop	{r4, r5, r6, pc}
 8013af0:	f853 6b04 	ldr.w	r6, [r3], #4
 8013af4:	f845 6f04 	str.w	r6, [r5, #4]!
 8013af8:	e7eb      	b.n	8013ad2 <__copybits+0x18>
 8013afa:	f840 3b04 	str.w	r3, [r0], #4
 8013afe:	e7f4      	b.n	8013aea <__copybits+0x30>

08013b00 <__any_on>:
 8013b00:	f100 0214 	add.w	r2, r0, #20
 8013b04:	6900      	ldr	r0, [r0, #16]
 8013b06:	114b      	asrs	r3, r1, #5
 8013b08:	4298      	cmp	r0, r3
 8013b0a:	b510      	push	{r4, lr}
 8013b0c:	db11      	blt.n	8013b32 <__any_on+0x32>
 8013b0e:	dd0a      	ble.n	8013b26 <__any_on+0x26>
 8013b10:	f011 011f 	ands.w	r1, r1, #31
 8013b14:	d007      	beq.n	8013b26 <__any_on+0x26>
 8013b16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013b1a:	fa24 f001 	lsr.w	r0, r4, r1
 8013b1e:	fa00 f101 	lsl.w	r1, r0, r1
 8013b22:	428c      	cmp	r4, r1
 8013b24:	d10b      	bne.n	8013b3e <__any_on+0x3e>
 8013b26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d803      	bhi.n	8013b36 <__any_on+0x36>
 8013b2e:	2000      	movs	r0, #0
 8013b30:	bd10      	pop	{r4, pc}
 8013b32:	4603      	mov	r3, r0
 8013b34:	e7f7      	b.n	8013b26 <__any_on+0x26>
 8013b36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013b3a:	2900      	cmp	r1, #0
 8013b3c:	d0f5      	beq.n	8013b2a <__any_on+0x2a>
 8013b3e:	2001      	movs	r0, #1
 8013b40:	e7f6      	b.n	8013b30 <__any_on+0x30>

08013b42 <sulp>:
 8013b42:	b570      	push	{r4, r5, r6, lr}
 8013b44:	4604      	mov	r4, r0
 8013b46:	460d      	mov	r5, r1
 8013b48:	4616      	mov	r6, r2
 8013b4a:	ec45 4b10 	vmov	d0, r4, r5
 8013b4e:	f7ff febd 	bl	80138cc <__ulp>
 8013b52:	b17e      	cbz	r6, 8013b74 <sulp+0x32>
 8013b54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013b58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	dd09      	ble.n	8013b74 <sulp+0x32>
 8013b60:	051b      	lsls	r3, r3, #20
 8013b62:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8013b66:	2000      	movs	r0, #0
 8013b68:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8013b6c:	ec41 0b17 	vmov	d7, r0, r1
 8013b70:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08013b78 <_strtod_l>:
 8013b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b7c:	ed2d 8b0a 	vpush	{d8-d12}
 8013b80:	b097      	sub	sp, #92	@ 0x5c
 8013b82:	4688      	mov	r8, r1
 8013b84:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b86:	2200      	movs	r2, #0
 8013b88:	9212      	str	r2, [sp, #72]	@ 0x48
 8013b8a:	9005      	str	r0, [sp, #20]
 8013b8c:	f04f 0a00 	mov.w	sl, #0
 8013b90:	f04f 0b00 	mov.w	fp, #0
 8013b94:	460a      	mov	r2, r1
 8013b96:	9211      	str	r2, [sp, #68]	@ 0x44
 8013b98:	7811      	ldrb	r1, [r2, #0]
 8013b9a:	292b      	cmp	r1, #43	@ 0x2b
 8013b9c:	d04c      	beq.n	8013c38 <_strtod_l+0xc0>
 8013b9e:	d839      	bhi.n	8013c14 <_strtod_l+0x9c>
 8013ba0:	290d      	cmp	r1, #13
 8013ba2:	d833      	bhi.n	8013c0c <_strtod_l+0x94>
 8013ba4:	2908      	cmp	r1, #8
 8013ba6:	d833      	bhi.n	8013c10 <_strtod_l+0x98>
 8013ba8:	2900      	cmp	r1, #0
 8013baa:	d03c      	beq.n	8013c26 <_strtod_l+0xae>
 8013bac:	2200      	movs	r2, #0
 8013bae:	9208      	str	r2, [sp, #32]
 8013bb0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013bb2:	782a      	ldrb	r2, [r5, #0]
 8013bb4:	2a30      	cmp	r2, #48	@ 0x30
 8013bb6:	f040 80b7 	bne.w	8013d28 <_strtod_l+0x1b0>
 8013bba:	786a      	ldrb	r2, [r5, #1]
 8013bbc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013bc0:	2a58      	cmp	r2, #88	@ 0x58
 8013bc2:	d170      	bne.n	8013ca6 <_strtod_l+0x12e>
 8013bc4:	9302      	str	r3, [sp, #8]
 8013bc6:	9b08      	ldr	r3, [sp, #32]
 8013bc8:	9301      	str	r3, [sp, #4]
 8013bca:	ab12      	add	r3, sp, #72	@ 0x48
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	4a90      	ldr	r2, [pc, #576]	@ (8013e10 <_strtod_l+0x298>)
 8013bd0:	9805      	ldr	r0, [sp, #20]
 8013bd2:	ab13      	add	r3, sp, #76	@ 0x4c
 8013bd4:	a911      	add	r1, sp, #68	@ 0x44
 8013bd6:	f001 fac9 	bl	801516c <__gethex>
 8013bda:	f010 060f 	ands.w	r6, r0, #15
 8013bde:	4604      	mov	r4, r0
 8013be0:	d005      	beq.n	8013bee <_strtod_l+0x76>
 8013be2:	2e06      	cmp	r6, #6
 8013be4:	d12a      	bne.n	8013c3c <_strtod_l+0xc4>
 8013be6:	3501      	adds	r5, #1
 8013be8:	2300      	movs	r3, #0
 8013bea:	9511      	str	r5, [sp, #68]	@ 0x44
 8013bec:	9308      	str	r3, [sp, #32]
 8013bee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f040 8537 	bne.w	8014664 <_strtod_l+0xaec>
 8013bf6:	9b08      	ldr	r3, [sp, #32]
 8013bf8:	ec4b ab10 	vmov	d0, sl, fp
 8013bfc:	b1cb      	cbz	r3, 8013c32 <_strtod_l+0xba>
 8013bfe:	eeb1 0b40 	vneg.f64	d0, d0
 8013c02:	b017      	add	sp, #92	@ 0x5c
 8013c04:	ecbd 8b0a 	vpop	{d8-d12}
 8013c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0c:	2920      	cmp	r1, #32
 8013c0e:	d1cd      	bne.n	8013bac <_strtod_l+0x34>
 8013c10:	3201      	adds	r2, #1
 8013c12:	e7c0      	b.n	8013b96 <_strtod_l+0x1e>
 8013c14:	292d      	cmp	r1, #45	@ 0x2d
 8013c16:	d1c9      	bne.n	8013bac <_strtod_l+0x34>
 8013c18:	2101      	movs	r1, #1
 8013c1a:	9108      	str	r1, [sp, #32]
 8013c1c:	1c51      	adds	r1, r2, #1
 8013c1e:	9111      	str	r1, [sp, #68]	@ 0x44
 8013c20:	7852      	ldrb	r2, [r2, #1]
 8013c22:	2a00      	cmp	r2, #0
 8013c24:	d1c4      	bne.n	8013bb0 <_strtod_l+0x38>
 8013c26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c28:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	f040 8517 	bne.w	8014660 <_strtod_l+0xae8>
 8013c32:	ec4b ab10 	vmov	d0, sl, fp
 8013c36:	e7e4      	b.n	8013c02 <_strtod_l+0x8a>
 8013c38:	2100      	movs	r1, #0
 8013c3a:	e7ee      	b.n	8013c1a <_strtod_l+0xa2>
 8013c3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013c3e:	b13a      	cbz	r2, 8013c50 <_strtod_l+0xd8>
 8013c40:	2135      	movs	r1, #53	@ 0x35
 8013c42:	a814      	add	r0, sp, #80	@ 0x50
 8013c44:	f7ff ff39 	bl	8013aba <__copybits>
 8013c48:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013c4a:	9805      	ldr	r0, [sp, #20]
 8013c4c:	f7ff fb12 	bl	8013274 <_Bfree>
 8013c50:	1e73      	subs	r3, r6, #1
 8013c52:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013c54:	2b04      	cmp	r3, #4
 8013c56:	d806      	bhi.n	8013c66 <_strtod_l+0xee>
 8013c58:	e8df f003 	tbb	[pc, r3]
 8013c5c:	201d0314 	.word	0x201d0314
 8013c60:	14          	.byte	0x14
 8013c61:	00          	.byte	0x00
 8013c62:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8013c66:	05e3      	lsls	r3, r4, #23
 8013c68:	bf48      	it	mi
 8013c6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013c6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013c72:	0d1b      	lsrs	r3, r3, #20
 8013c74:	051b      	lsls	r3, r3, #20
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1b9      	bne.n	8013bee <_strtod_l+0x76>
 8013c7a:	f7fe fb91 	bl	80123a0 <__errno>
 8013c7e:	2322      	movs	r3, #34	@ 0x22
 8013c80:	6003      	str	r3, [r0, #0]
 8013c82:	e7b4      	b.n	8013bee <_strtod_l+0x76>
 8013c84:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013c88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013c8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013c90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013c94:	e7e7      	b.n	8013c66 <_strtod_l+0xee>
 8013c96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013e18 <_strtod_l+0x2a0>
 8013c9a:	e7e4      	b.n	8013c66 <_strtod_l+0xee>
 8013c9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013ca0:	f04f 3aff 	mov.w	sl, #4294967295
 8013ca4:	e7df      	b.n	8013c66 <_strtod_l+0xee>
 8013ca6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013ca8:	1c5a      	adds	r2, r3, #1
 8013caa:	9211      	str	r2, [sp, #68]	@ 0x44
 8013cac:	785b      	ldrb	r3, [r3, #1]
 8013cae:	2b30      	cmp	r3, #48	@ 0x30
 8013cb0:	d0f9      	beq.n	8013ca6 <_strtod_l+0x12e>
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d09b      	beq.n	8013bee <_strtod_l+0x76>
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	9307      	str	r3, [sp, #28]
 8013cba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013cbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	9306      	str	r3, [sp, #24]
 8013cc2:	4699      	mov	r9, r3
 8013cc4:	461d      	mov	r5, r3
 8013cc6:	220a      	movs	r2, #10
 8013cc8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013cca:	7804      	ldrb	r4, [r0, #0]
 8013ccc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8013cd0:	b2d9      	uxtb	r1, r3
 8013cd2:	2909      	cmp	r1, #9
 8013cd4:	d92a      	bls.n	8013d2c <_strtod_l+0x1b4>
 8013cd6:	494f      	ldr	r1, [pc, #316]	@ (8013e14 <_strtod_l+0x29c>)
 8013cd8:	2201      	movs	r2, #1
 8013cda:	f001 f95f 	bl	8014f9c <strncmp>
 8013cde:	b398      	cbz	r0, 8013d48 <_strtod_l+0x1d0>
 8013ce0:	2000      	movs	r0, #0
 8013ce2:	4622      	mov	r2, r4
 8013ce4:	462b      	mov	r3, r5
 8013ce6:	4607      	mov	r7, r0
 8013ce8:	4601      	mov	r1, r0
 8013cea:	2a65      	cmp	r2, #101	@ 0x65
 8013cec:	d001      	beq.n	8013cf2 <_strtod_l+0x17a>
 8013cee:	2a45      	cmp	r2, #69	@ 0x45
 8013cf0:	d118      	bne.n	8013d24 <_strtod_l+0x1ac>
 8013cf2:	b91b      	cbnz	r3, 8013cfc <_strtod_l+0x184>
 8013cf4:	9b07      	ldr	r3, [sp, #28]
 8013cf6:	4303      	orrs	r3, r0
 8013cf8:	d095      	beq.n	8013c26 <_strtod_l+0xae>
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8013d00:	f108 0201 	add.w	r2, r8, #1
 8013d04:	9211      	str	r2, [sp, #68]	@ 0x44
 8013d06:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013d0a:	2a2b      	cmp	r2, #43	@ 0x2b
 8013d0c:	d074      	beq.n	8013df8 <_strtod_l+0x280>
 8013d0e:	2a2d      	cmp	r2, #45	@ 0x2d
 8013d10:	d07a      	beq.n	8013e08 <_strtod_l+0x290>
 8013d12:	f04f 0e00 	mov.w	lr, #0
 8013d16:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013d1a:	2c09      	cmp	r4, #9
 8013d1c:	f240 8082 	bls.w	8013e24 <_strtod_l+0x2ac>
 8013d20:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013d24:	2400      	movs	r4, #0
 8013d26:	e09d      	b.n	8013e64 <_strtod_l+0x2ec>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	e7c5      	b.n	8013cb8 <_strtod_l+0x140>
 8013d2c:	2d08      	cmp	r5, #8
 8013d2e:	bfc8      	it	gt
 8013d30:	9906      	ldrgt	r1, [sp, #24]
 8013d32:	f100 0001 	add.w	r0, r0, #1
 8013d36:	bfca      	itet	gt
 8013d38:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013d3c:	fb02 3909 	mlale	r9, r2, r9, r3
 8013d40:	9306      	strgt	r3, [sp, #24]
 8013d42:	3501      	adds	r5, #1
 8013d44:	9011      	str	r0, [sp, #68]	@ 0x44
 8013d46:	e7bf      	b.n	8013cc8 <_strtod_l+0x150>
 8013d48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013d4a:	1c5a      	adds	r2, r3, #1
 8013d4c:	9211      	str	r2, [sp, #68]	@ 0x44
 8013d4e:	785a      	ldrb	r2, [r3, #1]
 8013d50:	b3bd      	cbz	r5, 8013dc2 <_strtod_l+0x24a>
 8013d52:	4607      	mov	r7, r0
 8013d54:	462b      	mov	r3, r5
 8013d56:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013d5a:	2909      	cmp	r1, #9
 8013d5c:	d912      	bls.n	8013d84 <_strtod_l+0x20c>
 8013d5e:	2101      	movs	r1, #1
 8013d60:	e7c3      	b.n	8013cea <_strtod_l+0x172>
 8013d62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013d64:	1c5a      	adds	r2, r3, #1
 8013d66:	9211      	str	r2, [sp, #68]	@ 0x44
 8013d68:	785a      	ldrb	r2, [r3, #1]
 8013d6a:	3001      	adds	r0, #1
 8013d6c:	2a30      	cmp	r2, #48	@ 0x30
 8013d6e:	d0f8      	beq.n	8013d62 <_strtod_l+0x1ea>
 8013d70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013d74:	2b08      	cmp	r3, #8
 8013d76:	f200 847a 	bhi.w	801466e <_strtod_l+0xaf6>
 8013d7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013d7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d7e:	4607      	mov	r7, r0
 8013d80:	2000      	movs	r0, #0
 8013d82:	4603      	mov	r3, r0
 8013d84:	3a30      	subs	r2, #48	@ 0x30
 8013d86:	f100 0101 	add.w	r1, r0, #1
 8013d8a:	d014      	beq.n	8013db6 <_strtod_l+0x23e>
 8013d8c:	440f      	add	r7, r1
 8013d8e:	469c      	mov	ip, r3
 8013d90:	f04f 0e0a 	mov.w	lr, #10
 8013d94:	f10c 0401 	add.w	r4, ip, #1
 8013d98:	1ae6      	subs	r6, r4, r3
 8013d9a:	42b1      	cmp	r1, r6
 8013d9c:	dc13      	bgt.n	8013dc6 <_strtod_l+0x24e>
 8013d9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013da2:	1819      	adds	r1, r3, r0
 8013da4:	2908      	cmp	r1, #8
 8013da6:	f103 0301 	add.w	r3, r3, #1
 8013daa:	4403      	add	r3, r0
 8013dac:	dc19      	bgt.n	8013de2 <_strtod_l+0x26a>
 8013dae:	210a      	movs	r1, #10
 8013db0:	fb01 2909 	mla	r9, r1, r9, r2
 8013db4:	2100      	movs	r1, #0
 8013db6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013db8:	1c50      	adds	r0, r2, #1
 8013dba:	9011      	str	r0, [sp, #68]	@ 0x44
 8013dbc:	7852      	ldrb	r2, [r2, #1]
 8013dbe:	4608      	mov	r0, r1
 8013dc0:	e7c9      	b.n	8013d56 <_strtod_l+0x1de>
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	e7d2      	b.n	8013d6c <_strtod_l+0x1f4>
 8013dc6:	f1bc 0f08 	cmp.w	ip, #8
 8013dca:	dc03      	bgt.n	8013dd4 <_strtod_l+0x25c>
 8013dcc:	fb0e f909 	mul.w	r9, lr, r9
 8013dd0:	46a4      	mov	ip, r4
 8013dd2:	e7df      	b.n	8013d94 <_strtod_l+0x21c>
 8013dd4:	2c10      	cmp	r4, #16
 8013dd6:	bfde      	ittt	le
 8013dd8:	9e06      	ldrle	r6, [sp, #24]
 8013dda:	fb0e f606 	mulle.w	r6, lr, r6
 8013dde:	9606      	strle	r6, [sp, #24]
 8013de0:	e7f6      	b.n	8013dd0 <_strtod_l+0x258>
 8013de2:	290f      	cmp	r1, #15
 8013de4:	bfdf      	itttt	le
 8013de6:	9806      	ldrle	r0, [sp, #24]
 8013de8:	210a      	movle	r1, #10
 8013dea:	fb01 2200 	mlale	r2, r1, r0, r2
 8013dee:	9206      	strle	r2, [sp, #24]
 8013df0:	e7e0      	b.n	8013db4 <_strtod_l+0x23c>
 8013df2:	2700      	movs	r7, #0
 8013df4:	2101      	movs	r1, #1
 8013df6:	e77d      	b.n	8013cf4 <_strtod_l+0x17c>
 8013df8:	f04f 0e00 	mov.w	lr, #0
 8013dfc:	f108 0202 	add.w	r2, r8, #2
 8013e00:	9211      	str	r2, [sp, #68]	@ 0x44
 8013e02:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013e06:	e786      	b.n	8013d16 <_strtod_l+0x19e>
 8013e08:	f04f 0e01 	mov.w	lr, #1
 8013e0c:	e7f6      	b.n	8013dfc <_strtod_l+0x284>
 8013e0e:	bf00      	nop
 8013e10:	0801623c 	.word	0x0801623c
 8013e14:	0801606f 	.word	0x0801606f
 8013e18:	7ff00000 	.word	0x7ff00000
 8013e1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013e1e:	1c54      	adds	r4, r2, #1
 8013e20:	9411      	str	r4, [sp, #68]	@ 0x44
 8013e22:	7852      	ldrb	r2, [r2, #1]
 8013e24:	2a30      	cmp	r2, #48	@ 0x30
 8013e26:	d0f9      	beq.n	8013e1c <_strtod_l+0x2a4>
 8013e28:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8013e2c:	2c08      	cmp	r4, #8
 8013e2e:	f63f af79 	bhi.w	8013d24 <_strtod_l+0x1ac>
 8013e32:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8013e36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013e38:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013e3c:	1c54      	adds	r4, r2, #1
 8013e3e:	9411      	str	r4, [sp, #68]	@ 0x44
 8013e40:	7852      	ldrb	r2, [r2, #1]
 8013e42:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8013e46:	2e09      	cmp	r6, #9
 8013e48:	d937      	bls.n	8013eba <_strtod_l+0x342>
 8013e4a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8013e4c:	1ba4      	subs	r4, r4, r6
 8013e4e:	2c08      	cmp	r4, #8
 8013e50:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013e54:	dc02      	bgt.n	8013e5c <_strtod_l+0x2e4>
 8013e56:	4564      	cmp	r4, ip
 8013e58:	bfa8      	it	ge
 8013e5a:	4664      	movge	r4, ip
 8013e5c:	f1be 0f00 	cmp.w	lr, #0
 8013e60:	d000      	beq.n	8013e64 <_strtod_l+0x2ec>
 8013e62:	4264      	negs	r4, r4
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d14d      	bne.n	8013f04 <_strtod_l+0x38c>
 8013e68:	9b07      	ldr	r3, [sp, #28]
 8013e6a:	4318      	orrs	r0, r3
 8013e6c:	f47f aebf 	bne.w	8013bee <_strtod_l+0x76>
 8013e70:	2900      	cmp	r1, #0
 8013e72:	f47f aed8 	bne.w	8013c26 <_strtod_l+0xae>
 8013e76:	2a69      	cmp	r2, #105	@ 0x69
 8013e78:	d027      	beq.n	8013eca <_strtod_l+0x352>
 8013e7a:	dc24      	bgt.n	8013ec6 <_strtod_l+0x34e>
 8013e7c:	2a49      	cmp	r2, #73	@ 0x49
 8013e7e:	d024      	beq.n	8013eca <_strtod_l+0x352>
 8013e80:	2a4e      	cmp	r2, #78	@ 0x4e
 8013e82:	f47f aed0 	bne.w	8013c26 <_strtod_l+0xae>
 8013e86:	4997      	ldr	r1, [pc, #604]	@ (80140e4 <_strtod_l+0x56c>)
 8013e88:	a811      	add	r0, sp, #68	@ 0x44
 8013e8a:	f001 fb91 	bl	80155b0 <__match>
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	f43f aec9 	beq.w	8013c26 <_strtod_l+0xae>
 8013e94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	2b28      	cmp	r3, #40	@ 0x28
 8013e9a:	d12d      	bne.n	8013ef8 <_strtod_l+0x380>
 8013e9c:	4992      	ldr	r1, [pc, #584]	@ (80140e8 <_strtod_l+0x570>)
 8013e9e:	aa14      	add	r2, sp, #80	@ 0x50
 8013ea0:	a811      	add	r0, sp, #68	@ 0x44
 8013ea2:	f001 fb99 	bl	80155d8 <__hexnan>
 8013ea6:	2805      	cmp	r0, #5
 8013ea8:	d126      	bne.n	8013ef8 <_strtod_l+0x380>
 8013eaa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013eac:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013eb0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013eb4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013eb8:	e699      	b.n	8013bee <_strtod_l+0x76>
 8013eba:	240a      	movs	r4, #10
 8013ebc:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013ec0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013ec4:	e7b9      	b.n	8013e3a <_strtod_l+0x2c2>
 8013ec6:	2a6e      	cmp	r2, #110	@ 0x6e
 8013ec8:	e7db      	b.n	8013e82 <_strtod_l+0x30a>
 8013eca:	4988      	ldr	r1, [pc, #544]	@ (80140ec <_strtod_l+0x574>)
 8013ecc:	a811      	add	r0, sp, #68	@ 0x44
 8013ece:	f001 fb6f 	bl	80155b0 <__match>
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	f43f aea7 	beq.w	8013c26 <_strtod_l+0xae>
 8013ed8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013eda:	4985      	ldr	r1, [pc, #532]	@ (80140f0 <_strtod_l+0x578>)
 8013edc:	3b01      	subs	r3, #1
 8013ede:	a811      	add	r0, sp, #68	@ 0x44
 8013ee0:	9311      	str	r3, [sp, #68]	@ 0x44
 8013ee2:	f001 fb65 	bl	80155b0 <__match>
 8013ee6:	b910      	cbnz	r0, 8013eee <_strtod_l+0x376>
 8013ee8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013eea:	3301      	adds	r3, #1
 8013eec:	9311      	str	r3, [sp, #68]	@ 0x44
 8013eee:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8014104 <_strtod_l+0x58c>
 8013ef2:	f04f 0a00 	mov.w	sl, #0
 8013ef6:	e67a      	b.n	8013bee <_strtod_l+0x76>
 8013ef8:	487e      	ldr	r0, [pc, #504]	@ (80140f4 <_strtod_l+0x57c>)
 8013efa:	f001 f895 	bl	8015028 <nan>
 8013efe:	ec5b ab10 	vmov	sl, fp, d0
 8013f02:	e674      	b.n	8013bee <_strtod_l+0x76>
 8013f04:	ee07 9a90 	vmov	s15, r9
 8013f08:	1be2      	subs	r2, r4, r7
 8013f0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013f0e:	2d00      	cmp	r5, #0
 8013f10:	bf08      	it	eq
 8013f12:	461d      	moveq	r5, r3
 8013f14:	2b10      	cmp	r3, #16
 8013f16:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f18:	461a      	mov	r2, r3
 8013f1a:	bfa8      	it	ge
 8013f1c:	2210      	movge	r2, #16
 8013f1e:	2b09      	cmp	r3, #9
 8013f20:	ec5b ab17 	vmov	sl, fp, d7
 8013f24:	dc15      	bgt.n	8013f52 <_strtod_l+0x3da>
 8013f26:	1be1      	subs	r1, r4, r7
 8013f28:	2900      	cmp	r1, #0
 8013f2a:	f43f ae60 	beq.w	8013bee <_strtod_l+0x76>
 8013f2e:	eba4 0107 	sub.w	r1, r4, r7
 8013f32:	dd72      	ble.n	801401a <_strtod_l+0x4a2>
 8013f34:	2916      	cmp	r1, #22
 8013f36:	dc59      	bgt.n	8013fec <_strtod_l+0x474>
 8013f38:	4b6f      	ldr	r3, [pc, #444]	@ (80140f8 <_strtod_l+0x580>)
 8013f3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f40:	ed93 7b00 	vldr	d7, [r3]
 8013f44:	ec4b ab16 	vmov	d6, sl, fp
 8013f48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f4c:	ec5b ab17 	vmov	sl, fp, d7
 8013f50:	e64d      	b.n	8013bee <_strtod_l+0x76>
 8013f52:	4969      	ldr	r1, [pc, #420]	@ (80140f8 <_strtod_l+0x580>)
 8013f54:	eddd 6a06 	vldr	s13, [sp, #24]
 8013f58:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013f5c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013f60:	2b0f      	cmp	r3, #15
 8013f62:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013f66:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013f6a:	ec5b ab16 	vmov	sl, fp, d6
 8013f6e:	ddda      	ble.n	8013f26 <_strtod_l+0x3ae>
 8013f70:	1a9a      	subs	r2, r3, r2
 8013f72:	1be1      	subs	r1, r4, r7
 8013f74:	440a      	add	r2, r1
 8013f76:	2a00      	cmp	r2, #0
 8013f78:	f340 8094 	ble.w	80140a4 <_strtod_l+0x52c>
 8013f7c:	f012 000f 	ands.w	r0, r2, #15
 8013f80:	d00a      	beq.n	8013f98 <_strtod_l+0x420>
 8013f82:	495d      	ldr	r1, [pc, #372]	@ (80140f8 <_strtod_l+0x580>)
 8013f84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013f88:	ed91 7b00 	vldr	d7, [r1]
 8013f8c:	ec4b ab16 	vmov	d6, sl, fp
 8013f90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f94:	ec5b ab17 	vmov	sl, fp, d7
 8013f98:	f032 020f 	bics.w	r2, r2, #15
 8013f9c:	d073      	beq.n	8014086 <_strtod_l+0x50e>
 8013f9e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013fa2:	dd47      	ble.n	8014034 <_strtod_l+0x4bc>
 8013fa4:	2400      	movs	r4, #0
 8013fa6:	4625      	mov	r5, r4
 8013fa8:	9407      	str	r4, [sp, #28]
 8013faa:	4626      	mov	r6, r4
 8013fac:	9a05      	ldr	r2, [sp, #20]
 8013fae:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8014104 <_strtod_l+0x58c>
 8013fb2:	2322      	movs	r3, #34	@ 0x22
 8013fb4:	6013      	str	r3, [r2, #0]
 8013fb6:	f04f 0a00 	mov.w	sl, #0
 8013fba:	9b07      	ldr	r3, [sp, #28]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	f43f ae16 	beq.w	8013bee <_strtod_l+0x76>
 8013fc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013fc4:	9805      	ldr	r0, [sp, #20]
 8013fc6:	f7ff f955 	bl	8013274 <_Bfree>
 8013fca:	9805      	ldr	r0, [sp, #20]
 8013fcc:	4631      	mov	r1, r6
 8013fce:	f7ff f951 	bl	8013274 <_Bfree>
 8013fd2:	9805      	ldr	r0, [sp, #20]
 8013fd4:	4629      	mov	r1, r5
 8013fd6:	f7ff f94d 	bl	8013274 <_Bfree>
 8013fda:	9907      	ldr	r1, [sp, #28]
 8013fdc:	9805      	ldr	r0, [sp, #20]
 8013fde:	f7ff f949 	bl	8013274 <_Bfree>
 8013fe2:	9805      	ldr	r0, [sp, #20]
 8013fe4:	4621      	mov	r1, r4
 8013fe6:	f7ff f945 	bl	8013274 <_Bfree>
 8013fea:	e600      	b.n	8013bee <_strtod_l+0x76>
 8013fec:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013ff0:	1be0      	subs	r0, r4, r7
 8013ff2:	4281      	cmp	r1, r0
 8013ff4:	dbbc      	blt.n	8013f70 <_strtod_l+0x3f8>
 8013ff6:	4a40      	ldr	r2, [pc, #256]	@ (80140f8 <_strtod_l+0x580>)
 8013ff8:	f1c3 030f 	rsb	r3, r3, #15
 8013ffc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014000:	ed91 7b00 	vldr	d7, [r1]
 8014004:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014006:	ec4b ab16 	vmov	d6, sl, fp
 801400a:	1acb      	subs	r3, r1, r3
 801400c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014010:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014014:	ed92 6b00 	vldr	d6, [r2]
 8014018:	e796      	b.n	8013f48 <_strtod_l+0x3d0>
 801401a:	3116      	adds	r1, #22
 801401c:	dba8      	blt.n	8013f70 <_strtod_l+0x3f8>
 801401e:	4b36      	ldr	r3, [pc, #216]	@ (80140f8 <_strtod_l+0x580>)
 8014020:	1b3c      	subs	r4, r7, r4
 8014022:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014026:	ed94 7b00 	vldr	d7, [r4]
 801402a:	ec4b ab16 	vmov	d6, sl, fp
 801402e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014032:	e78b      	b.n	8013f4c <_strtod_l+0x3d4>
 8014034:	2000      	movs	r0, #0
 8014036:	ec4b ab17 	vmov	d7, sl, fp
 801403a:	4e30      	ldr	r6, [pc, #192]	@ (80140fc <_strtod_l+0x584>)
 801403c:	1112      	asrs	r2, r2, #4
 801403e:	4601      	mov	r1, r0
 8014040:	2a01      	cmp	r2, #1
 8014042:	dc23      	bgt.n	801408c <_strtod_l+0x514>
 8014044:	b108      	cbz	r0, 801404a <_strtod_l+0x4d2>
 8014046:	ec5b ab17 	vmov	sl, fp, d7
 801404a:	4a2c      	ldr	r2, [pc, #176]	@ (80140fc <_strtod_l+0x584>)
 801404c:	482c      	ldr	r0, [pc, #176]	@ (8014100 <_strtod_l+0x588>)
 801404e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014052:	ed92 7b00 	vldr	d7, [r2]
 8014056:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801405a:	ec4b ab16 	vmov	d6, sl, fp
 801405e:	4a29      	ldr	r2, [pc, #164]	@ (8014104 <_strtod_l+0x58c>)
 8014060:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014064:	ee17 1a90 	vmov	r1, s15
 8014068:	400a      	ands	r2, r1
 801406a:	4282      	cmp	r2, r0
 801406c:	ec5b ab17 	vmov	sl, fp, d7
 8014070:	d898      	bhi.n	8013fa4 <_strtod_l+0x42c>
 8014072:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8014076:	4282      	cmp	r2, r0
 8014078:	bf86      	itte	hi
 801407a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8014108 <_strtod_l+0x590>
 801407e:	f04f 3aff 	movhi.w	sl, #4294967295
 8014082:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8014086:	2200      	movs	r2, #0
 8014088:	9206      	str	r2, [sp, #24]
 801408a:	e076      	b.n	801417a <_strtod_l+0x602>
 801408c:	f012 0f01 	tst.w	r2, #1
 8014090:	d004      	beq.n	801409c <_strtod_l+0x524>
 8014092:	ed96 6b00 	vldr	d6, [r6]
 8014096:	2001      	movs	r0, #1
 8014098:	ee27 7b06 	vmul.f64	d7, d7, d6
 801409c:	3101      	adds	r1, #1
 801409e:	1052      	asrs	r2, r2, #1
 80140a0:	3608      	adds	r6, #8
 80140a2:	e7cd      	b.n	8014040 <_strtod_l+0x4c8>
 80140a4:	d0ef      	beq.n	8014086 <_strtod_l+0x50e>
 80140a6:	4252      	negs	r2, r2
 80140a8:	f012 000f 	ands.w	r0, r2, #15
 80140ac:	d00a      	beq.n	80140c4 <_strtod_l+0x54c>
 80140ae:	4912      	ldr	r1, [pc, #72]	@ (80140f8 <_strtod_l+0x580>)
 80140b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80140b4:	ed91 7b00 	vldr	d7, [r1]
 80140b8:	ec4b ab16 	vmov	d6, sl, fp
 80140bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80140c0:	ec5b ab17 	vmov	sl, fp, d7
 80140c4:	1112      	asrs	r2, r2, #4
 80140c6:	d0de      	beq.n	8014086 <_strtod_l+0x50e>
 80140c8:	2a1f      	cmp	r2, #31
 80140ca:	dd1f      	ble.n	801410c <_strtod_l+0x594>
 80140cc:	2400      	movs	r4, #0
 80140ce:	4625      	mov	r5, r4
 80140d0:	9407      	str	r4, [sp, #28]
 80140d2:	4626      	mov	r6, r4
 80140d4:	9a05      	ldr	r2, [sp, #20]
 80140d6:	2322      	movs	r3, #34	@ 0x22
 80140d8:	f04f 0a00 	mov.w	sl, #0
 80140dc:	f04f 0b00 	mov.w	fp, #0
 80140e0:	6013      	str	r3, [r2, #0]
 80140e2:	e76a      	b.n	8013fba <_strtod_l+0x442>
 80140e4:	08015f5d 	.word	0x08015f5d
 80140e8:	08016228 	.word	0x08016228
 80140ec:	08015f55 	.word	0x08015f55
 80140f0:	08015f8c 	.word	0x08015f8c
 80140f4:	080160c5 	.word	0x080160c5
 80140f8:	08016160 	.word	0x08016160
 80140fc:	08016138 	.word	0x08016138
 8014100:	7ca00000 	.word	0x7ca00000
 8014104:	7ff00000 	.word	0x7ff00000
 8014108:	7fefffff 	.word	0x7fefffff
 801410c:	f012 0110 	ands.w	r1, r2, #16
 8014110:	bf18      	it	ne
 8014112:	216a      	movne	r1, #106	@ 0x6a
 8014114:	9106      	str	r1, [sp, #24]
 8014116:	ec4b ab17 	vmov	d7, sl, fp
 801411a:	49af      	ldr	r1, [pc, #700]	@ (80143d8 <_strtod_l+0x860>)
 801411c:	2000      	movs	r0, #0
 801411e:	07d6      	lsls	r6, r2, #31
 8014120:	d504      	bpl.n	801412c <_strtod_l+0x5b4>
 8014122:	ed91 6b00 	vldr	d6, [r1]
 8014126:	2001      	movs	r0, #1
 8014128:	ee27 7b06 	vmul.f64	d7, d7, d6
 801412c:	1052      	asrs	r2, r2, #1
 801412e:	f101 0108 	add.w	r1, r1, #8
 8014132:	d1f4      	bne.n	801411e <_strtod_l+0x5a6>
 8014134:	b108      	cbz	r0, 801413a <_strtod_l+0x5c2>
 8014136:	ec5b ab17 	vmov	sl, fp, d7
 801413a:	9a06      	ldr	r2, [sp, #24]
 801413c:	b1b2      	cbz	r2, 801416c <_strtod_l+0x5f4>
 801413e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8014142:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8014146:	2a00      	cmp	r2, #0
 8014148:	4658      	mov	r0, fp
 801414a:	dd0f      	ble.n	801416c <_strtod_l+0x5f4>
 801414c:	2a1f      	cmp	r2, #31
 801414e:	dd55      	ble.n	80141fc <_strtod_l+0x684>
 8014150:	2a34      	cmp	r2, #52	@ 0x34
 8014152:	bfde      	ittt	le
 8014154:	f04f 32ff 	movle.w	r2, #4294967295
 8014158:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801415c:	408a      	lslle	r2, r1
 801415e:	f04f 0a00 	mov.w	sl, #0
 8014162:	bfcc      	ite	gt
 8014164:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8014168:	ea02 0b00 	andle.w	fp, r2, r0
 801416c:	ec4b ab17 	vmov	d7, sl, fp
 8014170:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014178:	d0a8      	beq.n	80140cc <_strtod_l+0x554>
 801417a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801417c:	9805      	ldr	r0, [sp, #20]
 801417e:	f8cd 9000 	str.w	r9, [sp]
 8014182:	462a      	mov	r2, r5
 8014184:	f7ff f8de 	bl	8013344 <__s2b>
 8014188:	9007      	str	r0, [sp, #28]
 801418a:	2800      	cmp	r0, #0
 801418c:	f43f af0a 	beq.w	8013fa4 <_strtod_l+0x42c>
 8014190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014192:	1b3f      	subs	r7, r7, r4
 8014194:	2b00      	cmp	r3, #0
 8014196:	bfb4      	ite	lt
 8014198:	463b      	movlt	r3, r7
 801419a:	2300      	movge	r3, #0
 801419c:	930a      	str	r3, [sp, #40]	@ 0x28
 801419e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141a0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80143c8 <_strtod_l+0x850>
 80141a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80141a8:	2400      	movs	r4, #0
 80141aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80141ac:	4625      	mov	r5, r4
 80141ae:	9b07      	ldr	r3, [sp, #28]
 80141b0:	9805      	ldr	r0, [sp, #20]
 80141b2:	6859      	ldr	r1, [r3, #4]
 80141b4:	f7ff f81e 	bl	80131f4 <_Balloc>
 80141b8:	4606      	mov	r6, r0
 80141ba:	2800      	cmp	r0, #0
 80141bc:	f43f aef6 	beq.w	8013fac <_strtod_l+0x434>
 80141c0:	9b07      	ldr	r3, [sp, #28]
 80141c2:	691a      	ldr	r2, [r3, #16]
 80141c4:	ec4b ab19 	vmov	d9, sl, fp
 80141c8:	3202      	adds	r2, #2
 80141ca:	f103 010c 	add.w	r1, r3, #12
 80141ce:	0092      	lsls	r2, r2, #2
 80141d0:	300c      	adds	r0, #12
 80141d2:	f7fe f912 	bl	80123fa <memcpy>
 80141d6:	eeb0 0b49 	vmov.f64	d0, d9
 80141da:	9805      	ldr	r0, [sp, #20]
 80141dc:	aa14      	add	r2, sp, #80	@ 0x50
 80141de:	a913      	add	r1, sp, #76	@ 0x4c
 80141e0:	f7ff fbe4 	bl	80139ac <__d2b>
 80141e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80141e6:	2800      	cmp	r0, #0
 80141e8:	f43f aee0 	beq.w	8013fac <_strtod_l+0x434>
 80141ec:	9805      	ldr	r0, [sp, #20]
 80141ee:	2101      	movs	r1, #1
 80141f0:	f7ff f93e 	bl	8013470 <__i2b>
 80141f4:	4605      	mov	r5, r0
 80141f6:	b940      	cbnz	r0, 801420a <_strtod_l+0x692>
 80141f8:	2500      	movs	r5, #0
 80141fa:	e6d7      	b.n	8013fac <_strtod_l+0x434>
 80141fc:	f04f 31ff 	mov.w	r1, #4294967295
 8014200:	fa01 f202 	lsl.w	r2, r1, r2
 8014204:	ea02 0a0a 	and.w	sl, r2, sl
 8014208:	e7b0      	b.n	801416c <_strtod_l+0x5f4>
 801420a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 801420c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801420e:	2f00      	cmp	r7, #0
 8014210:	bfab      	itete	ge
 8014212:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8014214:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8014216:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801421a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801421e:	bfac      	ite	ge
 8014220:	eb07 0903 	addge.w	r9, r7, r3
 8014224:	eba3 0807 	sublt.w	r8, r3, r7
 8014228:	9b06      	ldr	r3, [sp, #24]
 801422a:	1aff      	subs	r7, r7, r3
 801422c:	4417      	add	r7, r2
 801422e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8014232:	4a6a      	ldr	r2, [pc, #424]	@ (80143dc <_strtod_l+0x864>)
 8014234:	3f01      	subs	r7, #1
 8014236:	4297      	cmp	r7, r2
 8014238:	da51      	bge.n	80142de <_strtod_l+0x766>
 801423a:	1bd1      	subs	r1, r2, r7
 801423c:	291f      	cmp	r1, #31
 801423e:	eba3 0301 	sub.w	r3, r3, r1
 8014242:	f04f 0201 	mov.w	r2, #1
 8014246:	dc3e      	bgt.n	80142c6 <_strtod_l+0x74e>
 8014248:	408a      	lsls	r2, r1
 801424a:	920c      	str	r2, [sp, #48]	@ 0x30
 801424c:	2200      	movs	r2, #0
 801424e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014250:	eb09 0703 	add.w	r7, r9, r3
 8014254:	4498      	add	r8, r3
 8014256:	9b06      	ldr	r3, [sp, #24]
 8014258:	45b9      	cmp	r9, r7
 801425a:	4498      	add	r8, r3
 801425c:	464b      	mov	r3, r9
 801425e:	bfa8      	it	ge
 8014260:	463b      	movge	r3, r7
 8014262:	4543      	cmp	r3, r8
 8014264:	bfa8      	it	ge
 8014266:	4643      	movge	r3, r8
 8014268:	2b00      	cmp	r3, #0
 801426a:	bfc2      	ittt	gt
 801426c:	1aff      	subgt	r7, r7, r3
 801426e:	eba8 0803 	subgt.w	r8, r8, r3
 8014272:	eba9 0903 	subgt.w	r9, r9, r3
 8014276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014278:	2b00      	cmp	r3, #0
 801427a:	dd16      	ble.n	80142aa <_strtod_l+0x732>
 801427c:	4629      	mov	r1, r5
 801427e:	9805      	ldr	r0, [sp, #20]
 8014280:	461a      	mov	r2, r3
 8014282:	f7ff f9ad 	bl	80135e0 <__pow5mult>
 8014286:	4605      	mov	r5, r0
 8014288:	2800      	cmp	r0, #0
 801428a:	d0b5      	beq.n	80141f8 <_strtod_l+0x680>
 801428c:	4601      	mov	r1, r0
 801428e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014290:	9805      	ldr	r0, [sp, #20]
 8014292:	f7ff f903 	bl	801349c <__multiply>
 8014296:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014298:	2800      	cmp	r0, #0
 801429a:	f43f ae87 	beq.w	8013fac <_strtod_l+0x434>
 801429e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80142a0:	9805      	ldr	r0, [sp, #20]
 80142a2:	f7fe ffe7 	bl	8013274 <_Bfree>
 80142a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80142aa:	2f00      	cmp	r7, #0
 80142ac:	dc1b      	bgt.n	80142e6 <_strtod_l+0x76e>
 80142ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	dd21      	ble.n	80142f8 <_strtod_l+0x780>
 80142b4:	4631      	mov	r1, r6
 80142b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80142b8:	9805      	ldr	r0, [sp, #20]
 80142ba:	f7ff f991 	bl	80135e0 <__pow5mult>
 80142be:	4606      	mov	r6, r0
 80142c0:	b9d0      	cbnz	r0, 80142f8 <_strtod_l+0x780>
 80142c2:	2600      	movs	r6, #0
 80142c4:	e672      	b.n	8013fac <_strtod_l+0x434>
 80142c6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80142ca:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80142ce:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80142d2:	37e2      	adds	r7, #226	@ 0xe2
 80142d4:	fa02 f107 	lsl.w	r1, r2, r7
 80142d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80142da:	920c      	str	r2, [sp, #48]	@ 0x30
 80142dc:	e7b8      	b.n	8014250 <_strtod_l+0x6d8>
 80142de:	2200      	movs	r2, #0
 80142e0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80142e2:	2201      	movs	r2, #1
 80142e4:	e7f9      	b.n	80142da <_strtod_l+0x762>
 80142e6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80142e8:	9805      	ldr	r0, [sp, #20]
 80142ea:	463a      	mov	r2, r7
 80142ec:	f7ff f9d2 	bl	8013694 <__lshift>
 80142f0:	9012      	str	r0, [sp, #72]	@ 0x48
 80142f2:	2800      	cmp	r0, #0
 80142f4:	d1db      	bne.n	80142ae <_strtod_l+0x736>
 80142f6:	e659      	b.n	8013fac <_strtod_l+0x434>
 80142f8:	f1b8 0f00 	cmp.w	r8, #0
 80142fc:	dd07      	ble.n	801430e <_strtod_l+0x796>
 80142fe:	4631      	mov	r1, r6
 8014300:	9805      	ldr	r0, [sp, #20]
 8014302:	4642      	mov	r2, r8
 8014304:	f7ff f9c6 	bl	8013694 <__lshift>
 8014308:	4606      	mov	r6, r0
 801430a:	2800      	cmp	r0, #0
 801430c:	d0d9      	beq.n	80142c2 <_strtod_l+0x74a>
 801430e:	f1b9 0f00 	cmp.w	r9, #0
 8014312:	dd08      	ble.n	8014326 <_strtod_l+0x7ae>
 8014314:	4629      	mov	r1, r5
 8014316:	9805      	ldr	r0, [sp, #20]
 8014318:	464a      	mov	r2, r9
 801431a:	f7ff f9bb 	bl	8013694 <__lshift>
 801431e:	4605      	mov	r5, r0
 8014320:	2800      	cmp	r0, #0
 8014322:	f43f ae43 	beq.w	8013fac <_strtod_l+0x434>
 8014326:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014328:	9805      	ldr	r0, [sp, #20]
 801432a:	4632      	mov	r2, r6
 801432c:	f7ff fa3a 	bl	80137a4 <__mdiff>
 8014330:	4604      	mov	r4, r0
 8014332:	2800      	cmp	r0, #0
 8014334:	f43f ae3a 	beq.w	8013fac <_strtod_l+0x434>
 8014338:	2300      	movs	r3, #0
 801433a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801433e:	60c3      	str	r3, [r0, #12]
 8014340:	4629      	mov	r1, r5
 8014342:	f7ff fa13 	bl	801376c <__mcmp>
 8014346:	2800      	cmp	r0, #0
 8014348:	da4c      	bge.n	80143e4 <_strtod_l+0x86c>
 801434a:	ea58 080a 	orrs.w	r8, r8, sl
 801434e:	d172      	bne.n	8014436 <_strtod_l+0x8be>
 8014350:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014354:	2b00      	cmp	r3, #0
 8014356:	d16e      	bne.n	8014436 <_strtod_l+0x8be>
 8014358:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801435c:	0d1b      	lsrs	r3, r3, #20
 801435e:	051b      	lsls	r3, r3, #20
 8014360:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014364:	d967      	bls.n	8014436 <_strtod_l+0x8be>
 8014366:	6963      	ldr	r3, [r4, #20]
 8014368:	b913      	cbnz	r3, 8014370 <_strtod_l+0x7f8>
 801436a:	6923      	ldr	r3, [r4, #16]
 801436c:	2b01      	cmp	r3, #1
 801436e:	dd62      	ble.n	8014436 <_strtod_l+0x8be>
 8014370:	4621      	mov	r1, r4
 8014372:	2201      	movs	r2, #1
 8014374:	9805      	ldr	r0, [sp, #20]
 8014376:	f7ff f98d 	bl	8013694 <__lshift>
 801437a:	4629      	mov	r1, r5
 801437c:	4604      	mov	r4, r0
 801437e:	f7ff f9f5 	bl	801376c <__mcmp>
 8014382:	2800      	cmp	r0, #0
 8014384:	dd57      	ble.n	8014436 <_strtod_l+0x8be>
 8014386:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801438a:	9a06      	ldr	r2, [sp, #24]
 801438c:	0d1b      	lsrs	r3, r3, #20
 801438e:	051b      	lsls	r3, r3, #20
 8014390:	2a00      	cmp	r2, #0
 8014392:	d06e      	beq.n	8014472 <_strtod_l+0x8fa>
 8014394:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014398:	d86b      	bhi.n	8014472 <_strtod_l+0x8fa>
 801439a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801439e:	f67f ae99 	bls.w	80140d4 <_strtod_l+0x55c>
 80143a2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80143d0 <_strtod_l+0x858>
 80143a6:	ec4b ab16 	vmov	d6, sl, fp
 80143aa:	4b0d      	ldr	r3, [pc, #52]	@ (80143e0 <_strtod_l+0x868>)
 80143ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80143b0:	ee17 2a90 	vmov	r2, s15
 80143b4:	4013      	ands	r3, r2
 80143b6:	ec5b ab17 	vmov	sl, fp, d7
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	f47f ae01 	bne.w	8013fc2 <_strtod_l+0x44a>
 80143c0:	9a05      	ldr	r2, [sp, #20]
 80143c2:	2322      	movs	r3, #34	@ 0x22
 80143c4:	6013      	str	r3, [r2, #0]
 80143c6:	e5fc      	b.n	8013fc2 <_strtod_l+0x44a>
 80143c8:	ffc00000 	.word	0xffc00000
 80143cc:	41dfffff 	.word	0x41dfffff
 80143d0:	00000000 	.word	0x00000000
 80143d4:	39500000 	.word	0x39500000
 80143d8:	08016250 	.word	0x08016250
 80143dc:	fffffc02 	.word	0xfffffc02
 80143e0:	7ff00000 	.word	0x7ff00000
 80143e4:	46d9      	mov	r9, fp
 80143e6:	d15d      	bne.n	80144a4 <_strtod_l+0x92c>
 80143e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143ec:	f1b8 0f00 	cmp.w	r8, #0
 80143f0:	d02a      	beq.n	8014448 <_strtod_l+0x8d0>
 80143f2:	4aa9      	ldr	r2, [pc, #676]	@ (8014698 <_strtod_l+0xb20>)
 80143f4:	4293      	cmp	r3, r2
 80143f6:	d12a      	bne.n	801444e <_strtod_l+0x8d6>
 80143f8:	9b06      	ldr	r3, [sp, #24]
 80143fa:	4652      	mov	r2, sl
 80143fc:	b1fb      	cbz	r3, 801443e <_strtod_l+0x8c6>
 80143fe:	4ba7      	ldr	r3, [pc, #668]	@ (801469c <_strtod_l+0xb24>)
 8014400:	ea0b 0303 	and.w	r3, fp, r3
 8014404:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014408:	f04f 31ff 	mov.w	r1, #4294967295
 801440c:	d81a      	bhi.n	8014444 <_strtod_l+0x8cc>
 801440e:	0d1b      	lsrs	r3, r3, #20
 8014410:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014414:	fa01 f303 	lsl.w	r3, r1, r3
 8014418:	429a      	cmp	r2, r3
 801441a:	d118      	bne.n	801444e <_strtod_l+0x8d6>
 801441c:	4ba0      	ldr	r3, [pc, #640]	@ (80146a0 <_strtod_l+0xb28>)
 801441e:	4599      	cmp	r9, r3
 8014420:	d102      	bne.n	8014428 <_strtod_l+0x8b0>
 8014422:	3201      	adds	r2, #1
 8014424:	f43f adc2 	beq.w	8013fac <_strtod_l+0x434>
 8014428:	4b9c      	ldr	r3, [pc, #624]	@ (801469c <_strtod_l+0xb24>)
 801442a:	ea09 0303 	and.w	r3, r9, r3
 801442e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8014432:	f04f 0a00 	mov.w	sl, #0
 8014436:	9b06      	ldr	r3, [sp, #24]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d1b2      	bne.n	80143a2 <_strtod_l+0x82a>
 801443c:	e5c1      	b.n	8013fc2 <_strtod_l+0x44a>
 801443e:	f04f 33ff 	mov.w	r3, #4294967295
 8014442:	e7e9      	b.n	8014418 <_strtod_l+0x8a0>
 8014444:	460b      	mov	r3, r1
 8014446:	e7e7      	b.n	8014418 <_strtod_l+0x8a0>
 8014448:	ea53 030a 	orrs.w	r3, r3, sl
 801444c:	d09b      	beq.n	8014386 <_strtod_l+0x80e>
 801444e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014450:	b1c3      	cbz	r3, 8014484 <_strtod_l+0x90c>
 8014452:	ea13 0f09 	tst.w	r3, r9
 8014456:	d0ee      	beq.n	8014436 <_strtod_l+0x8be>
 8014458:	9a06      	ldr	r2, [sp, #24]
 801445a:	4650      	mov	r0, sl
 801445c:	4659      	mov	r1, fp
 801445e:	f1b8 0f00 	cmp.w	r8, #0
 8014462:	d013      	beq.n	801448c <_strtod_l+0x914>
 8014464:	f7ff fb6d 	bl	8013b42 <sulp>
 8014468:	ee39 7b00 	vadd.f64	d7, d9, d0
 801446c:	ec5b ab17 	vmov	sl, fp, d7
 8014470:	e7e1      	b.n	8014436 <_strtod_l+0x8be>
 8014472:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014476:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801447a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801447e:	f04f 3aff 	mov.w	sl, #4294967295
 8014482:	e7d8      	b.n	8014436 <_strtod_l+0x8be>
 8014484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014486:	ea13 0f0a 	tst.w	r3, sl
 801448a:	e7e4      	b.n	8014456 <_strtod_l+0x8de>
 801448c:	f7ff fb59 	bl	8013b42 <sulp>
 8014490:	ee39 0b40 	vsub.f64	d0, d9, d0
 8014494:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801449c:	ec5b ab10 	vmov	sl, fp, d0
 80144a0:	d1c9      	bne.n	8014436 <_strtod_l+0x8be>
 80144a2:	e617      	b.n	80140d4 <_strtod_l+0x55c>
 80144a4:	4629      	mov	r1, r5
 80144a6:	4620      	mov	r0, r4
 80144a8:	f7ff fad8 	bl	8013a5c <__ratio>
 80144ac:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80144b0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80144b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b8:	d85d      	bhi.n	8014576 <_strtod_l+0x9fe>
 80144ba:	f1b8 0f00 	cmp.w	r8, #0
 80144be:	d164      	bne.n	801458a <_strtod_l+0xa12>
 80144c0:	f1ba 0f00 	cmp.w	sl, #0
 80144c4:	d14b      	bne.n	801455e <_strtod_l+0x9e6>
 80144c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80144ca:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d160      	bne.n	8014594 <_strtod_l+0xa1c>
 80144d2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80144d6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80144da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144de:	d401      	bmi.n	80144e4 <_strtod_l+0x96c>
 80144e0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80144e4:	eeb1 ab48 	vneg.f64	d10, d8
 80144e8:	486c      	ldr	r0, [pc, #432]	@ (801469c <_strtod_l+0xb24>)
 80144ea:	496e      	ldr	r1, [pc, #440]	@ (80146a4 <_strtod_l+0xb2c>)
 80144ec:	ea09 0700 	and.w	r7, r9, r0
 80144f0:	428f      	cmp	r7, r1
 80144f2:	ec53 2b1a 	vmov	r2, r3, d10
 80144f6:	d17d      	bne.n	80145f4 <_strtod_l+0xa7c>
 80144f8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80144fc:	ec4b ab1c 	vmov	d12, sl, fp
 8014500:	eeb0 0b4c 	vmov.f64	d0, d12
 8014504:	f7ff f9e2 	bl	80138cc <__ulp>
 8014508:	4864      	ldr	r0, [pc, #400]	@ (801469c <_strtod_l+0xb24>)
 801450a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801450e:	ee1c 3a90 	vmov	r3, s25
 8014512:	4a65      	ldr	r2, [pc, #404]	@ (80146a8 <_strtod_l+0xb30>)
 8014514:	ea03 0100 	and.w	r1, r3, r0
 8014518:	4291      	cmp	r1, r2
 801451a:	ec5b ab1c 	vmov	sl, fp, d12
 801451e:	d93c      	bls.n	801459a <_strtod_l+0xa22>
 8014520:	ee19 2a90 	vmov	r2, s19
 8014524:	4b5e      	ldr	r3, [pc, #376]	@ (80146a0 <_strtod_l+0xb28>)
 8014526:	429a      	cmp	r2, r3
 8014528:	d104      	bne.n	8014534 <_strtod_l+0x9bc>
 801452a:	ee19 3a10 	vmov	r3, s18
 801452e:	3301      	adds	r3, #1
 8014530:	f43f ad3c 	beq.w	8013fac <_strtod_l+0x434>
 8014534:	f8df b168 	ldr.w	fp, [pc, #360]	@ 80146a0 <_strtod_l+0xb28>
 8014538:	f04f 3aff 	mov.w	sl, #4294967295
 801453c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801453e:	9805      	ldr	r0, [sp, #20]
 8014540:	f7fe fe98 	bl	8013274 <_Bfree>
 8014544:	9805      	ldr	r0, [sp, #20]
 8014546:	4631      	mov	r1, r6
 8014548:	f7fe fe94 	bl	8013274 <_Bfree>
 801454c:	9805      	ldr	r0, [sp, #20]
 801454e:	4629      	mov	r1, r5
 8014550:	f7fe fe90 	bl	8013274 <_Bfree>
 8014554:	9805      	ldr	r0, [sp, #20]
 8014556:	4621      	mov	r1, r4
 8014558:	f7fe fe8c 	bl	8013274 <_Bfree>
 801455c:	e627      	b.n	80141ae <_strtod_l+0x636>
 801455e:	f1ba 0f01 	cmp.w	sl, #1
 8014562:	d103      	bne.n	801456c <_strtod_l+0x9f4>
 8014564:	f1bb 0f00 	cmp.w	fp, #0
 8014568:	f43f adb4 	beq.w	80140d4 <_strtod_l+0x55c>
 801456c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014570:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8014574:	e7b8      	b.n	80144e8 <_strtod_l+0x970>
 8014576:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801457a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801457e:	f1b8 0f00 	cmp.w	r8, #0
 8014582:	d0af      	beq.n	80144e4 <_strtod_l+0x96c>
 8014584:	eeb0 ab48 	vmov.f64	d10, d8
 8014588:	e7ae      	b.n	80144e8 <_strtod_l+0x970>
 801458a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801458e:	eeb0 8b4a 	vmov.f64	d8, d10
 8014592:	e7a9      	b.n	80144e8 <_strtod_l+0x970>
 8014594:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014598:	e7a6      	b.n	80144e8 <_strtod_l+0x970>
 801459a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801459e:	9b06      	ldr	r3, [sp, #24]
 80145a0:	46d9      	mov	r9, fp
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d1ca      	bne.n	801453c <_strtod_l+0x9c4>
 80145a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80145aa:	0d1b      	lsrs	r3, r3, #20
 80145ac:	051b      	lsls	r3, r3, #20
 80145ae:	429f      	cmp	r7, r3
 80145b0:	d1c4      	bne.n	801453c <_strtod_l+0x9c4>
 80145b2:	ec51 0b18 	vmov	r0, r1, d8
 80145b6:	f7ec f8bf 	bl	8000738 <__aeabi_d2lz>
 80145ba:	f7ec f877 	bl	80006ac <__aeabi_l2d>
 80145be:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80145c2:	ec41 0b17 	vmov	d7, r0, r1
 80145c6:	ea49 090a 	orr.w	r9, r9, sl
 80145ca:	ea59 0908 	orrs.w	r9, r9, r8
 80145ce:	ee38 8b47 	vsub.f64	d8, d8, d7
 80145d2:	d03c      	beq.n	801464e <_strtod_l+0xad6>
 80145d4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014680 <_strtod_l+0xb08>
 80145d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80145dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e0:	f53f acef 	bmi.w	8013fc2 <_strtod_l+0x44a>
 80145e4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8014688 <_strtod_l+0xb10>
 80145e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80145ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f0:	dda4      	ble.n	801453c <_strtod_l+0x9c4>
 80145f2:	e4e6      	b.n	8013fc2 <_strtod_l+0x44a>
 80145f4:	9906      	ldr	r1, [sp, #24]
 80145f6:	b1e1      	cbz	r1, 8014632 <_strtod_l+0xaba>
 80145f8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80145fc:	d819      	bhi.n	8014632 <_strtod_l+0xaba>
 80145fe:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8014602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014606:	d811      	bhi.n	801462c <_strtod_l+0xab4>
 8014608:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801460c:	ee18 3a10 	vmov	r3, s16
 8014610:	2b01      	cmp	r3, #1
 8014612:	bf38      	it	cc
 8014614:	2301      	movcc	r3, #1
 8014616:	ee08 3a10 	vmov	s16, r3
 801461a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801461e:	f1b8 0f00 	cmp.w	r8, #0
 8014622:	d111      	bne.n	8014648 <_strtod_l+0xad0>
 8014624:	eeb1 7b48 	vneg.f64	d7, d8
 8014628:	ec53 2b17 	vmov	r2, r3, d7
 801462c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8014630:	1bcb      	subs	r3, r1, r7
 8014632:	eeb0 0b49 	vmov.f64	d0, d9
 8014636:	ec43 2b1a 	vmov	d10, r2, r3
 801463a:	f7ff f947 	bl	80138cc <__ulp>
 801463e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8014642:	ec5b ab19 	vmov	sl, fp, d9
 8014646:	e7aa      	b.n	801459e <_strtod_l+0xa26>
 8014648:	eeb0 7b48 	vmov.f64	d7, d8
 801464c:	e7ec      	b.n	8014628 <_strtod_l+0xab0>
 801464e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8014690 <_strtod_l+0xb18>
 8014652:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801465a:	f57f af6f 	bpl.w	801453c <_strtod_l+0x9c4>
 801465e:	e4b0      	b.n	8013fc2 <_strtod_l+0x44a>
 8014660:	2300      	movs	r3, #0
 8014662:	9308      	str	r3, [sp, #32]
 8014664:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014666:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014668:	6013      	str	r3, [r2, #0]
 801466a:	f7ff bac4 	b.w	8013bf6 <_strtod_l+0x7e>
 801466e:	2a65      	cmp	r2, #101	@ 0x65
 8014670:	f43f abbf 	beq.w	8013df2 <_strtod_l+0x27a>
 8014674:	2a45      	cmp	r2, #69	@ 0x45
 8014676:	f43f abbc 	beq.w	8013df2 <_strtod_l+0x27a>
 801467a:	2101      	movs	r1, #1
 801467c:	f7ff bbf4 	b.w	8013e68 <_strtod_l+0x2f0>
 8014680:	94a03595 	.word	0x94a03595
 8014684:	3fdfffff 	.word	0x3fdfffff
 8014688:	35afe535 	.word	0x35afe535
 801468c:	3fe00000 	.word	0x3fe00000
 8014690:	94a03595 	.word	0x94a03595
 8014694:	3fcfffff 	.word	0x3fcfffff
 8014698:	000fffff 	.word	0x000fffff
 801469c:	7ff00000 	.word	0x7ff00000
 80146a0:	7fefffff 	.word	0x7fefffff
 80146a4:	7fe00000 	.word	0x7fe00000
 80146a8:	7c9fffff 	.word	0x7c9fffff

080146ac <_strtod_r>:
 80146ac:	4b01      	ldr	r3, [pc, #4]	@ (80146b4 <_strtod_r+0x8>)
 80146ae:	f7ff ba63 	b.w	8013b78 <_strtod_l>
 80146b2:	bf00      	nop
 80146b4:	24000084 	.word	0x24000084

080146b8 <_strtol_l.isra.0>:
 80146b8:	2b24      	cmp	r3, #36	@ 0x24
 80146ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146be:	4686      	mov	lr, r0
 80146c0:	4690      	mov	r8, r2
 80146c2:	d801      	bhi.n	80146c8 <_strtol_l.isra.0+0x10>
 80146c4:	2b01      	cmp	r3, #1
 80146c6:	d106      	bne.n	80146d6 <_strtol_l.isra.0+0x1e>
 80146c8:	f7fd fe6a 	bl	80123a0 <__errno>
 80146cc:	2316      	movs	r3, #22
 80146ce:	6003      	str	r3, [r0, #0]
 80146d0:	2000      	movs	r0, #0
 80146d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146d6:	4834      	ldr	r0, [pc, #208]	@ (80147a8 <_strtol_l.isra.0+0xf0>)
 80146d8:	460d      	mov	r5, r1
 80146da:	462a      	mov	r2, r5
 80146dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80146e0:	5d06      	ldrb	r6, [r0, r4]
 80146e2:	f016 0608 	ands.w	r6, r6, #8
 80146e6:	d1f8      	bne.n	80146da <_strtol_l.isra.0+0x22>
 80146e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80146ea:	d110      	bne.n	801470e <_strtol_l.isra.0+0x56>
 80146ec:	782c      	ldrb	r4, [r5, #0]
 80146ee:	2601      	movs	r6, #1
 80146f0:	1c95      	adds	r5, r2, #2
 80146f2:	f033 0210 	bics.w	r2, r3, #16
 80146f6:	d115      	bne.n	8014724 <_strtol_l.isra.0+0x6c>
 80146f8:	2c30      	cmp	r4, #48	@ 0x30
 80146fa:	d10d      	bne.n	8014718 <_strtol_l.isra.0+0x60>
 80146fc:	782a      	ldrb	r2, [r5, #0]
 80146fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014702:	2a58      	cmp	r2, #88	@ 0x58
 8014704:	d108      	bne.n	8014718 <_strtol_l.isra.0+0x60>
 8014706:	786c      	ldrb	r4, [r5, #1]
 8014708:	3502      	adds	r5, #2
 801470a:	2310      	movs	r3, #16
 801470c:	e00a      	b.n	8014724 <_strtol_l.isra.0+0x6c>
 801470e:	2c2b      	cmp	r4, #43	@ 0x2b
 8014710:	bf04      	itt	eq
 8014712:	782c      	ldrbeq	r4, [r5, #0]
 8014714:	1c95      	addeq	r5, r2, #2
 8014716:	e7ec      	b.n	80146f2 <_strtol_l.isra.0+0x3a>
 8014718:	2b00      	cmp	r3, #0
 801471a:	d1f6      	bne.n	801470a <_strtol_l.isra.0+0x52>
 801471c:	2c30      	cmp	r4, #48	@ 0x30
 801471e:	bf14      	ite	ne
 8014720:	230a      	movne	r3, #10
 8014722:	2308      	moveq	r3, #8
 8014724:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014728:	f10c 3cff 	add.w	ip, ip, #4294967295
 801472c:	2200      	movs	r2, #0
 801472e:	fbbc f9f3 	udiv	r9, ip, r3
 8014732:	4610      	mov	r0, r2
 8014734:	fb03 ca19 	mls	sl, r3, r9, ip
 8014738:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801473c:	2f09      	cmp	r7, #9
 801473e:	d80f      	bhi.n	8014760 <_strtol_l.isra.0+0xa8>
 8014740:	463c      	mov	r4, r7
 8014742:	42a3      	cmp	r3, r4
 8014744:	dd1b      	ble.n	801477e <_strtol_l.isra.0+0xc6>
 8014746:	1c57      	adds	r7, r2, #1
 8014748:	d007      	beq.n	801475a <_strtol_l.isra.0+0xa2>
 801474a:	4581      	cmp	r9, r0
 801474c:	d314      	bcc.n	8014778 <_strtol_l.isra.0+0xc0>
 801474e:	d101      	bne.n	8014754 <_strtol_l.isra.0+0x9c>
 8014750:	45a2      	cmp	sl, r4
 8014752:	db11      	blt.n	8014778 <_strtol_l.isra.0+0xc0>
 8014754:	fb00 4003 	mla	r0, r0, r3, r4
 8014758:	2201      	movs	r2, #1
 801475a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801475e:	e7eb      	b.n	8014738 <_strtol_l.isra.0+0x80>
 8014760:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014764:	2f19      	cmp	r7, #25
 8014766:	d801      	bhi.n	801476c <_strtol_l.isra.0+0xb4>
 8014768:	3c37      	subs	r4, #55	@ 0x37
 801476a:	e7ea      	b.n	8014742 <_strtol_l.isra.0+0x8a>
 801476c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014770:	2f19      	cmp	r7, #25
 8014772:	d804      	bhi.n	801477e <_strtol_l.isra.0+0xc6>
 8014774:	3c57      	subs	r4, #87	@ 0x57
 8014776:	e7e4      	b.n	8014742 <_strtol_l.isra.0+0x8a>
 8014778:	f04f 32ff 	mov.w	r2, #4294967295
 801477c:	e7ed      	b.n	801475a <_strtol_l.isra.0+0xa2>
 801477e:	1c53      	adds	r3, r2, #1
 8014780:	d108      	bne.n	8014794 <_strtol_l.isra.0+0xdc>
 8014782:	2322      	movs	r3, #34	@ 0x22
 8014784:	f8ce 3000 	str.w	r3, [lr]
 8014788:	4660      	mov	r0, ip
 801478a:	f1b8 0f00 	cmp.w	r8, #0
 801478e:	d0a0      	beq.n	80146d2 <_strtol_l.isra.0+0x1a>
 8014790:	1e69      	subs	r1, r5, #1
 8014792:	e006      	b.n	80147a2 <_strtol_l.isra.0+0xea>
 8014794:	b106      	cbz	r6, 8014798 <_strtol_l.isra.0+0xe0>
 8014796:	4240      	negs	r0, r0
 8014798:	f1b8 0f00 	cmp.w	r8, #0
 801479c:	d099      	beq.n	80146d2 <_strtol_l.isra.0+0x1a>
 801479e:	2a00      	cmp	r2, #0
 80147a0:	d1f6      	bne.n	8014790 <_strtol_l.isra.0+0xd8>
 80147a2:	f8c8 1000 	str.w	r1, [r8]
 80147a6:	e794      	b.n	80146d2 <_strtol_l.isra.0+0x1a>
 80147a8:	08016279 	.word	0x08016279

080147ac <_strtol_r>:
 80147ac:	f7ff bf84 	b.w	80146b8 <_strtol_l.isra.0>

080147b0 <__ssputs_r>:
 80147b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147b4:	688e      	ldr	r6, [r1, #8]
 80147b6:	461f      	mov	r7, r3
 80147b8:	42be      	cmp	r6, r7
 80147ba:	680b      	ldr	r3, [r1, #0]
 80147bc:	4682      	mov	sl, r0
 80147be:	460c      	mov	r4, r1
 80147c0:	4690      	mov	r8, r2
 80147c2:	d82d      	bhi.n	8014820 <__ssputs_r+0x70>
 80147c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80147c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80147cc:	d026      	beq.n	801481c <__ssputs_r+0x6c>
 80147ce:	6965      	ldr	r5, [r4, #20]
 80147d0:	6909      	ldr	r1, [r1, #16]
 80147d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147d6:	eba3 0901 	sub.w	r9, r3, r1
 80147da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80147de:	1c7b      	adds	r3, r7, #1
 80147e0:	444b      	add	r3, r9
 80147e2:	106d      	asrs	r5, r5, #1
 80147e4:	429d      	cmp	r5, r3
 80147e6:	bf38      	it	cc
 80147e8:	461d      	movcc	r5, r3
 80147ea:	0553      	lsls	r3, r2, #21
 80147ec:	d527      	bpl.n	801483e <__ssputs_r+0x8e>
 80147ee:	4629      	mov	r1, r5
 80147f0:	f7fe fc74 	bl	80130dc <_malloc_r>
 80147f4:	4606      	mov	r6, r0
 80147f6:	b360      	cbz	r0, 8014852 <__ssputs_r+0xa2>
 80147f8:	6921      	ldr	r1, [r4, #16]
 80147fa:	464a      	mov	r2, r9
 80147fc:	f7fd fdfd 	bl	80123fa <memcpy>
 8014800:	89a3      	ldrh	r3, [r4, #12]
 8014802:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801480a:	81a3      	strh	r3, [r4, #12]
 801480c:	6126      	str	r6, [r4, #16]
 801480e:	6165      	str	r5, [r4, #20]
 8014810:	444e      	add	r6, r9
 8014812:	eba5 0509 	sub.w	r5, r5, r9
 8014816:	6026      	str	r6, [r4, #0]
 8014818:	60a5      	str	r5, [r4, #8]
 801481a:	463e      	mov	r6, r7
 801481c:	42be      	cmp	r6, r7
 801481e:	d900      	bls.n	8014822 <__ssputs_r+0x72>
 8014820:	463e      	mov	r6, r7
 8014822:	6820      	ldr	r0, [r4, #0]
 8014824:	4632      	mov	r2, r6
 8014826:	4641      	mov	r1, r8
 8014828:	f000 fb9e 	bl	8014f68 <memmove>
 801482c:	68a3      	ldr	r3, [r4, #8]
 801482e:	1b9b      	subs	r3, r3, r6
 8014830:	60a3      	str	r3, [r4, #8]
 8014832:	6823      	ldr	r3, [r4, #0]
 8014834:	4433      	add	r3, r6
 8014836:	6023      	str	r3, [r4, #0]
 8014838:	2000      	movs	r0, #0
 801483a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801483e:	462a      	mov	r2, r5
 8014840:	f000 ff77 	bl	8015732 <_realloc_r>
 8014844:	4606      	mov	r6, r0
 8014846:	2800      	cmp	r0, #0
 8014848:	d1e0      	bne.n	801480c <__ssputs_r+0x5c>
 801484a:	6921      	ldr	r1, [r4, #16]
 801484c:	4650      	mov	r0, sl
 801484e:	f7fe fbd1 	bl	8012ff4 <_free_r>
 8014852:	230c      	movs	r3, #12
 8014854:	f8ca 3000 	str.w	r3, [sl]
 8014858:	89a3      	ldrh	r3, [r4, #12]
 801485a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801485e:	81a3      	strh	r3, [r4, #12]
 8014860:	f04f 30ff 	mov.w	r0, #4294967295
 8014864:	e7e9      	b.n	801483a <__ssputs_r+0x8a>
	...

08014868 <_svfiprintf_r>:
 8014868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801486c:	4698      	mov	r8, r3
 801486e:	898b      	ldrh	r3, [r1, #12]
 8014870:	061b      	lsls	r3, r3, #24
 8014872:	b09d      	sub	sp, #116	@ 0x74
 8014874:	4607      	mov	r7, r0
 8014876:	460d      	mov	r5, r1
 8014878:	4614      	mov	r4, r2
 801487a:	d510      	bpl.n	801489e <_svfiprintf_r+0x36>
 801487c:	690b      	ldr	r3, [r1, #16]
 801487e:	b973      	cbnz	r3, 801489e <_svfiprintf_r+0x36>
 8014880:	2140      	movs	r1, #64	@ 0x40
 8014882:	f7fe fc2b 	bl	80130dc <_malloc_r>
 8014886:	6028      	str	r0, [r5, #0]
 8014888:	6128      	str	r0, [r5, #16]
 801488a:	b930      	cbnz	r0, 801489a <_svfiprintf_r+0x32>
 801488c:	230c      	movs	r3, #12
 801488e:	603b      	str	r3, [r7, #0]
 8014890:	f04f 30ff 	mov.w	r0, #4294967295
 8014894:	b01d      	add	sp, #116	@ 0x74
 8014896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489a:	2340      	movs	r3, #64	@ 0x40
 801489c:	616b      	str	r3, [r5, #20]
 801489e:	2300      	movs	r3, #0
 80148a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80148a2:	2320      	movs	r3, #32
 80148a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80148a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80148ac:	2330      	movs	r3, #48	@ 0x30
 80148ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014a4c <_svfiprintf_r+0x1e4>
 80148b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80148b6:	f04f 0901 	mov.w	r9, #1
 80148ba:	4623      	mov	r3, r4
 80148bc:	469a      	mov	sl, r3
 80148be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148c2:	b10a      	cbz	r2, 80148c8 <_svfiprintf_r+0x60>
 80148c4:	2a25      	cmp	r2, #37	@ 0x25
 80148c6:	d1f9      	bne.n	80148bc <_svfiprintf_r+0x54>
 80148c8:	ebba 0b04 	subs.w	fp, sl, r4
 80148cc:	d00b      	beq.n	80148e6 <_svfiprintf_r+0x7e>
 80148ce:	465b      	mov	r3, fp
 80148d0:	4622      	mov	r2, r4
 80148d2:	4629      	mov	r1, r5
 80148d4:	4638      	mov	r0, r7
 80148d6:	f7ff ff6b 	bl	80147b0 <__ssputs_r>
 80148da:	3001      	adds	r0, #1
 80148dc:	f000 80a7 	beq.w	8014a2e <_svfiprintf_r+0x1c6>
 80148e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80148e2:	445a      	add	r2, fp
 80148e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80148e6:	f89a 3000 	ldrb.w	r3, [sl]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	f000 809f 	beq.w	8014a2e <_svfiprintf_r+0x1c6>
 80148f0:	2300      	movs	r3, #0
 80148f2:	f04f 32ff 	mov.w	r2, #4294967295
 80148f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148fa:	f10a 0a01 	add.w	sl, sl, #1
 80148fe:	9304      	str	r3, [sp, #16]
 8014900:	9307      	str	r3, [sp, #28]
 8014902:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014906:	931a      	str	r3, [sp, #104]	@ 0x68
 8014908:	4654      	mov	r4, sl
 801490a:	2205      	movs	r2, #5
 801490c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014910:	484e      	ldr	r0, [pc, #312]	@ (8014a4c <_svfiprintf_r+0x1e4>)
 8014912:	f7eb fce5 	bl	80002e0 <memchr>
 8014916:	9a04      	ldr	r2, [sp, #16]
 8014918:	b9d8      	cbnz	r0, 8014952 <_svfiprintf_r+0xea>
 801491a:	06d0      	lsls	r0, r2, #27
 801491c:	bf44      	itt	mi
 801491e:	2320      	movmi	r3, #32
 8014920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014924:	0711      	lsls	r1, r2, #28
 8014926:	bf44      	itt	mi
 8014928:	232b      	movmi	r3, #43	@ 0x2b
 801492a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801492e:	f89a 3000 	ldrb.w	r3, [sl]
 8014932:	2b2a      	cmp	r3, #42	@ 0x2a
 8014934:	d015      	beq.n	8014962 <_svfiprintf_r+0xfa>
 8014936:	9a07      	ldr	r2, [sp, #28]
 8014938:	4654      	mov	r4, sl
 801493a:	2000      	movs	r0, #0
 801493c:	f04f 0c0a 	mov.w	ip, #10
 8014940:	4621      	mov	r1, r4
 8014942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014946:	3b30      	subs	r3, #48	@ 0x30
 8014948:	2b09      	cmp	r3, #9
 801494a:	d94b      	bls.n	80149e4 <_svfiprintf_r+0x17c>
 801494c:	b1b0      	cbz	r0, 801497c <_svfiprintf_r+0x114>
 801494e:	9207      	str	r2, [sp, #28]
 8014950:	e014      	b.n	801497c <_svfiprintf_r+0x114>
 8014952:	eba0 0308 	sub.w	r3, r0, r8
 8014956:	fa09 f303 	lsl.w	r3, r9, r3
 801495a:	4313      	orrs	r3, r2
 801495c:	9304      	str	r3, [sp, #16]
 801495e:	46a2      	mov	sl, r4
 8014960:	e7d2      	b.n	8014908 <_svfiprintf_r+0xa0>
 8014962:	9b03      	ldr	r3, [sp, #12]
 8014964:	1d19      	adds	r1, r3, #4
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	9103      	str	r1, [sp, #12]
 801496a:	2b00      	cmp	r3, #0
 801496c:	bfbb      	ittet	lt
 801496e:	425b      	neglt	r3, r3
 8014970:	f042 0202 	orrlt.w	r2, r2, #2
 8014974:	9307      	strge	r3, [sp, #28]
 8014976:	9307      	strlt	r3, [sp, #28]
 8014978:	bfb8      	it	lt
 801497a:	9204      	strlt	r2, [sp, #16]
 801497c:	7823      	ldrb	r3, [r4, #0]
 801497e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014980:	d10a      	bne.n	8014998 <_svfiprintf_r+0x130>
 8014982:	7863      	ldrb	r3, [r4, #1]
 8014984:	2b2a      	cmp	r3, #42	@ 0x2a
 8014986:	d132      	bne.n	80149ee <_svfiprintf_r+0x186>
 8014988:	9b03      	ldr	r3, [sp, #12]
 801498a:	1d1a      	adds	r2, r3, #4
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	9203      	str	r2, [sp, #12]
 8014990:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014994:	3402      	adds	r4, #2
 8014996:	9305      	str	r3, [sp, #20]
 8014998:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014a5c <_svfiprintf_r+0x1f4>
 801499c:	7821      	ldrb	r1, [r4, #0]
 801499e:	2203      	movs	r2, #3
 80149a0:	4650      	mov	r0, sl
 80149a2:	f7eb fc9d 	bl	80002e0 <memchr>
 80149a6:	b138      	cbz	r0, 80149b8 <_svfiprintf_r+0x150>
 80149a8:	9b04      	ldr	r3, [sp, #16]
 80149aa:	eba0 000a 	sub.w	r0, r0, sl
 80149ae:	2240      	movs	r2, #64	@ 0x40
 80149b0:	4082      	lsls	r2, r0
 80149b2:	4313      	orrs	r3, r2
 80149b4:	3401      	adds	r4, #1
 80149b6:	9304      	str	r3, [sp, #16]
 80149b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149bc:	4824      	ldr	r0, [pc, #144]	@ (8014a50 <_svfiprintf_r+0x1e8>)
 80149be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80149c2:	2206      	movs	r2, #6
 80149c4:	f7eb fc8c 	bl	80002e0 <memchr>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	d036      	beq.n	8014a3a <_svfiprintf_r+0x1d2>
 80149cc:	4b21      	ldr	r3, [pc, #132]	@ (8014a54 <_svfiprintf_r+0x1ec>)
 80149ce:	bb1b      	cbnz	r3, 8014a18 <_svfiprintf_r+0x1b0>
 80149d0:	9b03      	ldr	r3, [sp, #12]
 80149d2:	3307      	adds	r3, #7
 80149d4:	f023 0307 	bic.w	r3, r3, #7
 80149d8:	3308      	adds	r3, #8
 80149da:	9303      	str	r3, [sp, #12]
 80149dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149de:	4433      	add	r3, r6
 80149e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80149e2:	e76a      	b.n	80148ba <_svfiprintf_r+0x52>
 80149e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80149e8:	460c      	mov	r4, r1
 80149ea:	2001      	movs	r0, #1
 80149ec:	e7a8      	b.n	8014940 <_svfiprintf_r+0xd8>
 80149ee:	2300      	movs	r3, #0
 80149f0:	3401      	adds	r4, #1
 80149f2:	9305      	str	r3, [sp, #20]
 80149f4:	4619      	mov	r1, r3
 80149f6:	f04f 0c0a 	mov.w	ip, #10
 80149fa:	4620      	mov	r0, r4
 80149fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a00:	3a30      	subs	r2, #48	@ 0x30
 8014a02:	2a09      	cmp	r2, #9
 8014a04:	d903      	bls.n	8014a0e <_svfiprintf_r+0x1a6>
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d0c6      	beq.n	8014998 <_svfiprintf_r+0x130>
 8014a0a:	9105      	str	r1, [sp, #20]
 8014a0c:	e7c4      	b.n	8014998 <_svfiprintf_r+0x130>
 8014a0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a12:	4604      	mov	r4, r0
 8014a14:	2301      	movs	r3, #1
 8014a16:	e7f0      	b.n	80149fa <_svfiprintf_r+0x192>
 8014a18:	ab03      	add	r3, sp, #12
 8014a1a:	9300      	str	r3, [sp, #0]
 8014a1c:	462a      	mov	r2, r5
 8014a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8014a58 <_svfiprintf_r+0x1f0>)
 8014a20:	a904      	add	r1, sp, #16
 8014a22:	4638      	mov	r0, r7
 8014a24:	f7fc fc54 	bl	80112d0 <_printf_float>
 8014a28:	1c42      	adds	r2, r0, #1
 8014a2a:	4606      	mov	r6, r0
 8014a2c:	d1d6      	bne.n	80149dc <_svfiprintf_r+0x174>
 8014a2e:	89ab      	ldrh	r3, [r5, #12]
 8014a30:	065b      	lsls	r3, r3, #25
 8014a32:	f53f af2d 	bmi.w	8014890 <_svfiprintf_r+0x28>
 8014a36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014a38:	e72c      	b.n	8014894 <_svfiprintf_r+0x2c>
 8014a3a:	ab03      	add	r3, sp, #12
 8014a3c:	9300      	str	r3, [sp, #0]
 8014a3e:	462a      	mov	r2, r5
 8014a40:	4b05      	ldr	r3, [pc, #20]	@ (8014a58 <_svfiprintf_r+0x1f0>)
 8014a42:	a904      	add	r1, sp, #16
 8014a44:	4638      	mov	r0, r7
 8014a46:	f7fc fecb 	bl	80117e0 <_printf_i>
 8014a4a:	e7ed      	b.n	8014a28 <_svfiprintf_r+0x1c0>
 8014a4c:	08016071 	.word	0x08016071
 8014a50:	0801607b 	.word	0x0801607b
 8014a54:	080112d1 	.word	0x080112d1
 8014a58:	080147b1 	.word	0x080147b1
 8014a5c:	08016077 	.word	0x08016077

08014a60 <__sfputc_r>:
 8014a60:	6893      	ldr	r3, [r2, #8]
 8014a62:	3b01      	subs	r3, #1
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	b410      	push	{r4}
 8014a68:	6093      	str	r3, [r2, #8]
 8014a6a:	da08      	bge.n	8014a7e <__sfputc_r+0x1e>
 8014a6c:	6994      	ldr	r4, [r2, #24]
 8014a6e:	42a3      	cmp	r3, r4
 8014a70:	db01      	blt.n	8014a76 <__sfputc_r+0x16>
 8014a72:	290a      	cmp	r1, #10
 8014a74:	d103      	bne.n	8014a7e <__sfputc_r+0x1e>
 8014a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a7a:	f7fd bbaa 	b.w	80121d2 <__swbuf_r>
 8014a7e:	6813      	ldr	r3, [r2, #0]
 8014a80:	1c58      	adds	r0, r3, #1
 8014a82:	6010      	str	r0, [r2, #0]
 8014a84:	7019      	strb	r1, [r3, #0]
 8014a86:	4608      	mov	r0, r1
 8014a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a8c:	4770      	bx	lr

08014a8e <__sfputs_r>:
 8014a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a90:	4606      	mov	r6, r0
 8014a92:	460f      	mov	r7, r1
 8014a94:	4614      	mov	r4, r2
 8014a96:	18d5      	adds	r5, r2, r3
 8014a98:	42ac      	cmp	r4, r5
 8014a9a:	d101      	bne.n	8014aa0 <__sfputs_r+0x12>
 8014a9c:	2000      	movs	r0, #0
 8014a9e:	e007      	b.n	8014ab0 <__sfputs_r+0x22>
 8014aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014aa4:	463a      	mov	r2, r7
 8014aa6:	4630      	mov	r0, r6
 8014aa8:	f7ff ffda 	bl	8014a60 <__sfputc_r>
 8014aac:	1c43      	adds	r3, r0, #1
 8014aae:	d1f3      	bne.n	8014a98 <__sfputs_r+0xa>
 8014ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ab4 <_vfiprintf_r>:
 8014ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab8:	460d      	mov	r5, r1
 8014aba:	b09d      	sub	sp, #116	@ 0x74
 8014abc:	4614      	mov	r4, r2
 8014abe:	4698      	mov	r8, r3
 8014ac0:	4606      	mov	r6, r0
 8014ac2:	b118      	cbz	r0, 8014acc <_vfiprintf_r+0x18>
 8014ac4:	6a03      	ldr	r3, [r0, #32]
 8014ac6:	b90b      	cbnz	r3, 8014acc <_vfiprintf_r+0x18>
 8014ac8:	f7fd fa3a 	bl	8011f40 <__sinit>
 8014acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ace:	07d9      	lsls	r1, r3, #31
 8014ad0:	d405      	bmi.n	8014ade <_vfiprintf_r+0x2a>
 8014ad2:	89ab      	ldrh	r3, [r5, #12]
 8014ad4:	059a      	lsls	r2, r3, #22
 8014ad6:	d402      	bmi.n	8014ade <_vfiprintf_r+0x2a>
 8014ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ada:	f7fd fc8c 	bl	80123f6 <__retarget_lock_acquire_recursive>
 8014ade:	89ab      	ldrh	r3, [r5, #12]
 8014ae0:	071b      	lsls	r3, r3, #28
 8014ae2:	d501      	bpl.n	8014ae8 <_vfiprintf_r+0x34>
 8014ae4:	692b      	ldr	r3, [r5, #16]
 8014ae6:	b99b      	cbnz	r3, 8014b10 <_vfiprintf_r+0x5c>
 8014ae8:	4629      	mov	r1, r5
 8014aea:	4630      	mov	r0, r6
 8014aec:	f7fd fbb0 	bl	8012250 <__swsetup_r>
 8014af0:	b170      	cbz	r0, 8014b10 <_vfiprintf_r+0x5c>
 8014af2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014af4:	07dc      	lsls	r4, r3, #31
 8014af6:	d504      	bpl.n	8014b02 <_vfiprintf_r+0x4e>
 8014af8:	f04f 30ff 	mov.w	r0, #4294967295
 8014afc:	b01d      	add	sp, #116	@ 0x74
 8014afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b02:	89ab      	ldrh	r3, [r5, #12]
 8014b04:	0598      	lsls	r0, r3, #22
 8014b06:	d4f7      	bmi.n	8014af8 <_vfiprintf_r+0x44>
 8014b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b0a:	f7fd fc75 	bl	80123f8 <__retarget_lock_release_recursive>
 8014b0e:	e7f3      	b.n	8014af8 <_vfiprintf_r+0x44>
 8014b10:	2300      	movs	r3, #0
 8014b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b14:	2320      	movs	r3, #32
 8014b16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b1e:	2330      	movs	r3, #48	@ 0x30
 8014b20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014cd0 <_vfiprintf_r+0x21c>
 8014b24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b28:	f04f 0901 	mov.w	r9, #1
 8014b2c:	4623      	mov	r3, r4
 8014b2e:	469a      	mov	sl, r3
 8014b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b34:	b10a      	cbz	r2, 8014b3a <_vfiprintf_r+0x86>
 8014b36:	2a25      	cmp	r2, #37	@ 0x25
 8014b38:	d1f9      	bne.n	8014b2e <_vfiprintf_r+0x7a>
 8014b3a:	ebba 0b04 	subs.w	fp, sl, r4
 8014b3e:	d00b      	beq.n	8014b58 <_vfiprintf_r+0xa4>
 8014b40:	465b      	mov	r3, fp
 8014b42:	4622      	mov	r2, r4
 8014b44:	4629      	mov	r1, r5
 8014b46:	4630      	mov	r0, r6
 8014b48:	f7ff ffa1 	bl	8014a8e <__sfputs_r>
 8014b4c:	3001      	adds	r0, #1
 8014b4e:	f000 80a7 	beq.w	8014ca0 <_vfiprintf_r+0x1ec>
 8014b52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b54:	445a      	add	r2, fp
 8014b56:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b58:	f89a 3000 	ldrb.w	r3, [sl]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	f000 809f 	beq.w	8014ca0 <_vfiprintf_r+0x1ec>
 8014b62:	2300      	movs	r3, #0
 8014b64:	f04f 32ff 	mov.w	r2, #4294967295
 8014b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b6c:	f10a 0a01 	add.w	sl, sl, #1
 8014b70:	9304      	str	r3, [sp, #16]
 8014b72:	9307      	str	r3, [sp, #28]
 8014b74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b78:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b7a:	4654      	mov	r4, sl
 8014b7c:	2205      	movs	r2, #5
 8014b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b82:	4853      	ldr	r0, [pc, #332]	@ (8014cd0 <_vfiprintf_r+0x21c>)
 8014b84:	f7eb fbac 	bl	80002e0 <memchr>
 8014b88:	9a04      	ldr	r2, [sp, #16]
 8014b8a:	b9d8      	cbnz	r0, 8014bc4 <_vfiprintf_r+0x110>
 8014b8c:	06d1      	lsls	r1, r2, #27
 8014b8e:	bf44      	itt	mi
 8014b90:	2320      	movmi	r3, #32
 8014b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b96:	0713      	lsls	r3, r2, #28
 8014b98:	bf44      	itt	mi
 8014b9a:	232b      	movmi	r3, #43	@ 0x2b
 8014b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ba6:	d015      	beq.n	8014bd4 <_vfiprintf_r+0x120>
 8014ba8:	9a07      	ldr	r2, [sp, #28]
 8014baa:	4654      	mov	r4, sl
 8014bac:	2000      	movs	r0, #0
 8014bae:	f04f 0c0a 	mov.w	ip, #10
 8014bb2:	4621      	mov	r1, r4
 8014bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bb8:	3b30      	subs	r3, #48	@ 0x30
 8014bba:	2b09      	cmp	r3, #9
 8014bbc:	d94b      	bls.n	8014c56 <_vfiprintf_r+0x1a2>
 8014bbe:	b1b0      	cbz	r0, 8014bee <_vfiprintf_r+0x13a>
 8014bc0:	9207      	str	r2, [sp, #28]
 8014bc2:	e014      	b.n	8014bee <_vfiprintf_r+0x13a>
 8014bc4:	eba0 0308 	sub.w	r3, r0, r8
 8014bc8:	fa09 f303 	lsl.w	r3, r9, r3
 8014bcc:	4313      	orrs	r3, r2
 8014bce:	9304      	str	r3, [sp, #16]
 8014bd0:	46a2      	mov	sl, r4
 8014bd2:	e7d2      	b.n	8014b7a <_vfiprintf_r+0xc6>
 8014bd4:	9b03      	ldr	r3, [sp, #12]
 8014bd6:	1d19      	adds	r1, r3, #4
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	9103      	str	r1, [sp, #12]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	bfbb      	ittet	lt
 8014be0:	425b      	neglt	r3, r3
 8014be2:	f042 0202 	orrlt.w	r2, r2, #2
 8014be6:	9307      	strge	r3, [sp, #28]
 8014be8:	9307      	strlt	r3, [sp, #28]
 8014bea:	bfb8      	it	lt
 8014bec:	9204      	strlt	r2, [sp, #16]
 8014bee:	7823      	ldrb	r3, [r4, #0]
 8014bf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8014bf2:	d10a      	bne.n	8014c0a <_vfiprintf_r+0x156>
 8014bf4:	7863      	ldrb	r3, [r4, #1]
 8014bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bf8:	d132      	bne.n	8014c60 <_vfiprintf_r+0x1ac>
 8014bfa:	9b03      	ldr	r3, [sp, #12]
 8014bfc:	1d1a      	adds	r2, r3, #4
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	9203      	str	r2, [sp, #12]
 8014c02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014c06:	3402      	adds	r4, #2
 8014c08:	9305      	str	r3, [sp, #20]
 8014c0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014ce0 <_vfiprintf_r+0x22c>
 8014c0e:	7821      	ldrb	r1, [r4, #0]
 8014c10:	2203      	movs	r2, #3
 8014c12:	4650      	mov	r0, sl
 8014c14:	f7eb fb64 	bl	80002e0 <memchr>
 8014c18:	b138      	cbz	r0, 8014c2a <_vfiprintf_r+0x176>
 8014c1a:	9b04      	ldr	r3, [sp, #16]
 8014c1c:	eba0 000a 	sub.w	r0, r0, sl
 8014c20:	2240      	movs	r2, #64	@ 0x40
 8014c22:	4082      	lsls	r2, r0
 8014c24:	4313      	orrs	r3, r2
 8014c26:	3401      	adds	r4, #1
 8014c28:	9304      	str	r3, [sp, #16]
 8014c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c2e:	4829      	ldr	r0, [pc, #164]	@ (8014cd4 <_vfiprintf_r+0x220>)
 8014c30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c34:	2206      	movs	r2, #6
 8014c36:	f7eb fb53 	bl	80002e0 <memchr>
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	d03f      	beq.n	8014cbe <_vfiprintf_r+0x20a>
 8014c3e:	4b26      	ldr	r3, [pc, #152]	@ (8014cd8 <_vfiprintf_r+0x224>)
 8014c40:	bb1b      	cbnz	r3, 8014c8a <_vfiprintf_r+0x1d6>
 8014c42:	9b03      	ldr	r3, [sp, #12]
 8014c44:	3307      	adds	r3, #7
 8014c46:	f023 0307 	bic.w	r3, r3, #7
 8014c4a:	3308      	adds	r3, #8
 8014c4c:	9303      	str	r3, [sp, #12]
 8014c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c50:	443b      	add	r3, r7
 8014c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c54:	e76a      	b.n	8014b2c <_vfiprintf_r+0x78>
 8014c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c5a:	460c      	mov	r4, r1
 8014c5c:	2001      	movs	r0, #1
 8014c5e:	e7a8      	b.n	8014bb2 <_vfiprintf_r+0xfe>
 8014c60:	2300      	movs	r3, #0
 8014c62:	3401      	adds	r4, #1
 8014c64:	9305      	str	r3, [sp, #20]
 8014c66:	4619      	mov	r1, r3
 8014c68:	f04f 0c0a 	mov.w	ip, #10
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c72:	3a30      	subs	r2, #48	@ 0x30
 8014c74:	2a09      	cmp	r2, #9
 8014c76:	d903      	bls.n	8014c80 <_vfiprintf_r+0x1cc>
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d0c6      	beq.n	8014c0a <_vfiprintf_r+0x156>
 8014c7c:	9105      	str	r1, [sp, #20]
 8014c7e:	e7c4      	b.n	8014c0a <_vfiprintf_r+0x156>
 8014c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c84:	4604      	mov	r4, r0
 8014c86:	2301      	movs	r3, #1
 8014c88:	e7f0      	b.n	8014c6c <_vfiprintf_r+0x1b8>
 8014c8a:	ab03      	add	r3, sp, #12
 8014c8c:	9300      	str	r3, [sp, #0]
 8014c8e:	462a      	mov	r2, r5
 8014c90:	4b12      	ldr	r3, [pc, #72]	@ (8014cdc <_vfiprintf_r+0x228>)
 8014c92:	a904      	add	r1, sp, #16
 8014c94:	4630      	mov	r0, r6
 8014c96:	f7fc fb1b 	bl	80112d0 <_printf_float>
 8014c9a:	4607      	mov	r7, r0
 8014c9c:	1c78      	adds	r0, r7, #1
 8014c9e:	d1d6      	bne.n	8014c4e <_vfiprintf_r+0x19a>
 8014ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ca2:	07d9      	lsls	r1, r3, #31
 8014ca4:	d405      	bmi.n	8014cb2 <_vfiprintf_r+0x1fe>
 8014ca6:	89ab      	ldrh	r3, [r5, #12]
 8014ca8:	059a      	lsls	r2, r3, #22
 8014caa:	d402      	bmi.n	8014cb2 <_vfiprintf_r+0x1fe>
 8014cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014cae:	f7fd fba3 	bl	80123f8 <__retarget_lock_release_recursive>
 8014cb2:	89ab      	ldrh	r3, [r5, #12]
 8014cb4:	065b      	lsls	r3, r3, #25
 8014cb6:	f53f af1f 	bmi.w	8014af8 <_vfiprintf_r+0x44>
 8014cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014cbc:	e71e      	b.n	8014afc <_vfiprintf_r+0x48>
 8014cbe:	ab03      	add	r3, sp, #12
 8014cc0:	9300      	str	r3, [sp, #0]
 8014cc2:	462a      	mov	r2, r5
 8014cc4:	4b05      	ldr	r3, [pc, #20]	@ (8014cdc <_vfiprintf_r+0x228>)
 8014cc6:	a904      	add	r1, sp, #16
 8014cc8:	4630      	mov	r0, r6
 8014cca:	f7fc fd89 	bl	80117e0 <_printf_i>
 8014cce:	e7e4      	b.n	8014c9a <_vfiprintf_r+0x1e6>
 8014cd0:	08016071 	.word	0x08016071
 8014cd4:	0801607b 	.word	0x0801607b
 8014cd8:	080112d1 	.word	0x080112d1
 8014cdc:	08014a8f 	.word	0x08014a8f
 8014ce0:	08016077 	.word	0x08016077

08014ce4 <__sflush_r>:
 8014ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cec:	0716      	lsls	r6, r2, #28
 8014cee:	4605      	mov	r5, r0
 8014cf0:	460c      	mov	r4, r1
 8014cf2:	d454      	bmi.n	8014d9e <__sflush_r+0xba>
 8014cf4:	684b      	ldr	r3, [r1, #4]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	dc02      	bgt.n	8014d00 <__sflush_r+0x1c>
 8014cfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	dd48      	ble.n	8014d92 <__sflush_r+0xae>
 8014d00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d02:	2e00      	cmp	r6, #0
 8014d04:	d045      	beq.n	8014d92 <__sflush_r+0xae>
 8014d06:	2300      	movs	r3, #0
 8014d08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014d0c:	682f      	ldr	r7, [r5, #0]
 8014d0e:	6a21      	ldr	r1, [r4, #32]
 8014d10:	602b      	str	r3, [r5, #0]
 8014d12:	d030      	beq.n	8014d76 <__sflush_r+0x92>
 8014d14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014d16:	89a3      	ldrh	r3, [r4, #12]
 8014d18:	0759      	lsls	r1, r3, #29
 8014d1a:	d505      	bpl.n	8014d28 <__sflush_r+0x44>
 8014d1c:	6863      	ldr	r3, [r4, #4]
 8014d1e:	1ad2      	subs	r2, r2, r3
 8014d20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014d22:	b10b      	cbz	r3, 8014d28 <__sflush_r+0x44>
 8014d24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014d26:	1ad2      	subs	r2, r2, r3
 8014d28:	2300      	movs	r3, #0
 8014d2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d2c:	6a21      	ldr	r1, [r4, #32]
 8014d2e:	4628      	mov	r0, r5
 8014d30:	47b0      	blx	r6
 8014d32:	1c43      	adds	r3, r0, #1
 8014d34:	89a3      	ldrh	r3, [r4, #12]
 8014d36:	d106      	bne.n	8014d46 <__sflush_r+0x62>
 8014d38:	6829      	ldr	r1, [r5, #0]
 8014d3a:	291d      	cmp	r1, #29
 8014d3c:	d82b      	bhi.n	8014d96 <__sflush_r+0xb2>
 8014d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8014de8 <__sflush_r+0x104>)
 8014d40:	40ca      	lsrs	r2, r1
 8014d42:	07d6      	lsls	r6, r2, #31
 8014d44:	d527      	bpl.n	8014d96 <__sflush_r+0xb2>
 8014d46:	2200      	movs	r2, #0
 8014d48:	6062      	str	r2, [r4, #4]
 8014d4a:	04d9      	lsls	r1, r3, #19
 8014d4c:	6922      	ldr	r2, [r4, #16]
 8014d4e:	6022      	str	r2, [r4, #0]
 8014d50:	d504      	bpl.n	8014d5c <__sflush_r+0x78>
 8014d52:	1c42      	adds	r2, r0, #1
 8014d54:	d101      	bne.n	8014d5a <__sflush_r+0x76>
 8014d56:	682b      	ldr	r3, [r5, #0]
 8014d58:	b903      	cbnz	r3, 8014d5c <__sflush_r+0x78>
 8014d5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d5e:	602f      	str	r7, [r5, #0]
 8014d60:	b1b9      	cbz	r1, 8014d92 <__sflush_r+0xae>
 8014d62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d66:	4299      	cmp	r1, r3
 8014d68:	d002      	beq.n	8014d70 <__sflush_r+0x8c>
 8014d6a:	4628      	mov	r0, r5
 8014d6c:	f7fe f942 	bl	8012ff4 <_free_r>
 8014d70:	2300      	movs	r3, #0
 8014d72:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d74:	e00d      	b.n	8014d92 <__sflush_r+0xae>
 8014d76:	2301      	movs	r3, #1
 8014d78:	4628      	mov	r0, r5
 8014d7a:	47b0      	blx	r6
 8014d7c:	4602      	mov	r2, r0
 8014d7e:	1c50      	adds	r0, r2, #1
 8014d80:	d1c9      	bne.n	8014d16 <__sflush_r+0x32>
 8014d82:	682b      	ldr	r3, [r5, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d0c6      	beq.n	8014d16 <__sflush_r+0x32>
 8014d88:	2b1d      	cmp	r3, #29
 8014d8a:	d001      	beq.n	8014d90 <__sflush_r+0xac>
 8014d8c:	2b16      	cmp	r3, #22
 8014d8e:	d11e      	bne.n	8014dce <__sflush_r+0xea>
 8014d90:	602f      	str	r7, [r5, #0]
 8014d92:	2000      	movs	r0, #0
 8014d94:	e022      	b.n	8014ddc <__sflush_r+0xf8>
 8014d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d9a:	b21b      	sxth	r3, r3
 8014d9c:	e01b      	b.n	8014dd6 <__sflush_r+0xf2>
 8014d9e:	690f      	ldr	r7, [r1, #16]
 8014da0:	2f00      	cmp	r7, #0
 8014da2:	d0f6      	beq.n	8014d92 <__sflush_r+0xae>
 8014da4:	0793      	lsls	r3, r2, #30
 8014da6:	680e      	ldr	r6, [r1, #0]
 8014da8:	bf08      	it	eq
 8014daa:	694b      	ldreq	r3, [r1, #20]
 8014dac:	600f      	str	r7, [r1, #0]
 8014dae:	bf18      	it	ne
 8014db0:	2300      	movne	r3, #0
 8014db2:	eba6 0807 	sub.w	r8, r6, r7
 8014db6:	608b      	str	r3, [r1, #8]
 8014db8:	f1b8 0f00 	cmp.w	r8, #0
 8014dbc:	dde9      	ble.n	8014d92 <__sflush_r+0xae>
 8014dbe:	6a21      	ldr	r1, [r4, #32]
 8014dc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014dc2:	4643      	mov	r3, r8
 8014dc4:	463a      	mov	r2, r7
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	47b0      	blx	r6
 8014dca:	2800      	cmp	r0, #0
 8014dcc:	dc08      	bgt.n	8014de0 <__sflush_r+0xfc>
 8014dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014dd6:	81a3      	strh	r3, [r4, #12]
 8014dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8014ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014de0:	4407      	add	r7, r0
 8014de2:	eba8 0800 	sub.w	r8, r8, r0
 8014de6:	e7e7      	b.n	8014db8 <__sflush_r+0xd4>
 8014de8:	20400001 	.word	0x20400001

08014dec <_fflush_r>:
 8014dec:	b538      	push	{r3, r4, r5, lr}
 8014dee:	690b      	ldr	r3, [r1, #16]
 8014df0:	4605      	mov	r5, r0
 8014df2:	460c      	mov	r4, r1
 8014df4:	b913      	cbnz	r3, 8014dfc <_fflush_r+0x10>
 8014df6:	2500      	movs	r5, #0
 8014df8:	4628      	mov	r0, r5
 8014dfa:	bd38      	pop	{r3, r4, r5, pc}
 8014dfc:	b118      	cbz	r0, 8014e06 <_fflush_r+0x1a>
 8014dfe:	6a03      	ldr	r3, [r0, #32]
 8014e00:	b90b      	cbnz	r3, 8014e06 <_fflush_r+0x1a>
 8014e02:	f7fd f89d 	bl	8011f40 <__sinit>
 8014e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d0f3      	beq.n	8014df6 <_fflush_r+0xa>
 8014e0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014e10:	07d0      	lsls	r0, r2, #31
 8014e12:	d404      	bmi.n	8014e1e <_fflush_r+0x32>
 8014e14:	0599      	lsls	r1, r3, #22
 8014e16:	d402      	bmi.n	8014e1e <_fflush_r+0x32>
 8014e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e1a:	f7fd faec 	bl	80123f6 <__retarget_lock_acquire_recursive>
 8014e1e:	4628      	mov	r0, r5
 8014e20:	4621      	mov	r1, r4
 8014e22:	f7ff ff5f 	bl	8014ce4 <__sflush_r>
 8014e26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e28:	07da      	lsls	r2, r3, #31
 8014e2a:	4605      	mov	r5, r0
 8014e2c:	d4e4      	bmi.n	8014df8 <_fflush_r+0xc>
 8014e2e:	89a3      	ldrh	r3, [r4, #12]
 8014e30:	059b      	lsls	r3, r3, #22
 8014e32:	d4e1      	bmi.n	8014df8 <_fflush_r+0xc>
 8014e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e36:	f7fd fadf 	bl	80123f8 <__retarget_lock_release_recursive>
 8014e3a:	e7dd      	b.n	8014df8 <_fflush_r+0xc>

08014e3c <__swhatbuf_r>:
 8014e3c:	b570      	push	{r4, r5, r6, lr}
 8014e3e:	460c      	mov	r4, r1
 8014e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e44:	2900      	cmp	r1, #0
 8014e46:	b096      	sub	sp, #88	@ 0x58
 8014e48:	4615      	mov	r5, r2
 8014e4a:	461e      	mov	r6, r3
 8014e4c:	da0d      	bge.n	8014e6a <__swhatbuf_r+0x2e>
 8014e4e:	89a3      	ldrh	r3, [r4, #12]
 8014e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e54:	f04f 0100 	mov.w	r1, #0
 8014e58:	bf14      	ite	ne
 8014e5a:	2340      	movne	r3, #64	@ 0x40
 8014e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e60:	2000      	movs	r0, #0
 8014e62:	6031      	str	r1, [r6, #0]
 8014e64:	602b      	str	r3, [r5, #0]
 8014e66:	b016      	add	sp, #88	@ 0x58
 8014e68:	bd70      	pop	{r4, r5, r6, pc}
 8014e6a:	466a      	mov	r2, sp
 8014e6c:	f000 f8a8 	bl	8014fc0 <_fstat_r>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	dbec      	blt.n	8014e4e <__swhatbuf_r+0x12>
 8014e74:	9901      	ldr	r1, [sp, #4]
 8014e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e7e:	4259      	negs	r1, r3
 8014e80:	4159      	adcs	r1, r3
 8014e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e86:	e7eb      	b.n	8014e60 <__swhatbuf_r+0x24>

08014e88 <__smakebuf_r>:
 8014e88:	898b      	ldrh	r3, [r1, #12]
 8014e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e8c:	079d      	lsls	r5, r3, #30
 8014e8e:	4606      	mov	r6, r0
 8014e90:	460c      	mov	r4, r1
 8014e92:	d507      	bpl.n	8014ea4 <__smakebuf_r+0x1c>
 8014e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e98:	6023      	str	r3, [r4, #0]
 8014e9a:	6123      	str	r3, [r4, #16]
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	6163      	str	r3, [r4, #20]
 8014ea0:	b003      	add	sp, #12
 8014ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ea4:	ab01      	add	r3, sp, #4
 8014ea6:	466a      	mov	r2, sp
 8014ea8:	f7ff ffc8 	bl	8014e3c <__swhatbuf_r>
 8014eac:	9f00      	ldr	r7, [sp, #0]
 8014eae:	4605      	mov	r5, r0
 8014eb0:	4639      	mov	r1, r7
 8014eb2:	4630      	mov	r0, r6
 8014eb4:	f7fe f912 	bl	80130dc <_malloc_r>
 8014eb8:	b948      	cbnz	r0, 8014ece <__smakebuf_r+0x46>
 8014eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ebe:	059a      	lsls	r2, r3, #22
 8014ec0:	d4ee      	bmi.n	8014ea0 <__smakebuf_r+0x18>
 8014ec2:	f023 0303 	bic.w	r3, r3, #3
 8014ec6:	f043 0302 	orr.w	r3, r3, #2
 8014eca:	81a3      	strh	r3, [r4, #12]
 8014ecc:	e7e2      	b.n	8014e94 <__smakebuf_r+0xc>
 8014ece:	89a3      	ldrh	r3, [r4, #12]
 8014ed0:	6020      	str	r0, [r4, #0]
 8014ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ed6:	81a3      	strh	r3, [r4, #12]
 8014ed8:	9b01      	ldr	r3, [sp, #4]
 8014eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014ede:	b15b      	cbz	r3, 8014ef8 <__smakebuf_r+0x70>
 8014ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	f000 f87d 	bl	8014fe4 <_isatty_r>
 8014eea:	b128      	cbz	r0, 8014ef8 <__smakebuf_r+0x70>
 8014eec:	89a3      	ldrh	r3, [r4, #12]
 8014eee:	f023 0303 	bic.w	r3, r3, #3
 8014ef2:	f043 0301 	orr.w	r3, r3, #1
 8014ef6:	81a3      	strh	r3, [r4, #12]
 8014ef8:	89a3      	ldrh	r3, [r4, #12]
 8014efa:	431d      	orrs	r5, r3
 8014efc:	81a5      	strh	r5, [r4, #12]
 8014efe:	e7cf      	b.n	8014ea0 <__smakebuf_r+0x18>

08014f00 <_putc_r>:
 8014f00:	b570      	push	{r4, r5, r6, lr}
 8014f02:	460d      	mov	r5, r1
 8014f04:	4614      	mov	r4, r2
 8014f06:	4606      	mov	r6, r0
 8014f08:	b118      	cbz	r0, 8014f12 <_putc_r+0x12>
 8014f0a:	6a03      	ldr	r3, [r0, #32]
 8014f0c:	b90b      	cbnz	r3, 8014f12 <_putc_r+0x12>
 8014f0e:	f7fd f817 	bl	8011f40 <__sinit>
 8014f12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f14:	07d8      	lsls	r0, r3, #31
 8014f16:	d405      	bmi.n	8014f24 <_putc_r+0x24>
 8014f18:	89a3      	ldrh	r3, [r4, #12]
 8014f1a:	0599      	lsls	r1, r3, #22
 8014f1c:	d402      	bmi.n	8014f24 <_putc_r+0x24>
 8014f1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f20:	f7fd fa69 	bl	80123f6 <__retarget_lock_acquire_recursive>
 8014f24:	68a3      	ldr	r3, [r4, #8]
 8014f26:	3b01      	subs	r3, #1
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	60a3      	str	r3, [r4, #8]
 8014f2c:	da05      	bge.n	8014f3a <_putc_r+0x3a>
 8014f2e:	69a2      	ldr	r2, [r4, #24]
 8014f30:	4293      	cmp	r3, r2
 8014f32:	db12      	blt.n	8014f5a <_putc_r+0x5a>
 8014f34:	b2eb      	uxtb	r3, r5
 8014f36:	2b0a      	cmp	r3, #10
 8014f38:	d00f      	beq.n	8014f5a <_putc_r+0x5a>
 8014f3a:	6823      	ldr	r3, [r4, #0]
 8014f3c:	1c5a      	adds	r2, r3, #1
 8014f3e:	6022      	str	r2, [r4, #0]
 8014f40:	701d      	strb	r5, [r3, #0]
 8014f42:	b2ed      	uxtb	r5, r5
 8014f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f46:	07da      	lsls	r2, r3, #31
 8014f48:	d405      	bmi.n	8014f56 <_putc_r+0x56>
 8014f4a:	89a3      	ldrh	r3, [r4, #12]
 8014f4c:	059b      	lsls	r3, r3, #22
 8014f4e:	d402      	bmi.n	8014f56 <_putc_r+0x56>
 8014f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f52:	f7fd fa51 	bl	80123f8 <__retarget_lock_release_recursive>
 8014f56:	4628      	mov	r0, r5
 8014f58:	bd70      	pop	{r4, r5, r6, pc}
 8014f5a:	4629      	mov	r1, r5
 8014f5c:	4622      	mov	r2, r4
 8014f5e:	4630      	mov	r0, r6
 8014f60:	f7fd f937 	bl	80121d2 <__swbuf_r>
 8014f64:	4605      	mov	r5, r0
 8014f66:	e7ed      	b.n	8014f44 <_putc_r+0x44>

08014f68 <memmove>:
 8014f68:	4288      	cmp	r0, r1
 8014f6a:	b510      	push	{r4, lr}
 8014f6c:	eb01 0402 	add.w	r4, r1, r2
 8014f70:	d902      	bls.n	8014f78 <memmove+0x10>
 8014f72:	4284      	cmp	r4, r0
 8014f74:	4623      	mov	r3, r4
 8014f76:	d807      	bhi.n	8014f88 <memmove+0x20>
 8014f78:	1e43      	subs	r3, r0, #1
 8014f7a:	42a1      	cmp	r1, r4
 8014f7c:	d008      	beq.n	8014f90 <memmove+0x28>
 8014f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014f82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014f86:	e7f8      	b.n	8014f7a <memmove+0x12>
 8014f88:	4402      	add	r2, r0
 8014f8a:	4601      	mov	r1, r0
 8014f8c:	428a      	cmp	r2, r1
 8014f8e:	d100      	bne.n	8014f92 <memmove+0x2a>
 8014f90:	bd10      	pop	{r4, pc}
 8014f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014f9a:	e7f7      	b.n	8014f8c <memmove+0x24>

08014f9c <strncmp>:
 8014f9c:	b510      	push	{r4, lr}
 8014f9e:	b16a      	cbz	r2, 8014fbc <strncmp+0x20>
 8014fa0:	3901      	subs	r1, #1
 8014fa2:	1884      	adds	r4, r0, r2
 8014fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fa8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d103      	bne.n	8014fb8 <strncmp+0x1c>
 8014fb0:	42a0      	cmp	r0, r4
 8014fb2:	d001      	beq.n	8014fb8 <strncmp+0x1c>
 8014fb4:	2a00      	cmp	r2, #0
 8014fb6:	d1f5      	bne.n	8014fa4 <strncmp+0x8>
 8014fb8:	1ad0      	subs	r0, r2, r3
 8014fba:	bd10      	pop	{r4, pc}
 8014fbc:	4610      	mov	r0, r2
 8014fbe:	e7fc      	b.n	8014fba <strncmp+0x1e>

08014fc0 <_fstat_r>:
 8014fc0:	b538      	push	{r3, r4, r5, lr}
 8014fc2:	4d07      	ldr	r5, [pc, #28]	@ (8014fe0 <_fstat_r+0x20>)
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	4608      	mov	r0, r1
 8014fca:	4611      	mov	r1, r2
 8014fcc:	602b      	str	r3, [r5, #0]
 8014fce:	f7ee ffa5 	bl	8003f1c <_fstat>
 8014fd2:	1c43      	adds	r3, r0, #1
 8014fd4:	d102      	bne.n	8014fdc <_fstat_r+0x1c>
 8014fd6:	682b      	ldr	r3, [r5, #0]
 8014fd8:	b103      	cbz	r3, 8014fdc <_fstat_r+0x1c>
 8014fda:	6023      	str	r3, [r4, #0]
 8014fdc:	bd38      	pop	{r3, r4, r5, pc}
 8014fde:	bf00      	nop
 8014fe0:	24001640 	.word	0x24001640

08014fe4 <_isatty_r>:
 8014fe4:	b538      	push	{r3, r4, r5, lr}
 8014fe6:	4d06      	ldr	r5, [pc, #24]	@ (8015000 <_isatty_r+0x1c>)
 8014fe8:	2300      	movs	r3, #0
 8014fea:	4604      	mov	r4, r0
 8014fec:	4608      	mov	r0, r1
 8014fee:	602b      	str	r3, [r5, #0]
 8014ff0:	f7ee ffa4 	bl	8003f3c <_isatty>
 8014ff4:	1c43      	adds	r3, r0, #1
 8014ff6:	d102      	bne.n	8014ffe <_isatty_r+0x1a>
 8014ff8:	682b      	ldr	r3, [r5, #0]
 8014ffa:	b103      	cbz	r3, 8014ffe <_isatty_r+0x1a>
 8014ffc:	6023      	str	r3, [r4, #0]
 8014ffe:	bd38      	pop	{r3, r4, r5, pc}
 8015000:	24001640 	.word	0x24001640

08015004 <_sbrk_r>:
 8015004:	b538      	push	{r3, r4, r5, lr}
 8015006:	4d06      	ldr	r5, [pc, #24]	@ (8015020 <_sbrk_r+0x1c>)
 8015008:	2300      	movs	r3, #0
 801500a:	4604      	mov	r4, r0
 801500c:	4608      	mov	r0, r1
 801500e:	602b      	str	r3, [r5, #0]
 8015010:	f7ee ffac 	bl	8003f6c <_sbrk>
 8015014:	1c43      	adds	r3, r0, #1
 8015016:	d102      	bne.n	801501e <_sbrk_r+0x1a>
 8015018:	682b      	ldr	r3, [r5, #0]
 801501a:	b103      	cbz	r3, 801501e <_sbrk_r+0x1a>
 801501c:	6023      	str	r3, [r4, #0]
 801501e:	bd38      	pop	{r3, r4, r5, pc}
 8015020:	24001640 	.word	0x24001640
 8015024:	00000000 	.word	0x00000000

08015028 <nan>:
 8015028:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015030 <nan+0x8>
 801502c:	4770      	bx	lr
 801502e:	bf00      	nop
 8015030:	00000000 	.word	0x00000000
 8015034:	7ff80000 	.word	0x7ff80000

08015038 <__assert_func>:
 8015038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801503a:	4614      	mov	r4, r2
 801503c:	461a      	mov	r2, r3
 801503e:	4b09      	ldr	r3, [pc, #36]	@ (8015064 <__assert_func+0x2c>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	4605      	mov	r5, r0
 8015044:	68d8      	ldr	r0, [r3, #12]
 8015046:	b14c      	cbz	r4, 801505c <__assert_func+0x24>
 8015048:	4b07      	ldr	r3, [pc, #28]	@ (8015068 <__assert_func+0x30>)
 801504a:	9100      	str	r1, [sp, #0]
 801504c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015050:	4906      	ldr	r1, [pc, #24]	@ (801506c <__assert_func+0x34>)
 8015052:	462b      	mov	r3, r5
 8015054:	f000 fba8 	bl	80157a8 <fiprintf>
 8015058:	f000 fbb8 	bl	80157cc <abort>
 801505c:	4b04      	ldr	r3, [pc, #16]	@ (8015070 <__assert_func+0x38>)
 801505e:	461c      	mov	r4, r3
 8015060:	e7f3      	b.n	801504a <__assert_func+0x12>
 8015062:	bf00      	nop
 8015064:	24000034 	.word	0x24000034
 8015068:	0801608a 	.word	0x0801608a
 801506c:	08016097 	.word	0x08016097
 8015070:	080160c5 	.word	0x080160c5

08015074 <_calloc_r>:
 8015074:	b570      	push	{r4, r5, r6, lr}
 8015076:	fba1 5402 	umull	r5, r4, r1, r2
 801507a:	b934      	cbnz	r4, 801508a <_calloc_r+0x16>
 801507c:	4629      	mov	r1, r5
 801507e:	f7fe f82d 	bl	80130dc <_malloc_r>
 8015082:	4606      	mov	r6, r0
 8015084:	b928      	cbnz	r0, 8015092 <_calloc_r+0x1e>
 8015086:	4630      	mov	r0, r6
 8015088:	bd70      	pop	{r4, r5, r6, pc}
 801508a:	220c      	movs	r2, #12
 801508c:	6002      	str	r2, [r0, #0]
 801508e:	2600      	movs	r6, #0
 8015090:	e7f9      	b.n	8015086 <_calloc_r+0x12>
 8015092:	462a      	mov	r2, r5
 8015094:	4621      	mov	r1, r4
 8015096:	f7fd f931 	bl	80122fc <memset>
 801509a:	e7f4      	b.n	8015086 <_calloc_r+0x12>

0801509c <rshift>:
 801509c:	6903      	ldr	r3, [r0, #16]
 801509e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80150a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80150aa:	f100 0414 	add.w	r4, r0, #20
 80150ae:	dd45      	ble.n	801513c <rshift+0xa0>
 80150b0:	f011 011f 	ands.w	r1, r1, #31
 80150b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80150b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80150bc:	d10c      	bne.n	80150d8 <rshift+0x3c>
 80150be:	f100 0710 	add.w	r7, r0, #16
 80150c2:	4629      	mov	r1, r5
 80150c4:	42b1      	cmp	r1, r6
 80150c6:	d334      	bcc.n	8015132 <rshift+0x96>
 80150c8:	1a9b      	subs	r3, r3, r2
 80150ca:	009b      	lsls	r3, r3, #2
 80150cc:	1eea      	subs	r2, r5, #3
 80150ce:	4296      	cmp	r6, r2
 80150d0:	bf38      	it	cc
 80150d2:	2300      	movcc	r3, #0
 80150d4:	4423      	add	r3, r4
 80150d6:	e015      	b.n	8015104 <rshift+0x68>
 80150d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80150dc:	f1c1 0820 	rsb	r8, r1, #32
 80150e0:	40cf      	lsrs	r7, r1
 80150e2:	f105 0e04 	add.w	lr, r5, #4
 80150e6:	46a1      	mov	r9, r4
 80150e8:	4576      	cmp	r6, lr
 80150ea:	46f4      	mov	ip, lr
 80150ec:	d815      	bhi.n	801511a <rshift+0x7e>
 80150ee:	1a9a      	subs	r2, r3, r2
 80150f0:	0092      	lsls	r2, r2, #2
 80150f2:	3a04      	subs	r2, #4
 80150f4:	3501      	adds	r5, #1
 80150f6:	42ae      	cmp	r6, r5
 80150f8:	bf38      	it	cc
 80150fa:	2200      	movcc	r2, #0
 80150fc:	18a3      	adds	r3, r4, r2
 80150fe:	50a7      	str	r7, [r4, r2]
 8015100:	b107      	cbz	r7, 8015104 <rshift+0x68>
 8015102:	3304      	adds	r3, #4
 8015104:	1b1a      	subs	r2, r3, r4
 8015106:	42a3      	cmp	r3, r4
 8015108:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801510c:	bf08      	it	eq
 801510e:	2300      	moveq	r3, #0
 8015110:	6102      	str	r2, [r0, #16]
 8015112:	bf08      	it	eq
 8015114:	6143      	streq	r3, [r0, #20]
 8015116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801511a:	f8dc c000 	ldr.w	ip, [ip]
 801511e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015122:	ea4c 0707 	orr.w	r7, ip, r7
 8015126:	f849 7b04 	str.w	r7, [r9], #4
 801512a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801512e:	40cf      	lsrs	r7, r1
 8015130:	e7da      	b.n	80150e8 <rshift+0x4c>
 8015132:	f851 cb04 	ldr.w	ip, [r1], #4
 8015136:	f847 cf04 	str.w	ip, [r7, #4]!
 801513a:	e7c3      	b.n	80150c4 <rshift+0x28>
 801513c:	4623      	mov	r3, r4
 801513e:	e7e1      	b.n	8015104 <rshift+0x68>

08015140 <__hexdig_fun>:
 8015140:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015144:	2b09      	cmp	r3, #9
 8015146:	d802      	bhi.n	801514e <__hexdig_fun+0xe>
 8015148:	3820      	subs	r0, #32
 801514a:	b2c0      	uxtb	r0, r0
 801514c:	4770      	bx	lr
 801514e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015152:	2b05      	cmp	r3, #5
 8015154:	d801      	bhi.n	801515a <__hexdig_fun+0x1a>
 8015156:	3847      	subs	r0, #71	@ 0x47
 8015158:	e7f7      	b.n	801514a <__hexdig_fun+0xa>
 801515a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801515e:	2b05      	cmp	r3, #5
 8015160:	d801      	bhi.n	8015166 <__hexdig_fun+0x26>
 8015162:	3827      	subs	r0, #39	@ 0x27
 8015164:	e7f1      	b.n	801514a <__hexdig_fun+0xa>
 8015166:	2000      	movs	r0, #0
 8015168:	4770      	bx	lr
	...

0801516c <__gethex>:
 801516c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015170:	b085      	sub	sp, #20
 8015172:	468a      	mov	sl, r1
 8015174:	9302      	str	r3, [sp, #8]
 8015176:	680b      	ldr	r3, [r1, #0]
 8015178:	9001      	str	r0, [sp, #4]
 801517a:	4690      	mov	r8, r2
 801517c:	1c9c      	adds	r4, r3, #2
 801517e:	46a1      	mov	r9, r4
 8015180:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015184:	2830      	cmp	r0, #48	@ 0x30
 8015186:	d0fa      	beq.n	801517e <__gethex+0x12>
 8015188:	eba9 0303 	sub.w	r3, r9, r3
 801518c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015190:	f7ff ffd6 	bl	8015140 <__hexdig_fun>
 8015194:	4605      	mov	r5, r0
 8015196:	2800      	cmp	r0, #0
 8015198:	d168      	bne.n	801526c <__gethex+0x100>
 801519a:	49a0      	ldr	r1, [pc, #640]	@ (801541c <__gethex+0x2b0>)
 801519c:	2201      	movs	r2, #1
 801519e:	4648      	mov	r0, r9
 80151a0:	f7ff fefc 	bl	8014f9c <strncmp>
 80151a4:	4607      	mov	r7, r0
 80151a6:	2800      	cmp	r0, #0
 80151a8:	d167      	bne.n	801527a <__gethex+0x10e>
 80151aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80151ae:	4626      	mov	r6, r4
 80151b0:	f7ff ffc6 	bl	8015140 <__hexdig_fun>
 80151b4:	2800      	cmp	r0, #0
 80151b6:	d062      	beq.n	801527e <__gethex+0x112>
 80151b8:	4623      	mov	r3, r4
 80151ba:	7818      	ldrb	r0, [r3, #0]
 80151bc:	2830      	cmp	r0, #48	@ 0x30
 80151be:	4699      	mov	r9, r3
 80151c0:	f103 0301 	add.w	r3, r3, #1
 80151c4:	d0f9      	beq.n	80151ba <__gethex+0x4e>
 80151c6:	f7ff ffbb 	bl	8015140 <__hexdig_fun>
 80151ca:	fab0 f580 	clz	r5, r0
 80151ce:	096d      	lsrs	r5, r5, #5
 80151d0:	f04f 0b01 	mov.w	fp, #1
 80151d4:	464a      	mov	r2, r9
 80151d6:	4616      	mov	r6, r2
 80151d8:	3201      	adds	r2, #1
 80151da:	7830      	ldrb	r0, [r6, #0]
 80151dc:	f7ff ffb0 	bl	8015140 <__hexdig_fun>
 80151e0:	2800      	cmp	r0, #0
 80151e2:	d1f8      	bne.n	80151d6 <__gethex+0x6a>
 80151e4:	498d      	ldr	r1, [pc, #564]	@ (801541c <__gethex+0x2b0>)
 80151e6:	2201      	movs	r2, #1
 80151e8:	4630      	mov	r0, r6
 80151ea:	f7ff fed7 	bl	8014f9c <strncmp>
 80151ee:	2800      	cmp	r0, #0
 80151f0:	d13f      	bne.n	8015272 <__gethex+0x106>
 80151f2:	b944      	cbnz	r4, 8015206 <__gethex+0x9a>
 80151f4:	1c74      	adds	r4, r6, #1
 80151f6:	4622      	mov	r2, r4
 80151f8:	4616      	mov	r6, r2
 80151fa:	3201      	adds	r2, #1
 80151fc:	7830      	ldrb	r0, [r6, #0]
 80151fe:	f7ff ff9f 	bl	8015140 <__hexdig_fun>
 8015202:	2800      	cmp	r0, #0
 8015204:	d1f8      	bne.n	80151f8 <__gethex+0x8c>
 8015206:	1ba4      	subs	r4, r4, r6
 8015208:	00a7      	lsls	r7, r4, #2
 801520a:	7833      	ldrb	r3, [r6, #0]
 801520c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015210:	2b50      	cmp	r3, #80	@ 0x50
 8015212:	d13e      	bne.n	8015292 <__gethex+0x126>
 8015214:	7873      	ldrb	r3, [r6, #1]
 8015216:	2b2b      	cmp	r3, #43	@ 0x2b
 8015218:	d033      	beq.n	8015282 <__gethex+0x116>
 801521a:	2b2d      	cmp	r3, #45	@ 0x2d
 801521c:	d034      	beq.n	8015288 <__gethex+0x11c>
 801521e:	1c71      	adds	r1, r6, #1
 8015220:	2400      	movs	r4, #0
 8015222:	7808      	ldrb	r0, [r1, #0]
 8015224:	f7ff ff8c 	bl	8015140 <__hexdig_fun>
 8015228:	1e43      	subs	r3, r0, #1
 801522a:	b2db      	uxtb	r3, r3
 801522c:	2b18      	cmp	r3, #24
 801522e:	d830      	bhi.n	8015292 <__gethex+0x126>
 8015230:	f1a0 0210 	sub.w	r2, r0, #16
 8015234:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015238:	f7ff ff82 	bl	8015140 <__hexdig_fun>
 801523c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015240:	fa5f fc8c 	uxtb.w	ip, ip
 8015244:	f1bc 0f18 	cmp.w	ip, #24
 8015248:	f04f 030a 	mov.w	r3, #10
 801524c:	d91e      	bls.n	801528c <__gethex+0x120>
 801524e:	b104      	cbz	r4, 8015252 <__gethex+0xe6>
 8015250:	4252      	negs	r2, r2
 8015252:	4417      	add	r7, r2
 8015254:	f8ca 1000 	str.w	r1, [sl]
 8015258:	b1ed      	cbz	r5, 8015296 <__gethex+0x12a>
 801525a:	f1bb 0f00 	cmp.w	fp, #0
 801525e:	bf0c      	ite	eq
 8015260:	2506      	moveq	r5, #6
 8015262:	2500      	movne	r5, #0
 8015264:	4628      	mov	r0, r5
 8015266:	b005      	add	sp, #20
 8015268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801526c:	2500      	movs	r5, #0
 801526e:	462c      	mov	r4, r5
 8015270:	e7b0      	b.n	80151d4 <__gethex+0x68>
 8015272:	2c00      	cmp	r4, #0
 8015274:	d1c7      	bne.n	8015206 <__gethex+0x9a>
 8015276:	4627      	mov	r7, r4
 8015278:	e7c7      	b.n	801520a <__gethex+0x9e>
 801527a:	464e      	mov	r6, r9
 801527c:	462f      	mov	r7, r5
 801527e:	2501      	movs	r5, #1
 8015280:	e7c3      	b.n	801520a <__gethex+0x9e>
 8015282:	2400      	movs	r4, #0
 8015284:	1cb1      	adds	r1, r6, #2
 8015286:	e7cc      	b.n	8015222 <__gethex+0xb6>
 8015288:	2401      	movs	r4, #1
 801528a:	e7fb      	b.n	8015284 <__gethex+0x118>
 801528c:	fb03 0002 	mla	r0, r3, r2, r0
 8015290:	e7ce      	b.n	8015230 <__gethex+0xc4>
 8015292:	4631      	mov	r1, r6
 8015294:	e7de      	b.n	8015254 <__gethex+0xe8>
 8015296:	eba6 0309 	sub.w	r3, r6, r9
 801529a:	3b01      	subs	r3, #1
 801529c:	4629      	mov	r1, r5
 801529e:	2b07      	cmp	r3, #7
 80152a0:	dc0a      	bgt.n	80152b8 <__gethex+0x14c>
 80152a2:	9801      	ldr	r0, [sp, #4]
 80152a4:	f7fd ffa6 	bl	80131f4 <_Balloc>
 80152a8:	4604      	mov	r4, r0
 80152aa:	b940      	cbnz	r0, 80152be <__gethex+0x152>
 80152ac:	4b5c      	ldr	r3, [pc, #368]	@ (8015420 <__gethex+0x2b4>)
 80152ae:	4602      	mov	r2, r0
 80152b0:	21e4      	movs	r1, #228	@ 0xe4
 80152b2:	485c      	ldr	r0, [pc, #368]	@ (8015424 <__gethex+0x2b8>)
 80152b4:	f7ff fec0 	bl	8015038 <__assert_func>
 80152b8:	3101      	adds	r1, #1
 80152ba:	105b      	asrs	r3, r3, #1
 80152bc:	e7ef      	b.n	801529e <__gethex+0x132>
 80152be:	f100 0a14 	add.w	sl, r0, #20
 80152c2:	2300      	movs	r3, #0
 80152c4:	4655      	mov	r5, sl
 80152c6:	469b      	mov	fp, r3
 80152c8:	45b1      	cmp	r9, r6
 80152ca:	d337      	bcc.n	801533c <__gethex+0x1d0>
 80152cc:	f845 bb04 	str.w	fp, [r5], #4
 80152d0:	eba5 050a 	sub.w	r5, r5, sl
 80152d4:	10ad      	asrs	r5, r5, #2
 80152d6:	6125      	str	r5, [r4, #16]
 80152d8:	4658      	mov	r0, fp
 80152da:	f7fe f87d 	bl	80133d8 <__hi0bits>
 80152de:	016d      	lsls	r5, r5, #5
 80152e0:	f8d8 6000 	ldr.w	r6, [r8]
 80152e4:	1a2d      	subs	r5, r5, r0
 80152e6:	42b5      	cmp	r5, r6
 80152e8:	dd54      	ble.n	8015394 <__gethex+0x228>
 80152ea:	1bad      	subs	r5, r5, r6
 80152ec:	4629      	mov	r1, r5
 80152ee:	4620      	mov	r0, r4
 80152f0:	f7fe fc06 	bl	8013b00 <__any_on>
 80152f4:	4681      	mov	r9, r0
 80152f6:	b178      	cbz	r0, 8015318 <__gethex+0x1ac>
 80152f8:	1e6b      	subs	r3, r5, #1
 80152fa:	1159      	asrs	r1, r3, #5
 80152fc:	f003 021f 	and.w	r2, r3, #31
 8015300:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015304:	f04f 0901 	mov.w	r9, #1
 8015308:	fa09 f202 	lsl.w	r2, r9, r2
 801530c:	420a      	tst	r2, r1
 801530e:	d003      	beq.n	8015318 <__gethex+0x1ac>
 8015310:	454b      	cmp	r3, r9
 8015312:	dc36      	bgt.n	8015382 <__gethex+0x216>
 8015314:	f04f 0902 	mov.w	r9, #2
 8015318:	4629      	mov	r1, r5
 801531a:	4620      	mov	r0, r4
 801531c:	f7ff febe 	bl	801509c <rshift>
 8015320:	442f      	add	r7, r5
 8015322:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015326:	42bb      	cmp	r3, r7
 8015328:	da42      	bge.n	80153b0 <__gethex+0x244>
 801532a:	9801      	ldr	r0, [sp, #4]
 801532c:	4621      	mov	r1, r4
 801532e:	f7fd ffa1 	bl	8013274 <_Bfree>
 8015332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015334:	2300      	movs	r3, #0
 8015336:	6013      	str	r3, [r2, #0]
 8015338:	25a3      	movs	r5, #163	@ 0xa3
 801533a:	e793      	b.n	8015264 <__gethex+0xf8>
 801533c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015340:	2a2e      	cmp	r2, #46	@ 0x2e
 8015342:	d012      	beq.n	801536a <__gethex+0x1fe>
 8015344:	2b20      	cmp	r3, #32
 8015346:	d104      	bne.n	8015352 <__gethex+0x1e6>
 8015348:	f845 bb04 	str.w	fp, [r5], #4
 801534c:	f04f 0b00 	mov.w	fp, #0
 8015350:	465b      	mov	r3, fp
 8015352:	7830      	ldrb	r0, [r6, #0]
 8015354:	9303      	str	r3, [sp, #12]
 8015356:	f7ff fef3 	bl	8015140 <__hexdig_fun>
 801535a:	9b03      	ldr	r3, [sp, #12]
 801535c:	f000 000f 	and.w	r0, r0, #15
 8015360:	4098      	lsls	r0, r3
 8015362:	ea4b 0b00 	orr.w	fp, fp, r0
 8015366:	3304      	adds	r3, #4
 8015368:	e7ae      	b.n	80152c8 <__gethex+0x15c>
 801536a:	45b1      	cmp	r9, r6
 801536c:	d8ea      	bhi.n	8015344 <__gethex+0x1d8>
 801536e:	492b      	ldr	r1, [pc, #172]	@ (801541c <__gethex+0x2b0>)
 8015370:	9303      	str	r3, [sp, #12]
 8015372:	2201      	movs	r2, #1
 8015374:	4630      	mov	r0, r6
 8015376:	f7ff fe11 	bl	8014f9c <strncmp>
 801537a:	9b03      	ldr	r3, [sp, #12]
 801537c:	2800      	cmp	r0, #0
 801537e:	d1e1      	bne.n	8015344 <__gethex+0x1d8>
 8015380:	e7a2      	b.n	80152c8 <__gethex+0x15c>
 8015382:	1ea9      	subs	r1, r5, #2
 8015384:	4620      	mov	r0, r4
 8015386:	f7fe fbbb 	bl	8013b00 <__any_on>
 801538a:	2800      	cmp	r0, #0
 801538c:	d0c2      	beq.n	8015314 <__gethex+0x1a8>
 801538e:	f04f 0903 	mov.w	r9, #3
 8015392:	e7c1      	b.n	8015318 <__gethex+0x1ac>
 8015394:	da09      	bge.n	80153aa <__gethex+0x23e>
 8015396:	1b75      	subs	r5, r6, r5
 8015398:	4621      	mov	r1, r4
 801539a:	9801      	ldr	r0, [sp, #4]
 801539c:	462a      	mov	r2, r5
 801539e:	f7fe f979 	bl	8013694 <__lshift>
 80153a2:	1b7f      	subs	r7, r7, r5
 80153a4:	4604      	mov	r4, r0
 80153a6:	f100 0a14 	add.w	sl, r0, #20
 80153aa:	f04f 0900 	mov.w	r9, #0
 80153ae:	e7b8      	b.n	8015322 <__gethex+0x1b6>
 80153b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80153b4:	42bd      	cmp	r5, r7
 80153b6:	dd6f      	ble.n	8015498 <__gethex+0x32c>
 80153b8:	1bed      	subs	r5, r5, r7
 80153ba:	42ae      	cmp	r6, r5
 80153bc:	dc34      	bgt.n	8015428 <__gethex+0x2bc>
 80153be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80153c2:	2b02      	cmp	r3, #2
 80153c4:	d022      	beq.n	801540c <__gethex+0x2a0>
 80153c6:	2b03      	cmp	r3, #3
 80153c8:	d024      	beq.n	8015414 <__gethex+0x2a8>
 80153ca:	2b01      	cmp	r3, #1
 80153cc:	d115      	bne.n	80153fa <__gethex+0x28e>
 80153ce:	42ae      	cmp	r6, r5
 80153d0:	d113      	bne.n	80153fa <__gethex+0x28e>
 80153d2:	2e01      	cmp	r6, #1
 80153d4:	d10b      	bne.n	80153ee <__gethex+0x282>
 80153d6:	9a02      	ldr	r2, [sp, #8]
 80153d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80153dc:	6013      	str	r3, [r2, #0]
 80153de:	2301      	movs	r3, #1
 80153e0:	6123      	str	r3, [r4, #16]
 80153e2:	f8ca 3000 	str.w	r3, [sl]
 80153e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153e8:	2562      	movs	r5, #98	@ 0x62
 80153ea:	601c      	str	r4, [r3, #0]
 80153ec:	e73a      	b.n	8015264 <__gethex+0xf8>
 80153ee:	1e71      	subs	r1, r6, #1
 80153f0:	4620      	mov	r0, r4
 80153f2:	f7fe fb85 	bl	8013b00 <__any_on>
 80153f6:	2800      	cmp	r0, #0
 80153f8:	d1ed      	bne.n	80153d6 <__gethex+0x26a>
 80153fa:	9801      	ldr	r0, [sp, #4]
 80153fc:	4621      	mov	r1, r4
 80153fe:	f7fd ff39 	bl	8013274 <_Bfree>
 8015402:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015404:	2300      	movs	r3, #0
 8015406:	6013      	str	r3, [r2, #0]
 8015408:	2550      	movs	r5, #80	@ 0x50
 801540a:	e72b      	b.n	8015264 <__gethex+0xf8>
 801540c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801540e:	2b00      	cmp	r3, #0
 8015410:	d1f3      	bne.n	80153fa <__gethex+0x28e>
 8015412:	e7e0      	b.n	80153d6 <__gethex+0x26a>
 8015414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015416:	2b00      	cmp	r3, #0
 8015418:	d1dd      	bne.n	80153d6 <__gethex+0x26a>
 801541a:	e7ee      	b.n	80153fa <__gethex+0x28e>
 801541c:	0801606f 	.word	0x0801606f
 8015420:	08016005 	.word	0x08016005
 8015424:	080160c6 	.word	0x080160c6
 8015428:	1e6f      	subs	r7, r5, #1
 801542a:	f1b9 0f00 	cmp.w	r9, #0
 801542e:	d130      	bne.n	8015492 <__gethex+0x326>
 8015430:	b127      	cbz	r7, 801543c <__gethex+0x2d0>
 8015432:	4639      	mov	r1, r7
 8015434:	4620      	mov	r0, r4
 8015436:	f7fe fb63 	bl	8013b00 <__any_on>
 801543a:	4681      	mov	r9, r0
 801543c:	117a      	asrs	r2, r7, #5
 801543e:	2301      	movs	r3, #1
 8015440:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015444:	f007 071f 	and.w	r7, r7, #31
 8015448:	40bb      	lsls	r3, r7
 801544a:	4213      	tst	r3, r2
 801544c:	4629      	mov	r1, r5
 801544e:	4620      	mov	r0, r4
 8015450:	bf18      	it	ne
 8015452:	f049 0902 	orrne.w	r9, r9, #2
 8015456:	f7ff fe21 	bl	801509c <rshift>
 801545a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801545e:	1b76      	subs	r6, r6, r5
 8015460:	2502      	movs	r5, #2
 8015462:	f1b9 0f00 	cmp.w	r9, #0
 8015466:	d047      	beq.n	80154f8 <__gethex+0x38c>
 8015468:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801546c:	2b02      	cmp	r3, #2
 801546e:	d015      	beq.n	801549c <__gethex+0x330>
 8015470:	2b03      	cmp	r3, #3
 8015472:	d017      	beq.n	80154a4 <__gethex+0x338>
 8015474:	2b01      	cmp	r3, #1
 8015476:	d109      	bne.n	801548c <__gethex+0x320>
 8015478:	f019 0f02 	tst.w	r9, #2
 801547c:	d006      	beq.n	801548c <__gethex+0x320>
 801547e:	f8da 3000 	ldr.w	r3, [sl]
 8015482:	ea49 0903 	orr.w	r9, r9, r3
 8015486:	f019 0f01 	tst.w	r9, #1
 801548a:	d10e      	bne.n	80154aa <__gethex+0x33e>
 801548c:	f045 0510 	orr.w	r5, r5, #16
 8015490:	e032      	b.n	80154f8 <__gethex+0x38c>
 8015492:	f04f 0901 	mov.w	r9, #1
 8015496:	e7d1      	b.n	801543c <__gethex+0x2d0>
 8015498:	2501      	movs	r5, #1
 801549a:	e7e2      	b.n	8015462 <__gethex+0x2f6>
 801549c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801549e:	f1c3 0301 	rsb	r3, r3, #1
 80154a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80154a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d0f0      	beq.n	801548c <__gethex+0x320>
 80154aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80154ae:	f104 0314 	add.w	r3, r4, #20
 80154b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80154b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80154ba:	f04f 0c00 	mov.w	ip, #0
 80154be:	4618      	mov	r0, r3
 80154c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80154c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80154c8:	d01b      	beq.n	8015502 <__gethex+0x396>
 80154ca:	3201      	adds	r2, #1
 80154cc:	6002      	str	r2, [r0, #0]
 80154ce:	2d02      	cmp	r5, #2
 80154d0:	f104 0314 	add.w	r3, r4, #20
 80154d4:	d13c      	bne.n	8015550 <__gethex+0x3e4>
 80154d6:	f8d8 2000 	ldr.w	r2, [r8]
 80154da:	3a01      	subs	r2, #1
 80154dc:	42b2      	cmp	r2, r6
 80154de:	d109      	bne.n	80154f4 <__gethex+0x388>
 80154e0:	1171      	asrs	r1, r6, #5
 80154e2:	2201      	movs	r2, #1
 80154e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80154e8:	f006 061f 	and.w	r6, r6, #31
 80154ec:	fa02 f606 	lsl.w	r6, r2, r6
 80154f0:	421e      	tst	r6, r3
 80154f2:	d13a      	bne.n	801556a <__gethex+0x3fe>
 80154f4:	f045 0520 	orr.w	r5, r5, #32
 80154f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80154fa:	601c      	str	r4, [r3, #0]
 80154fc:	9b02      	ldr	r3, [sp, #8]
 80154fe:	601f      	str	r7, [r3, #0]
 8015500:	e6b0      	b.n	8015264 <__gethex+0xf8>
 8015502:	4299      	cmp	r1, r3
 8015504:	f843 cc04 	str.w	ip, [r3, #-4]
 8015508:	d8d9      	bhi.n	80154be <__gethex+0x352>
 801550a:	68a3      	ldr	r3, [r4, #8]
 801550c:	459b      	cmp	fp, r3
 801550e:	db17      	blt.n	8015540 <__gethex+0x3d4>
 8015510:	6861      	ldr	r1, [r4, #4]
 8015512:	9801      	ldr	r0, [sp, #4]
 8015514:	3101      	adds	r1, #1
 8015516:	f7fd fe6d 	bl	80131f4 <_Balloc>
 801551a:	4681      	mov	r9, r0
 801551c:	b918      	cbnz	r0, 8015526 <__gethex+0x3ba>
 801551e:	4b1a      	ldr	r3, [pc, #104]	@ (8015588 <__gethex+0x41c>)
 8015520:	4602      	mov	r2, r0
 8015522:	2184      	movs	r1, #132	@ 0x84
 8015524:	e6c5      	b.n	80152b2 <__gethex+0x146>
 8015526:	6922      	ldr	r2, [r4, #16]
 8015528:	3202      	adds	r2, #2
 801552a:	f104 010c 	add.w	r1, r4, #12
 801552e:	0092      	lsls	r2, r2, #2
 8015530:	300c      	adds	r0, #12
 8015532:	f7fc ff62 	bl	80123fa <memcpy>
 8015536:	4621      	mov	r1, r4
 8015538:	9801      	ldr	r0, [sp, #4]
 801553a:	f7fd fe9b 	bl	8013274 <_Bfree>
 801553e:	464c      	mov	r4, r9
 8015540:	6923      	ldr	r3, [r4, #16]
 8015542:	1c5a      	adds	r2, r3, #1
 8015544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015548:	6122      	str	r2, [r4, #16]
 801554a:	2201      	movs	r2, #1
 801554c:	615a      	str	r2, [r3, #20]
 801554e:	e7be      	b.n	80154ce <__gethex+0x362>
 8015550:	6922      	ldr	r2, [r4, #16]
 8015552:	455a      	cmp	r2, fp
 8015554:	dd0b      	ble.n	801556e <__gethex+0x402>
 8015556:	2101      	movs	r1, #1
 8015558:	4620      	mov	r0, r4
 801555a:	f7ff fd9f 	bl	801509c <rshift>
 801555e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015562:	3701      	adds	r7, #1
 8015564:	42bb      	cmp	r3, r7
 8015566:	f6ff aee0 	blt.w	801532a <__gethex+0x1be>
 801556a:	2501      	movs	r5, #1
 801556c:	e7c2      	b.n	80154f4 <__gethex+0x388>
 801556e:	f016 061f 	ands.w	r6, r6, #31
 8015572:	d0fa      	beq.n	801556a <__gethex+0x3fe>
 8015574:	4453      	add	r3, sl
 8015576:	f1c6 0620 	rsb	r6, r6, #32
 801557a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801557e:	f7fd ff2b 	bl	80133d8 <__hi0bits>
 8015582:	42b0      	cmp	r0, r6
 8015584:	dbe7      	blt.n	8015556 <__gethex+0x3ea>
 8015586:	e7f0      	b.n	801556a <__gethex+0x3fe>
 8015588:	08016005 	.word	0x08016005

0801558c <L_shift>:
 801558c:	f1c2 0208 	rsb	r2, r2, #8
 8015590:	0092      	lsls	r2, r2, #2
 8015592:	b570      	push	{r4, r5, r6, lr}
 8015594:	f1c2 0620 	rsb	r6, r2, #32
 8015598:	6843      	ldr	r3, [r0, #4]
 801559a:	6804      	ldr	r4, [r0, #0]
 801559c:	fa03 f506 	lsl.w	r5, r3, r6
 80155a0:	432c      	orrs	r4, r5
 80155a2:	40d3      	lsrs	r3, r2
 80155a4:	6004      	str	r4, [r0, #0]
 80155a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80155aa:	4288      	cmp	r0, r1
 80155ac:	d3f4      	bcc.n	8015598 <L_shift+0xc>
 80155ae:	bd70      	pop	{r4, r5, r6, pc}

080155b0 <__match>:
 80155b0:	b530      	push	{r4, r5, lr}
 80155b2:	6803      	ldr	r3, [r0, #0]
 80155b4:	3301      	adds	r3, #1
 80155b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155ba:	b914      	cbnz	r4, 80155c2 <__match+0x12>
 80155bc:	6003      	str	r3, [r0, #0]
 80155be:	2001      	movs	r0, #1
 80155c0:	bd30      	pop	{r4, r5, pc}
 80155c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80155ca:	2d19      	cmp	r5, #25
 80155cc:	bf98      	it	ls
 80155ce:	3220      	addls	r2, #32
 80155d0:	42a2      	cmp	r2, r4
 80155d2:	d0f0      	beq.n	80155b6 <__match+0x6>
 80155d4:	2000      	movs	r0, #0
 80155d6:	e7f3      	b.n	80155c0 <__match+0x10>

080155d8 <__hexnan>:
 80155d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155dc:	680b      	ldr	r3, [r1, #0]
 80155de:	6801      	ldr	r1, [r0, #0]
 80155e0:	115e      	asrs	r6, r3, #5
 80155e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80155e6:	f013 031f 	ands.w	r3, r3, #31
 80155ea:	b087      	sub	sp, #28
 80155ec:	bf18      	it	ne
 80155ee:	3604      	addne	r6, #4
 80155f0:	2500      	movs	r5, #0
 80155f2:	1f37      	subs	r7, r6, #4
 80155f4:	4682      	mov	sl, r0
 80155f6:	4690      	mov	r8, r2
 80155f8:	9301      	str	r3, [sp, #4]
 80155fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80155fe:	46b9      	mov	r9, r7
 8015600:	463c      	mov	r4, r7
 8015602:	9502      	str	r5, [sp, #8]
 8015604:	46ab      	mov	fp, r5
 8015606:	784a      	ldrb	r2, [r1, #1]
 8015608:	1c4b      	adds	r3, r1, #1
 801560a:	9303      	str	r3, [sp, #12]
 801560c:	b342      	cbz	r2, 8015660 <__hexnan+0x88>
 801560e:	4610      	mov	r0, r2
 8015610:	9105      	str	r1, [sp, #20]
 8015612:	9204      	str	r2, [sp, #16]
 8015614:	f7ff fd94 	bl	8015140 <__hexdig_fun>
 8015618:	2800      	cmp	r0, #0
 801561a:	d151      	bne.n	80156c0 <__hexnan+0xe8>
 801561c:	9a04      	ldr	r2, [sp, #16]
 801561e:	9905      	ldr	r1, [sp, #20]
 8015620:	2a20      	cmp	r2, #32
 8015622:	d818      	bhi.n	8015656 <__hexnan+0x7e>
 8015624:	9b02      	ldr	r3, [sp, #8]
 8015626:	459b      	cmp	fp, r3
 8015628:	dd13      	ble.n	8015652 <__hexnan+0x7a>
 801562a:	454c      	cmp	r4, r9
 801562c:	d206      	bcs.n	801563c <__hexnan+0x64>
 801562e:	2d07      	cmp	r5, #7
 8015630:	dc04      	bgt.n	801563c <__hexnan+0x64>
 8015632:	462a      	mov	r2, r5
 8015634:	4649      	mov	r1, r9
 8015636:	4620      	mov	r0, r4
 8015638:	f7ff ffa8 	bl	801558c <L_shift>
 801563c:	4544      	cmp	r4, r8
 801563e:	d952      	bls.n	80156e6 <__hexnan+0x10e>
 8015640:	2300      	movs	r3, #0
 8015642:	f1a4 0904 	sub.w	r9, r4, #4
 8015646:	f844 3c04 	str.w	r3, [r4, #-4]
 801564a:	f8cd b008 	str.w	fp, [sp, #8]
 801564e:	464c      	mov	r4, r9
 8015650:	461d      	mov	r5, r3
 8015652:	9903      	ldr	r1, [sp, #12]
 8015654:	e7d7      	b.n	8015606 <__hexnan+0x2e>
 8015656:	2a29      	cmp	r2, #41	@ 0x29
 8015658:	d157      	bne.n	801570a <__hexnan+0x132>
 801565a:	3102      	adds	r1, #2
 801565c:	f8ca 1000 	str.w	r1, [sl]
 8015660:	f1bb 0f00 	cmp.w	fp, #0
 8015664:	d051      	beq.n	801570a <__hexnan+0x132>
 8015666:	454c      	cmp	r4, r9
 8015668:	d206      	bcs.n	8015678 <__hexnan+0xa0>
 801566a:	2d07      	cmp	r5, #7
 801566c:	dc04      	bgt.n	8015678 <__hexnan+0xa0>
 801566e:	462a      	mov	r2, r5
 8015670:	4649      	mov	r1, r9
 8015672:	4620      	mov	r0, r4
 8015674:	f7ff ff8a 	bl	801558c <L_shift>
 8015678:	4544      	cmp	r4, r8
 801567a:	d936      	bls.n	80156ea <__hexnan+0x112>
 801567c:	f1a8 0204 	sub.w	r2, r8, #4
 8015680:	4623      	mov	r3, r4
 8015682:	f853 1b04 	ldr.w	r1, [r3], #4
 8015686:	f842 1f04 	str.w	r1, [r2, #4]!
 801568a:	429f      	cmp	r7, r3
 801568c:	d2f9      	bcs.n	8015682 <__hexnan+0xaa>
 801568e:	1b3b      	subs	r3, r7, r4
 8015690:	f023 0303 	bic.w	r3, r3, #3
 8015694:	3304      	adds	r3, #4
 8015696:	3401      	adds	r4, #1
 8015698:	3e03      	subs	r6, #3
 801569a:	42b4      	cmp	r4, r6
 801569c:	bf88      	it	hi
 801569e:	2304      	movhi	r3, #4
 80156a0:	4443      	add	r3, r8
 80156a2:	2200      	movs	r2, #0
 80156a4:	f843 2b04 	str.w	r2, [r3], #4
 80156a8:	429f      	cmp	r7, r3
 80156aa:	d2fb      	bcs.n	80156a4 <__hexnan+0xcc>
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	b91b      	cbnz	r3, 80156b8 <__hexnan+0xe0>
 80156b0:	4547      	cmp	r7, r8
 80156b2:	d128      	bne.n	8015706 <__hexnan+0x12e>
 80156b4:	2301      	movs	r3, #1
 80156b6:	603b      	str	r3, [r7, #0]
 80156b8:	2005      	movs	r0, #5
 80156ba:	b007      	add	sp, #28
 80156bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156c0:	3501      	adds	r5, #1
 80156c2:	2d08      	cmp	r5, #8
 80156c4:	f10b 0b01 	add.w	fp, fp, #1
 80156c8:	dd06      	ble.n	80156d8 <__hexnan+0x100>
 80156ca:	4544      	cmp	r4, r8
 80156cc:	d9c1      	bls.n	8015652 <__hexnan+0x7a>
 80156ce:	2300      	movs	r3, #0
 80156d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80156d4:	2501      	movs	r5, #1
 80156d6:	3c04      	subs	r4, #4
 80156d8:	6822      	ldr	r2, [r4, #0]
 80156da:	f000 000f 	and.w	r0, r0, #15
 80156de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80156e2:	6020      	str	r0, [r4, #0]
 80156e4:	e7b5      	b.n	8015652 <__hexnan+0x7a>
 80156e6:	2508      	movs	r5, #8
 80156e8:	e7b3      	b.n	8015652 <__hexnan+0x7a>
 80156ea:	9b01      	ldr	r3, [sp, #4]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d0dd      	beq.n	80156ac <__hexnan+0xd4>
 80156f0:	f1c3 0320 	rsb	r3, r3, #32
 80156f4:	f04f 32ff 	mov.w	r2, #4294967295
 80156f8:	40da      	lsrs	r2, r3
 80156fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80156fe:	4013      	ands	r3, r2
 8015700:	f846 3c04 	str.w	r3, [r6, #-4]
 8015704:	e7d2      	b.n	80156ac <__hexnan+0xd4>
 8015706:	3f04      	subs	r7, #4
 8015708:	e7d0      	b.n	80156ac <__hexnan+0xd4>
 801570a:	2004      	movs	r0, #4
 801570c:	e7d5      	b.n	80156ba <__hexnan+0xe2>

0801570e <__ascii_mbtowc>:
 801570e:	b082      	sub	sp, #8
 8015710:	b901      	cbnz	r1, 8015714 <__ascii_mbtowc+0x6>
 8015712:	a901      	add	r1, sp, #4
 8015714:	b142      	cbz	r2, 8015728 <__ascii_mbtowc+0x1a>
 8015716:	b14b      	cbz	r3, 801572c <__ascii_mbtowc+0x1e>
 8015718:	7813      	ldrb	r3, [r2, #0]
 801571a:	600b      	str	r3, [r1, #0]
 801571c:	7812      	ldrb	r2, [r2, #0]
 801571e:	1e10      	subs	r0, r2, #0
 8015720:	bf18      	it	ne
 8015722:	2001      	movne	r0, #1
 8015724:	b002      	add	sp, #8
 8015726:	4770      	bx	lr
 8015728:	4610      	mov	r0, r2
 801572a:	e7fb      	b.n	8015724 <__ascii_mbtowc+0x16>
 801572c:	f06f 0001 	mvn.w	r0, #1
 8015730:	e7f8      	b.n	8015724 <__ascii_mbtowc+0x16>

08015732 <_realloc_r>:
 8015732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015736:	4607      	mov	r7, r0
 8015738:	4614      	mov	r4, r2
 801573a:	460d      	mov	r5, r1
 801573c:	b921      	cbnz	r1, 8015748 <_realloc_r+0x16>
 801573e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015742:	4611      	mov	r1, r2
 8015744:	f7fd bcca 	b.w	80130dc <_malloc_r>
 8015748:	b92a      	cbnz	r2, 8015756 <_realloc_r+0x24>
 801574a:	f7fd fc53 	bl	8012ff4 <_free_r>
 801574e:	4625      	mov	r5, r4
 8015750:	4628      	mov	r0, r5
 8015752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015756:	f000 f840 	bl	80157da <_malloc_usable_size_r>
 801575a:	4284      	cmp	r4, r0
 801575c:	4606      	mov	r6, r0
 801575e:	d802      	bhi.n	8015766 <_realloc_r+0x34>
 8015760:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015764:	d8f4      	bhi.n	8015750 <_realloc_r+0x1e>
 8015766:	4621      	mov	r1, r4
 8015768:	4638      	mov	r0, r7
 801576a:	f7fd fcb7 	bl	80130dc <_malloc_r>
 801576e:	4680      	mov	r8, r0
 8015770:	b908      	cbnz	r0, 8015776 <_realloc_r+0x44>
 8015772:	4645      	mov	r5, r8
 8015774:	e7ec      	b.n	8015750 <_realloc_r+0x1e>
 8015776:	42b4      	cmp	r4, r6
 8015778:	4622      	mov	r2, r4
 801577a:	4629      	mov	r1, r5
 801577c:	bf28      	it	cs
 801577e:	4632      	movcs	r2, r6
 8015780:	f7fc fe3b 	bl	80123fa <memcpy>
 8015784:	4629      	mov	r1, r5
 8015786:	4638      	mov	r0, r7
 8015788:	f7fd fc34 	bl	8012ff4 <_free_r>
 801578c:	e7f1      	b.n	8015772 <_realloc_r+0x40>

0801578e <__ascii_wctomb>:
 801578e:	4603      	mov	r3, r0
 8015790:	4608      	mov	r0, r1
 8015792:	b141      	cbz	r1, 80157a6 <__ascii_wctomb+0x18>
 8015794:	2aff      	cmp	r2, #255	@ 0xff
 8015796:	d904      	bls.n	80157a2 <__ascii_wctomb+0x14>
 8015798:	228a      	movs	r2, #138	@ 0x8a
 801579a:	601a      	str	r2, [r3, #0]
 801579c:	f04f 30ff 	mov.w	r0, #4294967295
 80157a0:	4770      	bx	lr
 80157a2:	700a      	strb	r2, [r1, #0]
 80157a4:	2001      	movs	r0, #1
 80157a6:	4770      	bx	lr

080157a8 <fiprintf>:
 80157a8:	b40e      	push	{r1, r2, r3}
 80157aa:	b503      	push	{r0, r1, lr}
 80157ac:	4601      	mov	r1, r0
 80157ae:	ab03      	add	r3, sp, #12
 80157b0:	4805      	ldr	r0, [pc, #20]	@ (80157c8 <fiprintf+0x20>)
 80157b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80157b6:	6800      	ldr	r0, [r0, #0]
 80157b8:	9301      	str	r3, [sp, #4]
 80157ba:	f7ff f97b 	bl	8014ab4 <_vfiprintf_r>
 80157be:	b002      	add	sp, #8
 80157c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80157c4:	b003      	add	sp, #12
 80157c6:	4770      	bx	lr
 80157c8:	24000034 	.word	0x24000034

080157cc <abort>:
 80157cc:	b508      	push	{r3, lr}
 80157ce:	2006      	movs	r0, #6
 80157d0:	f000 f834 	bl	801583c <raise>
 80157d4:	2001      	movs	r0, #1
 80157d6:	f7ee fb6d 	bl	8003eb4 <_exit>

080157da <_malloc_usable_size_r>:
 80157da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80157de:	1f18      	subs	r0, r3, #4
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	bfbc      	itt	lt
 80157e4:	580b      	ldrlt	r3, [r1, r0]
 80157e6:	18c0      	addlt	r0, r0, r3
 80157e8:	4770      	bx	lr

080157ea <_raise_r>:
 80157ea:	291f      	cmp	r1, #31
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	4605      	mov	r5, r0
 80157f0:	460c      	mov	r4, r1
 80157f2:	d904      	bls.n	80157fe <_raise_r+0x14>
 80157f4:	2316      	movs	r3, #22
 80157f6:	6003      	str	r3, [r0, #0]
 80157f8:	f04f 30ff 	mov.w	r0, #4294967295
 80157fc:	bd38      	pop	{r3, r4, r5, pc}
 80157fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015800:	b112      	cbz	r2, 8015808 <_raise_r+0x1e>
 8015802:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015806:	b94b      	cbnz	r3, 801581c <_raise_r+0x32>
 8015808:	4628      	mov	r0, r5
 801580a:	f000 f831 	bl	8015870 <_getpid_r>
 801580e:	4622      	mov	r2, r4
 8015810:	4601      	mov	r1, r0
 8015812:	4628      	mov	r0, r5
 8015814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015818:	f000 b818 	b.w	801584c <_kill_r>
 801581c:	2b01      	cmp	r3, #1
 801581e:	d00a      	beq.n	8015836 <_raise_r+0x4c>
 8015820:	1c59      	adds	r1, r3, #1
 8015822:	d103      	bne.n	801582c <_raise_r+0x42>
 8015824:	2316      	movs	r3, #22
 8015826:	6003      	str	r3, [r0, #0]
 8015828:	2001      	movs	r0, #1
 801582a:	e7e7      	b.n	80157fc <_raise_r+0x12>
 801582c:	2100      	movs	r1, #0
 801582e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015832:	4620      	mov	r0, r4
 8015834:	4798      	blx	r3
 8015836:	2000      	movs	r0, #0
 8015838:	e7e0      	b.n	80157fc <_raise_r+0x12>
	...

0801583c <raise>:
 801583c:	4b02      	ldr	r3, [pc, #8]	@ (8015848 <raise+0xc>)
 801583e:	4601      	mov	r1, r0
 8015840:	6818      	ldr	r0, [r3, #0]
 8015842:	f7ff bfd2 	b.w	80157ea <_raise_r>
 8015846:	bf00      	nop
 8015848:	24000034 	.word	0x24000034

0801584c <_kill_r>:
 801584c:	b538      	push	{r3, r4, r5, lr}
 801584e:	4d07      	ldr	r5, [pc, #28]	@ (801586c <_kill_r+0x20>)
 8015850:	2300      	movs	r3, #0
 8015852:	4604      	mov	r4, r0
 8015854:	4608      	mov	r0, r1
 8015856:	4611      	mov	r1, r2
 8015858:	602b      	str	r3, [r5, #0]
 801585a:	f7ee fb1b 	bl	8003e94 <_kill>
 801585e:	1c43      	adds	r3, r0, #1
 8015860:	d102      	bne.n	8015868 <_kill_r+0x1c>
 8015862:	682b      	ldr	r3, [r5, #0]
 8015864:	b103      	cbz	r3, 8015868 <_kill_r+0x1c>
 8015866:	6023      	str	r3, [r4, #0]
 8015868:	bd38      	pop	{r3, r4, r5, pc}
 801586a:	bf00      	nop
 801586c:	24001640 	.word	0x24001640

08015870 <_getpid_r>:
 8015870:	f7ee bb08 	b.w	8003e84 <_getpid>

08015874 <logf>:
 8015874:	ee10 3a10 	vmov	r3, s0
 8015878:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801587c:	b410      	push	{r4}
 801587e:	d055      	beq.n	801592c <logf+0xb8>
 8015880:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 8015884:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8015888:	d31a      	bcc.n	80158c0 <logf+0x4c>
 801588a:	005a      	lsls	r2, r3, #1
 801588c:	d104      	bne.n	8015898 <logf+0x24>
 801588e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015892:	2001      	movs	r0, #1
 8015894:	f000 b862 	b.w	801595c <__math_divzerof>
 8015898:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801589c:	d043      	beq.n	8015926 <logf+0xb2>
 801589e:	2b00      	cmp	r3, #0
 80158a0:	db02      	blt.n	80158a8 <logf+0x34>
 80158a2:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 80158a6:	d303      	bcc.n	80158b0 <logf+0x3c>
 80158a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158ac:	f000 b868 	b.w	8015980 <__math_invalidf>
 80158b0:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8015934 <logf+0xc0>
 80158b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80158b8:	ee10 3a10 	vmov	r3, s0
 80158bc:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 80158c0:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 80158c4:	491c      	ldr	r1, [pc, #112]	@ (8015938 <logf+0xc4>)
 80158c6:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 80158ca:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 80158ce:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80158d2:	0dd4      	lsrs	r4, r2, #23
 80158d4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80158d8:	05e4      	lsls	r4, r4, #23
 80158da:	ed90 5b00 	vldr	d5, [r0]
 80158de:	1b1b      	subs	r3, r3, r4
 80158e0:	ee07 3a90 	vmov	s15, r3
 80158e4:	ed90 6b02 	vldr	d6, [r0, #8]
 80158e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80158ec:	15d2      	asrs	r2, r2, #23
 80158ee:	eea5 0b07 	vfma.f64	d0, d5, d7
 80158f2:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 80158f6:	ee20 4b00 	vmul.f64	d4, d0, d0
 80158fa:	ee07 2a90 	vmov	s15, r2
 80158fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015902:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015906:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 801590a:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 801590e:	eea5 7b00 	vfma.f64	d7, d5, d0
 8015912:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 8015916:	ee30 0b06 	vadd.f64	d0, d0, d6
 801591a:	eea5 7b04 	vfma.f64	d7, d5, d4
 801591e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015922:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801592a:	4770      	bx	lr
 801592c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 801593c <logf+0xc8>
 8015930:	e7f9      	b.n	8015926 <logf+0xb2>
 8015932:	bf00      	nop
 8015934:	4b000000 	.word	0x4b000000
 8015938:	08016380 	.word	0x08016380
 801593c:	00000000 	.word	0x00000000

08015940 <with_errnof>:
 8015940:	b510      	push	{r4, lr}
 8015942:	ed2d 8b02 	vpush	{d8}
 8015946:	eeb0 8a40 	vmov.f32	s16, s0
 801594a:	4604      	mov	r4, r0
 801594c:	f7fc fd28 	bl	80123a0 <__errno>
 8015950:	eeb0 0a48 	vmov.f32	s0, s16
 8015954:	ecbd 8b02 	vpop	{d8}
 8015958:	6004      	str	r4, [r0, #0]
 801595a:	bd10      	pop	{r4, pc}

0801595c <__math_divzerof>:
 801595c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801597c <__math_divzerof+0x20>
 8015960:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015964:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8015968:	2800      	cmp	r0, #0
 801596a:	f04f 0022 	mov.w	r0, #34	@ 0x22
 801596e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8015972:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015976:	f7ff bfe3 	b.w	8015940 <with_errnof>
 801597a:	bf00      	nop
 801597c:	00000000 	.word	0x00000000

08015980 <__math_invalidf>:
 8015980:	eef0 7a40 	vmov.f32	s15, s0
 8015984:	ee30 7a40 	vsub.f32	s14, s0, s0
 8015988:	eef4 7a67 	vcmp.f32	s15, s15
 801598c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015990:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8015994:	d602      	bvs.n	801599c <__math_invalidf+0x1c>
 8015996:	2021      	movs	r0, #33	@ 0x21
 8015998:	f7ff bfd2 	b.w	8015940 <with_errnof>
 801599c:	4770      	bx	lr
	...

080159a0 <_init>:
 80159a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159a2:	bf00      	nop
 80159a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159a6:	bc08      	pop	{r3}
 80159a8:	469e      	mov	lr, r3
 80159aa:	4770      	bx	lr

080159ac <_fini>:
 80159ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ae:	bf00      	nop
 80159b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159b2:	bc08      	pop	{r3}
 80159b4:	469e      	mov	lr, r3
 80159b6:	4770      	bx	lr
